[{"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx":"1","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts":"2","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts":"3","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx":"4","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts":"5","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts":"6","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts":"7","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts":"8","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts":"9","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts":"10","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx":"11","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts":"12","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts":"13","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts":"14","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts":"15","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts":"16","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts":"17","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts":"18","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts":"19","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx":"20","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx":"21","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx":"22","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx":"23","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx":"24","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx":"25","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx":"26","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx":"27","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx":"28","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx":"29","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx":"30","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx":"31","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx":"32","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx":"33","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx":"34","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx":"35","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx":"36","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx":"37","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx":"38","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx":"39","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx":"40","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx":"41","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx":"42","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx":"43","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx":"44","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts":"45","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts":"46","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts":"47","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts":"48","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts":"49","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts":"50","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx":"51","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx":"52","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx":"53","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx":"54","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx":"55","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx":"56","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx":"57","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx":"58","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassesForm.tsx":"59","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx":"60","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts":"61","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts":"62","D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts":"63","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx":"64","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts":"65","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts":"66","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx":"67","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts":"68","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts":"69","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts":"70","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts":"71","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts":"72","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts":"73","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx":"74","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts":"75","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts":"76","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts":"77","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts":"78","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts":"79","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts":"80","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\History.ts":"81","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts":"82","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx":"83","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx":"84","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx":"85","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx":"86","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx":"87","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx":"88","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx":"89","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx":"90","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx":"91","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx":"92","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx":"93","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx":"94","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx":"95","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx":"96","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx":"97","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx":"98","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx":"99","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx":"100","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx":"101","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx":"102","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx":"103","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx":"104","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx":"105","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx":"106","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx":"107","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts":"108","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts":"109","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts":"110","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts":"111","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts":"112","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx":"113","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx":"114","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx":"115","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx":"116","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx":"117","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx":"118","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx":"119","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx":"120","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassesForm.tsx":"121","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts":"122","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx":"123","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts":"124","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts":"125","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts":"126","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx":"127","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts":"128","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts":"129","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx":"130","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts":"131","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts":"132","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts":"133","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts":"134","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts":"135","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts":"136","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx":"137","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts":"138","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts":"139","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts":"140","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts":"141","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts":"142","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts":"143","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts":"144","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts":"145","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx":"146","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx":"147","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx":"148","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx":"149","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx":"150","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx":"151","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx":"152","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx":"153","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx":"154","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx":"155","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx":"156","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx":"157","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx":"158","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx":"159","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx":"160","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx":"161","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx":"162","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx":"163","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx":"164","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx":"165","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx":"166","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx":"167","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx":"168","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx":"169","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx":"170","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts":"171","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts":"172","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts":"173","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts":"174","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts":"175","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx":"176","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx":"177","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx":"178","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx":"179","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx":"180","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx":"181","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx":"182","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx":"183","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts":"184","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx":"185","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts":"186","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts":"187","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts":"188","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx":"189","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts":"190","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts":"191","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx":"192","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts":"193","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts":"194","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts":"195","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts":"196","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts":"197","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts":"198","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx":"199","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts":"200","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts":"201","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts":"202","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts":"203","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts":"204","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts":"205","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts":"206","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts":"207","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx":"208","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx":"209","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx":"210","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx":"211","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx":"212","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx":"213","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx":"214","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx":"215","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx":"216","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx":"217","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx":"218","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx":"219","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx":"220","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx":"221","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx":"222","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx":"223","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx":"224","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx":"225","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx":"226","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx":"227","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx":"228","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx":"229","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx":"230","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx":"231","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx":"232","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts":"233","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts":"234","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts":"235","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts":"236","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts":"237","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx":"238","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx":"239","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx":"240","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx":"241","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts":"242","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx":"243","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx":"244","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx":"245","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx":"246","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx":"247","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts":"248","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts":"249","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts":"250","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\CommonLoader.tsx":"251","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\index.tsx":"252","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts":"253","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\App.tsx":"254","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts":"255","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts":"256","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts":"257","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts":"258","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts":"259","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts":"260","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx":"261","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts":"262","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Reducer.ts":"263","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Reducer.ts":"264","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Reducer.ts":"265","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Reducer.ts":"266","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts":"267","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts":"268","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts":"269","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts":"270","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\History.ts":"271","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts":"272","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts":"273","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Types.ts":"274","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Types.ts":"275","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Types.ts":"276","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Type.ts":"277","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx":"278","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts":"279","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx":"280","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx":"281","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx":"282","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx":"283","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx":"284","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx":"285","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotOTPCheck.tsx":"286","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx":"287","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\NotFoundPage.tsx":"288","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx":"289","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx":"290","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddTeacher.tsx":"291","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditTeacher.tsx":"292","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx":"293","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx":"294","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx":"295","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx":"296","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx":"297","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx":"298","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx":"299","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx":"300","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx":"301","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx":"302","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx":"303","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx":"304","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx":"305","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx":"306","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\AddStudent.tsx":"307","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx":"308","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\ViewStudentFullDetails.tsx":"309","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\ViewStudentDetails.tsx":"310","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\EditStudent.tsx":"311","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddSubject.tsx":"312","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddClassInCharge.tsx":"313","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\TeacherView.tsx":"314","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\ViewFullDetailTeacher.tsx":"315","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditClassInCharge.tsx":"316","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\diary\\ViewDiaryDetails.tsx":"317","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditTeacherSubject.tsx":"318","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\viewQuestionDetails.tsx":"319","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\AddQuestion.tsx":"320","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\ViewQuestion.tsx":"321","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\AddMoreQuestion.tsx":"322","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\noticeboard\\ViewNoticeBoard.tsx":"323","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts":"324","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts":"325","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts":"326","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Actions.ts":"327","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts":"328","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx":"329","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts":"330","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Actions.ts":"331","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserForm.tsx":"332","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPasswordValidation.tsx":"333","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts":"334","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Actions.ts":"335","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx":"336","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx":"337","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx":"338","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx":"339","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddTeacherForm.tsx":"340","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\CommonLoader.tsx":"341","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\noticeboard\\NoticeBoardValidation.tsx":"342","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\ImageUpload.tsx":"343","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\StudentList.tsx":"344","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\QuestionValidation.tsx":"345","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Actions.ts":"346","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\Service.ts":"347","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\diary\\Diaryvalidation.tsx":"348","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentForms.tsx":"349","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts":"350","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx":"351","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\TeacherValidation.tsx":"352","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassValidation.tsx":"353","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentValidation.tsx":"354","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx":"355","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx":"356","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentImage.tsx":"357","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx":"358"},{"size":349,"mtime":1612072824715,"results":"359","hashOfConfig":"360"},{"size":441,"mtime":1612072824730,"results":"361","hashOfConfig":"360"},{"size":1974,"mtime":1612072824732,"results":"362","hashOfConfig":"360"},{"size":257,"mtime":1612072824711,"results":"363","hashOfConfig":"360"},{"size":2188,"mtime":1612072824735,"results":"364","hashOfConfig":"360"},{"size":2444,"mtime":1612072824736,"results":"365","hashOfConfig":"360"},{"size":1922,"mtime":1612072824732,"results":"366","hashOfConfig":"360"},{"size":1055,"mtime":1612072824734,"results":"367","hashOfConfig":"360"},{"size":2283,"mtime":1612072824733,"results":"368","hashOfConfig":"360"},{"size":2058,"mtime":1612072824738,"results":"369","hashOfConfig":"360"},{"size":7073,"mtime":1612072824730,"results":"370","hashOfConfig":"360"},{"size":2849,"mtime":1612072824737,"results":"371","hashOfConfig":"360"},{"size":2065,"mtime":1612072824736,"results":"372","hashOfConfig":"360"},{"size":801,"mtime":1612072824735,"results":"373","hashOfConfig":"360"},{"size":1354,"mtime":1612072824734,"results":"374","hashOfConfig":"360"},{"size":2888,"mtime":1612072824733,"results":"375","hashOfConfig":"360"},{"size":1418,"mtime":1612072824738,"results":"376","hashOfConfig":"360"},{"size":87,"mtime":1612072824711,"results":"377","hashOfConfig":"360"},{"size":9205,"mtime":1612072824731,"results":"378","hashOfConfig":"360"},{"size":1857,"mtime":1612072824730,"results":"379","hashOfConfig":"360"},{"size":1634,"mtime":1612072824731,"results":"380","hashOfConfig":"360"},{"size":756,"mtime":1612072824715,"results":"381","hashOfConfig":"360"},{"size":15868,"mtime":1612129106469,"results":"382","hashOfConfig":"360"},{"size":9174,"mtime":1612072824727,"results":"383","hashOfConfig":"360"},{"size":8018,"mtime":1612072824726,"results":"384","hashOfConfig":"360"},{"size":20482,"mtime":1612121835381,"results":"385","hashOfConfig":"360"},{"size":13312,"mtime":1612121835382,"results":"386","hashOfConfig":"360"},{"size":24286,"mtime":1612072824725,"results":"387","hashOfConfig":"360"},{"size":18536,"mtime":1612072824725,"results":"388","hashOfConfig":"360"},{"size":5272,"mtime":1612072824718,"results":"389","hashOfConfig":"360"},{"size":759,"mtime":1612072824722,"results":"390","hashOfConfig":"360"},{"size":5086,"mtime":1612121835378,"results":"391","hashOfConfig":"360"},{"size":5371,"mtime":1612072824719,"results":"392","hashOfConfig":"360"},{"size":8671,"mtime":1612072824719,"results":"393","hashOfConfig":"360"},{"size":5100,"mtime":1612072824718,"results":"394","hashOfConfig":"360"},{"size":3985,"mtime":1612072824720,"results":"395","hashOfConfig":"360"},{"size":667,"mtime":1612072824724,"results":"396","hashOfConfig":"360"},{"size":12277,"mtime":1612072824722,"results":"397","hashOfConfig":"360"},{"size":5532,"mtime":1612072824720,"results":"398","hashOfConfig":"360"},{"size":1979,"mtime":1612072824721,"results":"399","hashOfConfig":"360"},{"size":7770,"mtime":1612072824721,"results":"400","hashOfConfig":"360"},{"size":13378,"mtime":1612072824729,"results":"401","hashOfConfig":"360"},{"size":10573,"mtime":1612072824728,"results":"402","hashOfConfig":"360"},{"size":11947,"mtime":1612072824729,"results":"403","hashOfConfig":"360"},{"size":11084,"mtime":1612072824736,"results":"404","hashOfConfig":"360"},{"size":9660,"mtime":1612072824735,"results":"405","hashOfConfig":"360"},{"size":10211,"mtime":1612072824737,"results":"406","hashOfConfig":"360"},{"size":10270,"mtime":1612072824733,"results":"407","hashOfConfig":"360"},{"size":15817,"mtime":1612121835385,"results":"408","hashOfConfig":"360"},{"size":121,"mtime":1612072824715,"results":"409","hashOfConfig":"360"},{"size":1020,"mtime":1612072824727,"results":"410","hashOfConfig":"360"},{"size":2784,"mtime":1612072824726,"results":"411","hashOfConfig":"360"},{"size":10329,"mtime":1612121835376,"results":"412","hashOfConfig":"360"},{"size":7072,"mtime":1612072824716,"results":"413","hashOfConfig":"360"},{"size":563,"mtime":1612072824716,"results":"414","hashOfConfig":"360"},{"size":1490,"mtime":1612072824712,"results":"415","hashOfConfig":"360"},{"size":1581,"mtime":1612072824729,"results":"416","hashOfConfig":"360"},{"size":458,"mtime":1612072824720,"results":"417","hashOfConfig":"360"},{"size":5878,"mtime":1612072824721,"results":"418","hashOfConfig":"360"},{"size":421,"mtime":1612072824715,"results":"419","hashOfConfig":"360"},{"size":1324,"mtime":1612072824712,"results":"420","hashOfConfig":"360"},{"size":1682,"mtime":1612072824731,"results":"421","hashOfConfig":"360"},{"size":1962,"mtime":1612072824734,"results":"422","hashOfConfig":"360"},{"size":349,"mtime":1612139519065,"results":"423","hashOfConfig":"424"},{"size":441,"mtime":1612139519082,"results":"425","hashOfConfig":"424"},{"size":1974,"mtime":1612139519084,"results":"426","hashOfConfig":"424"},{"size":257,"mtime":1612139519060,"results":"427","hashOfConfig":"424"},{"size":2076,"mtime":1612220105082,"results":"428","hashOfConfig":"424"},{"size":2460,"mtime":1612223463832,"results":"429","hashOfConfig":"424"},{"size":2188,"mtime":1612139519088,"results":"430","hashOfConfig":"424"},{"size":1055,"mtime":1612139519087,"results":"431","hashOfConfig":"424"},{"size":2341,"mtime":1612205454840,"results":"432","hashOfConfig":"424"},{"size":2058,"mtime":1612139519090,"results":"433","hashOfConfig":"424"},{"size":7073,"mtime":1612139519082,"results":"434","hashOfConfig":"424"},{"size":2888,"mtime":1612139519085,"results":"435","hashOfConfig":"424"},{"size":2864,"mtime":1612222962282,"results":"436","hashOfConfig":"424"},{"size":2065,"mtime":1612139519088,"results":"437","hashOfConfig":"424"},{"size":801,"mtime":1612139519087,"results":"438","hashOfConfig":"424"},{"size":1373,"mtime":1612203640964,"results":"439","hashOfConfig":"424"},{"size":1418,"mtime":1612139519091,"results":"440","hashOfConfig":"424"},{"size":87,"mtime":1612139519061,"results":"441","hashOfConfig":"424"},{"size":9518,"mtime":1612226511467,"results":"442","hashOfConfig":"424"},{"size":1634,"mtime":1612139519083,"results":"443","hashOfConfig":"424"},{"size":1860,"mtime":1612206258364,"results":"444","hashOfConfig":"424"},{"size":756,"mtime":1612139519065,"results":"445","hashOfConfig":"424"},{"size":12554,"mtime":1612224634906,"results":"446","hashOfConfig":"424"},{"size":9368,"mtime":1612226824589,"results":"447","hashOfConfig":"424"},{"size":8532,"mtime":1612223566766,"results":"448","hashOfConfig":"424"},{"size":759,"mtime":1612139519072,"results":"449","hashOfConfig":"424"},{"size":13563,"mtime":1612217194625,"results":"450","hashOfConfig":"424"},{"size":5190,"mtime":1612218885528,"results":"451","hashOfConfig":"424"},{"size":25409,"mtime":1612223983577,"results":"452","hashOfConfig":"424"},{"size":8671,"mtime":1612139519069,"results":"453","hashOfConfig":"424"},{"size":5685,"mtime":1612219468189,"results":"454","hashOfConfig":"424"},{"size":5053,"mtime":1612218601234,"results":"455","hashOfConfig":"424"},{"size":3900,"mtime":1612223290575,"results":"456","hashOfConfig":"424"},{"size":5532,"mtime":1612139519070,"results":"457","hashOfConfig":"424"},{"size":5017,"mtime":1612218900798,"results":"458","hashOfConfig":"424"},{"size":667,"mtime":1612139519075,"results":"459","hashOfConfig":"424"},{"size":8019,"mtime":1612204722881,"results":"460","hashOfConfig":"424"},{"size":8724,"mtime":1612220374560,"results":"461","hashOfConfig":"424"},{"size":12463,"mtime":1612205035666,"results":"462","hashOfConfig":"424"},{"size":10441,"mtime":1612219720528,"results":"463","hashOfConfig":"424"},{"size":13633,"mtime":1612216850963,"results":"464","hashOfConfig":"424"},{"size":18550,"mtime":1612220875372,"results":"465","hashOfConfig":"424"},{"size":19892,"mtime":1612223948699,"results":"466","hashOfConfig":"424"},{"size":11852,"mtime":1612217099488,"results":"467","hashOfConfig":"424"},{"size":11224,"mtime":1612224591917,"results":"468","hashOfConfig":"424"},{"size":9660,"mtime":1612139519088,"results":"469","hashOfConfig":"424"},{"size":10211,"mtime":1612139519090,"results":"470","hashOfConfig":"424"},{"size":10412,"mtime":1612205804972,"results":"471","hashOfConfig":"424"},{"size":121,"mtime":1612139519065,"results":"472","hashOfConfig":"424"},{"size":1020,"mtime":1612139519079,"results":"473","hashOfConfig":"424"},{"size":10350,"mtime":1612140797062,"results":"474","hashOfConfig":"424"},{"size":583,"mtime":1612162235481,"results":"475","hashOfConfig":"424"},{"size":6753,"mtime":1612200583715,"results":"476","hashOfConfig":"424"},{"size":1577,"mtime":1612226401576,"results":"477","hashOfConfig":"424"},{"size":1490,"mtime":1612139519061,"results":"478","hashOfConfig":"424"},{"size":2784,"mtime":1612139519077,"results":"479","hashOfConfig":"424"},{"size":263,"mtime":1612159908501,"results":"480","hashOfConfig":"424"},{"size":6619,"mtime":1612202169265,"results":"481","hashOfConfig":"424"},{"size":16037,"mtime":1612224389592,"results":"482","hashOfConfig":"424"},{"size":513,"mtime":1612227612481,"results":"483","hashOfConfig":"424"},{"size":1324,"mtime":1612139519061,"results":"484","hashOfConfig":"424"},{"size":1682,"mtime":1612139519083,"results":"485","hashOfConfig":"424"},{"size":1962,"mtime":1612139519087,"results":"486","hashOfConfig":"424"},{"size":349,"mtime":1612238340429,"results":"487","hashOfConfig":"488"},{"size":441,"mtime":1612238340447,"results":"489","hashOfConfig":"488"},{"size":1974,"mtime":1612238340450,"results":"490","hashOfConfig":"488"},{"size":257,"mtime":1612238340424,"results":"491","hashOfConfig":"488"},{"size":2188,"mtime":1612238340454,"results":"492","hashOfConfig":"488"},{"size":2460,"mtime":1612238340455,"results":"493","hashOfConfig":"488"},{"size":2341,"mtime":1612238340452,"results":"494","hashOfConfig":"488"},{"size":1055,"mtime":1612238340453,"results":"495","hashOfConfig":"488"},{"size":2076,"mtime":1612238340450,"results":"496","hashOfConfig":"488"},{"size":2058,"mtime":1612238340457,"results":"497","hashOfConfig":"488"},{"size":7073,"mtime":1612238340448,"results":"498","hashOfConfig":"488"},{"size":2065,"mtime":1612238340455,"results":"499","hashOfConfig":"488"},{"size":2864,"mtime":1612238340456,"results":"500","hashOfConfig":"488"},{"size":1373,"mtime":1612238340453,"results":"501","hashOfConfig":"488"},{"size":801,"mtime":1612238340454,"results":"502","hashOfConfig":"488"},{"size":2888,"mtime":1612238340452,"results":"503","hashOfConfig":"488"},{"size":1418,"mtime":1612238340458,"results":"504","hashOfConfig":"488"},{"size":87,"mtime":1612238340425,"results":"505","hashOfConfig":"488"},{"size":9518,"mtime":1612238340449,"results":"506","hashOfConfig":"488"},{"size":1860,"mtime":1612251908675,"results":"507","hashOfConfig":"488"},{"size":1586,"mtime":1612250119654,"results":"508","hashOfConfig":"488"},{"size":756,"mtime":1612238340429,"results":"509","hashOfConfig":"488"},{"size":12517,"mtime":1612251919971,"results":"510","hashOfConfig":"488"},{"size":8595,"mtime":1612251126349,"results":"511","hashOfConfig":"488"},{"size":25553,"mtime":1612251919971,"results":"512","hashOfConfig":"488"},{"size":13447,"mtime":1612250675917,"results":"513","hashOfConfig":"488"},{"size":18555,"mtime":1612250236077,"results":"514","hashOfConfig":"488"},{"size":19877,"mtime":1612251919971,"results":"515","hashOfConfig":"488"},{"size":759,"mtime":1612238340437,"results":"516","hashOfConfig":"488"},{"size":5190,"mtime":1612238340432,"results":"517","hashOfConfig":"488"},{"size":5018,"mtime":1612251919971,"results":"518","hashOfConfig":"488"},{"size":8675,"mtime":1612251704387,"results":"519","hashOfConfig":"488"},{"size":3899,"mtime":1612244903409,"results":"520","hashOfConfig":"488"},{"size":6025,"mtime":1612251783209,"results":"521","hashOfConfig":"488"},{"size":5531,"mtime":1612251801736,"results":"522","hashOfConfig":"488"},{"size":5021,"mtime":1612244957814,"results":"523","hashOfConfig":"488"},{"size":667,"mtime":1612238340439,"results":"524","hashOfConfig":"488"},{"size":8016,"mtime":1612251919971,"results":"525","hashOfConfig":"488"},{"size":12483,"mtime":1612250821756,"results":"526","hashOfConfig":"488"},{"size":8710,"mtime":1612251241510,"results":"527","hashOfConfig":"488"},{"size":10429,"mtime":1612246294347,"results":"528","hashOfConfig":"488"},{"size":11840,"mtime":1612246294295,"results":"529","hashOfConfig":"488"},{"size":9296,"mtime":1612251919971,"results":"530","hashOfConfig":"488"},{"size":13649,"mtime":1612250766718,"results":"531","hashOfConfig":"488"},{"size":11169,"mtime":1612245508937,"results":"532","hashOfConfig":"488"},{"size":9762,"mtime":1612250023799,"results":"533","hashOfConfig":"488"},{"size":10193,"mtime":1612246044253,"results":"534","hashOfConfig":"488"},{"size":10388,"mtime":1612245800516,"results":"535","hashOfConfig":"488"},{"size":121,"mtime":1612238340429,"results":"536","hashOfConfig":"488"},{"size":1020,"mtime":1612238340444,"results":"537","hashOfConfig":"488"},{"size":2784,"mtime":1612238340442,"results":"538","hashOfConfig":"488"},{"size":10317,"mtime":1612250103366,"results":"539","hashOfConfig":"488"},{"size":6719,"mtime":1612246294295,"results":"540","hashOfConfig":"488"},{"size":583,"mtime":1612238340430,"results":"541","hashOfConfig":"488"},{"size":1490,"mtime":1612238340425,"results":"542","hashOfConfig":"488"},{"size":1577,"mtime":1612238340446,"results":"543","hashOfConfig":"488"},{"size":263,"mtime":1612238340428,"results":"544","hashOfConfig":"488"},{"size":15984,"mtime":1612251916949,"results":"545","hashOfConfig":"488"},{"size":513,"mtime":1612238340435,"results":"546","hashOfConfig":"488"},{"size":1324,"mtime":1612238340425,"results":"547","hashOfConfig":"488"},{"size":1682,"mtime":1612238340449,"results":"548","hashOfConfig":"488"},{"size":1962,"mtime":1612238340453,"results":"549","hashOfConfig":"488"},{"size":349,"mtime":1612290580889,"results":"550","hashOfConfig":"551"},{"size":441,"mtime":1612290580908,"results":"552","hashOfConfig":"551"},{"size":1974,"mtime":1612290580911,"results":"553","hashOfConfig":"551"},{"size":258,"mtime":1612377662274,"results":"554","hashOfConfig":"551"},{"size":2912,"mtime":1612335797396,"results":"555","hashOfConfig":"551"},{"size":2623,"mtime":1612341220108,"results":"556","hashOfConfig":"551"},{"size":2076,"mtime":1612290580912,"results":"557","hashOfConfig":"551"},{"size":1055,"mtime":1612290580915,"results":"558","hashOfConfig":"551"},{"size":3167,"mtime":1612331398311,"results":"559","hashOfConfig":"551"},{"size":2744,"mtime":1612338194454,"results":"560","hashOfConfig":"551"},{"size":7073,"mtime":1612290580909,"results":"561","hashOfConfig":"551"},{"size":3016,"mtime":1612335914470,"results":"562","hashOfConfig":"551"},{"size":801,"mtime":1612290580916,"results":"563","hashOfConfig":"551"},{"size":2145,"mtime":1612341180886,"results":"564","hashOfConfig":"551"},{"size":2126,"mtime":1612331398311,"results":"565","hashOfConfig":"551"},{"size":2888,"mtime":1612290580912,"results":"566","hashOfConfig":"551"},{"size":1960,"mtime":1612339945152,"results":"567","hashOfConfig":"551"},{"size":87,"mtime":1612290580884,"results":"568","hashOfConfig":"551"},{"size":9518,"mtime":1612290580910,"results":"569","hashOfConfig":"551"},{"size":1860,"mtime":1612290580909,"results":"570","hashOfConfig":"551"},{"size":1586,"mtime":1612342469044,"results":"571","hashOfConfig":"551"},{"size":756,"mtime":1612290580889,"results":"572","hashOfConfig":"551"},{"size":9296,"mtime":1612290580904,"results":"573","hashOfConfig":"551"},{"size":12463,"mtime":1612428396362,"results":"574","hashOfConfig":"551"},{"size":8164,"mtime":1612376574377,"results":"575","hashOfConfig":"551"},{"size":19877,"mtime":1612290580901,"results":"576","hashOfConfig":"551"},{"size":759,"mtime":1612290580898,"results":"577","hashOfConfig":"551"},{"size":25553,"mtime":1612290580902,"results":"578","hashOfConfig":"551"},{"size":13318,"mtime":1612428340810,"results":"579","hashOfConfig":"551"},{"size":18555,"mtime":1612290580902,"results":"580","hashOfConfig":"551"},{"size":5190,"mtime":1612290580892,"results":"581","hashOfConfig":"551"},{"size":9165,"mtime":1612342436042,"results":"582","hashOfConfig":"551"},{"size":5018,"mtime":1612290580894,"results":"583","hashOfConfig":"551"},{"size":3899,"mtime":1612290580894,"results":"584","hashOfConfig":"551"},{"size":6025,"mtime":1612290580894,"results":"585","hashOfConfig":"551"},{"size":5531,"mtime":1612290580895,"results":"586","hashOfConfig":"551"},{"size":5469,"mtime":1612342711581,"results":"587","hashOfConfig":"551"},{"size":667,"mtime":1612290580900,"results":"588","hashOfConfig":"551"},{"size":11753,"mtime":1612428425977,"results":"589","hashOfConfig":"551"},{"size":13642,"mtime":1612428493563,"results":"590","hashOfConfig":"551"},{"size":8016,"mtime":1612290580896,"results":"591","hashOfConfig":"551"},{"size":8710,"mtime":1612290580897,"results":"592","hashOfConfig":"551"},{"size":10429,"mtime":1612290580906,"results":"593","hashOfConfig":"551"},{"size":11840,"mtime":1612290580907,"results":"594","hashOfConfig":"551"},{"size":11357,"mtime":1612337000235,"results":"595","hashOfConfig":"551"},{"size":9918,"mtime":1612341278735,"results":"596","hashOfConfig":"551"},{"size":10353,"mtime":1612338681899,"results":"597","hashOfConfig":"551"},{"size":11502,"mtime":1612378298376,"results":"598","hashOfConfig":"551"},{"size":121,"mtime":1612290580889,"results":"599","hashOfConfig":"551"},{"size":1020,"mtime":1612290580904,"results":"600","hashOfConfig":"551"},{"size":6719,"mtime":1612290580890,"results":"601","hashOfConfig":"551"},{"size":583,"mtime":1612290580890,"results":"602","hashOfConfig":"551"},{"size":10317,"mtime":1612290580891,"results":"603","hashOfConfig":"551"},{"size":15984,"mtime":1612290580911,"results":"604","hashOfConfig":"551"},{"size":1534,"mtime":1612375379651,"results":"605","hashOfConfig":"551"},{"size":1636,"mtime":1612377756678,"results":"606","hashOfConfig":"551"},{"size":263,"mtime":1612290580888,"results":"607","hashOfConfig":"551"},{"size":513,"mtime":1612290580895,"results":"608","hashOfConfig":"551"},{"size":2784,"mtime":1612290580903,"results":"609","hashOfConfig":"551"},{"size":1682,"mtime":1612290580910,"results":"610","hashOfConfig":"551"},{"size":1324,"mtime":1612377984170,"results":"611","hashOfConfig":"551"},{"size":1962,"mtime":1612290580915,"results":"612","hashOfConfig":"551"},{"size":263,"mtime":1612376887685,"results":"613","hashOfConfig":"551"},{"size":353,"mtime":1614329649913,"results":"614","hashOfConfig":"615"},{"size":441,"mtime":1610088609399,"results":"616","hashOfConfig":"615"},{"size":287,"mtime":1614329649880,"results":"617","hashOfConfig":"615"},{"size":2955,"mtime":1615025491554,"results":"618","hashOfConfig":"615"},{"size":2623,"mtime":1614329650176,"results":"619","hashOfConfig":"615"},{"size":2075,"mtime":1614329650140,"results":"620","hashOfConfig":"615"},{"size":1154,"mtime":1615025491568,"results":"621","hashOfConfig":"615"},{"size":2744,"mtime":1614329650199,"results":"622","hashOfConfig":"615"},{"size":3374,"mtime":1615025491575,"results":"623","hashOfConfig":"615"},{"size":14005,"mtime":1615025491551,"results":"624","hashOfConfig":"615"},{"size":3459,"mtime":1615025491559,"results":"625","hashOfConfig":"615"},{"size":3975,"mtime":1615025491573,"results":"626","hashOfConfig":"615"},{"size":3974,"mtime":1615056774730,"results":"627","hashOfConfig":"615"},{"size":4658,"mtime":1615025491578,"results":"628","hashOfConfig":"615"},{"size":2481,"mtime":1615025491571,"results":"629","hashOfConfig":"615"},{"size":2613,"mtime":1614329650178,"results":"630","hashOfConfig":"615"},{"size":3091,"mtime":1614329650142,"results":"631","hashOfConfig":"615"},{"size":823,"mtime":1615025491569,"results":"632","hashOfConfig":"615"},{"size":2275,"mtime":1614329650205,"results":"633","hashOfConfig":"615"},{"size":87,"mtime":1614329649888,"results":"634","hashOfConfig":"615"},{"size":2344,"mtime":1614329650149,"results":"635","hashOfConfig":"615"},{"size":3366,"mtime":1615025491576,"results":"636","hashOfConfig":"615"},{"size":2338,"mtime":1615025491574,"results":"637","hashOfConfig":"615"},{"size":7754,"mtime":1615025491571,"results":"638","hashOfConfig":"615"},{"size":3119,"mtime":1615056117873,"results":"639","hashOfConfig":"615"},{"size":2351,"mtime":1615025491579,"results":"640","hashOfConfig":"615"},{"size":1775,"mtime":1614329650129,"results":"641","hashOfConfig":"615"},{"size":19054,"mtime":1615025491554,"results":"642","hashOfConfig":"615"},{"size":768,"mtime":1614332962123,"results":"643","hashOfConfig":"615"},{"size":2558,"mtime":1615025491552,"results":"644","hashOfConfig":"615"},{"size":5513,"mtime":1614329649933,"results":"645","hashOfConfig":"615"},{"size":31365,"mtime":1614329650026,"results":"646","hashOfConfig":"615"},{"size":7952,"mtime":1614329649943,"results":"647","hashOfConfig":"615"},{"size":7598,"mtime":1614329649955,"results":"648","hashOfConfig":"615"},{"size":7725,"mtime":1614329649931,"results":"649","hashOfConfig":"615"},{"size":667,"mtime":1610433188897,"results":"650","hashOfConfig":"615"},{"size":251,"mtime":1615025491523,"results":"651","hashOfConfig":"615"},{"size":3075,"mtime":1614329650114,"results":"652","hashOfConfig":"615"},{"size":4891,"mtime":1614329650115,"results":"653","hashOfConfig":"615"},{"size":2712,"mtime":1614329650098,"results":"654","hashOfConfig":"615"},{"size":4741,"mtime":1614329650109,"results":"655","hashOfConfig":"615"},{"size":11033,"mtime":1615025491539,"results":"656","hashOfConfig":"615"},{"size":14435,"mtime":1615025491541,"results":"657","hashOfConfig":"615"},{"size":9902,"mtime":1615025491538,"results":"658","hashOfConfig":"615"},{"size":14831,"mtime":1615025491532,"results":"659","hashOfConfig":"615"},{"size":42296,"mtime":1615025491532,"results":"660","hashOfConfig":"615"},{"size":759,"mtime":1615025491518,"results":"661","hashOfConfig":"615"},{"size":36070,"mtime":1615025491530,"results":"662","hashOfConfig":"615"},{"size":8858,"mtime":1615025491510,"results":"663","hashOfConfig":"615"},{"size":6510,"mtime":1615025491512,"results":"664","hashOfConfig":"615"},{"size":5269,"mtime":1615025491513,"results":"665","hashOfConfig":"615"},{"size":8338,"mtime":1615025491514,"results":"666","hashOfConfig":"615"},{"size":13419,"mtime":1615025491518,"results":"667","hashOfConfig":"615"},{"size":15196,"mtime":1615025491550,"results":"668","hashOfConfig":"615"},{"size":9061,"mtime":1615025491515,"results":"669","hashOfConfig":"615"},{"size":17727,"mtime":1615025491533,"results":"670","hashOfConfig":"615"},{"size":9089,"mtime":1615025491516,"results":"671","hashOfConfig":"615"},{"size":8016,"mtime":1615025491538,"results":"672","hashOfConfig":"615"},{"size":18138,"mtime":1615025491536,"results":"673","hashOfConfig":"615"},{"size":6040,"mtime":1615025491534,"results":"674","hashOfConfig":"615"},{"size":12804,"mtime":1615025491543,"results":"675","hashOfConfig":"615"},{"size":8332,"mtime":1615025491542,"results":"676","hashOfConfig":"615"},{"size":18059,"mtime":1615025491548,"results":"677","hashOfConfig":"615"},{"size":21110,"mtime":1615025491548,"results":"678","hashOfConfig":"615"},{"size":9504,"mtime":1615025491544,"results":"679","hashOfConfig":"615"},{"size":29654,"mtime":1615176884205,"results":"680","hashOfConfig":"615"},{"size":13440,"mtime":1615025491545,"results":"681","hashOfConfig":"615"},{"size":6926,"mtime":1615025491528,"results":"682","hashOfConfig":"615"},{"size":29907,"mtime":1615025491527,"results":"683","hashOfConfig":"615"},{"size":12038,"mtime":1615025491527,"results":"684","hashOfConfig":"615"},{"size":18293,"mtime":1615025491526,"results":"685","hashOfConfig":"615"},{"size":27190,"mtime":1615025491524,"results":"686","hashOfConfig":"615"},{"size":9695,"mtime":1614329650174,"results":"687","hashOfConfig":"615"},{"size":10385,"mtime":1614329650198,"results":"688","hashOfConfig":"615"},{"size":20766,"mtime":1615025491556,"results":"689","hashOfConfig":"615"},{"size":20851,"mtime":1615025491578,"results":"690","hashOfConfig":"615"},{"size":12788,"mtime":1615025491575,"results":"691","hashOfConfig":"615"},{"size":588,"mtime":1614329649915,"results":"692","hashOfConfig":"615"},{"size":2752,"mtime":1615056574920,"results":"693","hashOfConfig":"615"},{"size":10624,"mtime":1615056907715,"results":"694","hashOfConfig":"615"},{"size":10739,"mtime":1614329650116,"results":"695","hashOfConfig":"615"},{"size":686,"mtime":1614329649947,"results":"696","hashOfConfig":"615"},{"size":12848,"mtime":1615025491557,"results":"697","hashOfConfig":"615"},{"size":7576,"mtime":1615025491571,"results":"698","hashOfConfig":"615"},{"size":1653,"mtime":1614329649891,"results":"699","hashOfConfig":"615"},{"size":238,"mtime":1614329649910,"results":"700","hashOfConfig":"615"},{"size":6511,"mtime":1615025491509,"results":"701","hashOfConfig":"615"},{"size":10415,"mtime":1615025491510,"results":"702","hashOfConfig":"615"},{"size":8661,"mtime":1615025491544,"results":"703","hashOfConfig":"615"},{"size":264,"mtime":1614329649897,"results":"704","hashOfConfig":"615"},{"size":462,"mtime":1615025491523,"results":"705","hashOfConfig":"615"},{"size":3884,"mtime":1615025491507,"results":"706","hashOfConfig":"615"},{"size":694,"mtime":1615025491507,"results":"707","hashOfConfig":"615"},{"size":1907,"mtime":1615025491527,"results":"708","hashOfConfig":"615"},{"size":13314,"mtime":1615025491573,"results":"709","hashOfConfig":"615"},{"size":1886,"mtime":1615025491504,"results":"710","hashOfConfig":"615"},{"size":533,"mtime":1615025491520,"results":"711","hashOfConfig":"615"},{"size":12045,"mtime":1615025491536,"results":"712","hashOfConfig":"615"},{"size":3865,"mtime":1615025491567,"results":"713","hashOfConfig":"615"},{"size":1667,"mtime":1614329650116,"results":"714","hashOfConfig":"615"},{"size":2436,"mtime":1615025491546,"results":"715","hashOfConfig":"615"},{"size":298,"mtime":1614329649963,"results":"716","hashOfConfig":"615"},{"size":1773,"mtime":1614329650031,"results":"717","hashOfConfig":"615"},{"size":2804,"mtime":1614329650026,"results":"718","hashOfConfig":"615"},{"size":708,"mtime":1614329649960,"results":"719","hashOfConfig":"615"},{"size":4072,"mtime":1615025491536,"results":"720","hashOfConfig":"615"},{"size":1036,"mtime":1615025491540,"results":"721","hashOfConfig":"615"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rzmodz",{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"774"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"774"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"774"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"774"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"774"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},"ielf90",{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"896","messages":"897","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"898","messages":"899","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"906","messages":"907","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"924","usedDeprecatedRules":"851"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"927","messages":"928","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"851"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"934","messages":"935","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"936","messages":"937","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"851"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"961","messages":"962","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"971","messages":"972","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"973","messages":"974","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"975","messages":"976","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"851"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"851"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5um6zo",{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1026"},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1029","messages":"1030","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1035","messages":"1036","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037","usedDeprecatedRules":"1038"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1038"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"1038"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1038"},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1038"},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070","usedDeprecatedRules":"1038"},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1038"},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1089","messages":"1090","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1091","usedDeprecatedRules":"1038"},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},"hrhtbb",{"filePath":"1113","messages":"1114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1115","messages":"1116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1123","messages":"1124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1137","messages":"1138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1139","messages":"1140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1143","messages":"1144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1145","messages":"1146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1149","messages":"1150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1151","messages":"1152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1155","messages":"1156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070","usedDeprecatedRules":"1112"},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1159","messages":"1160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1161","usedDeprecatedRules":"1112"},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037","usedDeprecatedRules":"1112"},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168","usedDeprecatedRules":"1112"},{"filePath":"1169","messages":"1170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1171","messages":"1172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1173","messages":"1174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1175","messages":"1176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1177","messages":"1178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1191","messages":"1192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1193","messages":"1194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"1112"},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1197","usedDeprecatedRules":"1112"},{"filePath":"1198","messages":"1199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1200","messages":"1201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1206","messages":"1207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1208","messages":"1209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1210","messages":"1211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1212","messages":"1213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1214","messages":"1215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1216","usedDeprecatedRules":"1112"},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1221","messages":"1222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1223","messages":"1224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1225","messages":"1226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1227","messages":"1228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1229","messages":"1230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1233","messages":"1234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1237","messages":"1238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"1112"},{"filePath":"1239","messages":"1240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1112"},{"filePath":"1241","messages":"1242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},"zbwcij",{"filePath":"1244","messages":"1245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1246","messages":"1247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1248","messages":"1249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1250","usedDeprecatedRules":"1243"},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1263","messages":"1264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1265","messages":"1266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1269","usedDeprecatedRules":"1243"},{"filePath":"1270","messages":"1271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1274","messages":"1275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1280","messages":"1281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1282","messages":"1283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1284","messages":"1285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1286","messages":"1287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1290","messages":"1291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1292","messages":"1293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1294","messages":"1295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1296","messages":"1297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1298","messages":"1299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1302","messages":"1303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1304","messages":"1305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1306","messages":"1307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1308","messages":"1309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1310","messages":"1311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1312","messages":"1313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1314","messages":"1315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1316","messages":"1317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1328","messages":"1329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1330","messages":"1331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1332","messages":"1333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1334","messages":"1335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1336","messages":"1337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1338","messages":"1339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1340","messages":"1341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1342","messages":"1343","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1344","usedDeprecatedRules":"1243"},{"filePath":"1345","messages":"1346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1347","messages":"1348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1349","messages":"1350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1351","messages":"1352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1355","messages":"1356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1357","usedDeprecatedRules":"1243"},{"filePath":"1358","messages":"1359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1360","messages":"1361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1362","messages":"1363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1364","messages":"1365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1366","usedDeprecatedRules":"1243"},{"filePath":"1367","messages":"1368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1369","usedDeprecatedRules":"1243"},{"filePath":"1370","messages":"1371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1372","messages":"1373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1374","messages":"1375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1376","messages":"1377","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1378","usedDeprecatedRules":"1243"},{"filePath":"1379","messages":"1380","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1381","messages":"1382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1383","usedDeprecatedRules":"1243"},{"filePath":"1384","messages":"1385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1386","messages":"1387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1388","usedDeprecatedRules":"1243"},{"filePath":"1389","messages":"1390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1391","messages":"1392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1393","usedDeprecatedRules":"1243"},{"filePath":"1394","messages":"1395","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1396","usedDeprecatedRules":"1243"},{"filePath":"1397","messages":"1398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1399","messages":"1400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1401","messages":"1402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1403","messages":"1404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1405","messages":"1406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1407","messages":"1408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1409","messages":"1410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1411","messages":"1412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1413","usedDeprecatedRules":"1243"},{"filePath":"1414","messages":"1415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1416","messages":"1417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1418","messages":"1419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1420","messages":"1421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1422","usedDeprecatedRules":"1243"},{"filePath":"1423","messages":"1424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1425","messages":"1426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1429","messages":"1430","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1431","usedDeprecatedRules":"1243"},{"filePath":"1432","messages":"1433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1434","messages":"1435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1436","messages":"1437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1438","messages":"1439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1440","messages":"1441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1442","messages":"1443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1444","messages":"1445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1446","messages":"1447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1448","messages":"1449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1450","messages":"1451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1452","messages":"1453","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1454","usedDeprecatedRules":"1243"},{"filePath":"1455","messages":"1456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1457","messages":"1458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1459","messages":"1460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1461","messages":"1462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1463","messages":"1464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1465","messages":"1466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1467","messages":"1468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},{"filePath":"1469","messages":"1470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1243"},"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx",["1471","1472","1473","1474","1475","1476"],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx",[],["1477","1478"],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassesForm.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts",[],"D:\\daps project\\defect_category_issues_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts",["1479","1480","1481"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx",[],["1482","1483"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\History.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx",["1484","1485","1486","1487","1488","1489","1490","1491"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx",["1492"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx",["1493"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx",["1494","1495"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx",["1496"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx",["1497","1498","1499"],"import  React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../store/Index';\r\nimport { addClassesPost } from '../../store/classes/Actions';\r\nimport { ClassesType, GradeFieldsType } from '../../store/classes/Type';\r\nimport  { ClassesForm }  from './ClassesForm';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { fetchGradePost } from '../../store/classes/Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { Field, FieldProps, Formik, FormikProps } from 'formik';\r\nimport { object } from 'yup';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { STANDARD } from '../../services/Constants';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\n\r\nconst initialValues: ClassesType = {\r\n    grade : '',\r\n    standard : ''\r\n};\r\n\r\n    export type OwnClassesFormProps = {\r\n        addClassesPost: (classes: ClassesType) => void;\r\n        loading: boolean;\r\n        fetchGradePost:() => any;\r\n        categoryDetails:GradeFieldsType[];\r\n        errorMessage: any;\r\n    };\r\nclass AddNewClasses extends React.Component<OwnClassesFormProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n    }\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n        let errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));\r\n        let getErrorData:any;\r\n            if(errorMessageList.data){\r\n                getErrorData = errorMessageList.data\r\n            }\r\n        const getGradeList = JSON.parse(JSON.stringify(this.props.categoryDetails));\r\n        console.log(getGradeList, 'inner getGrade...')\r\n        let gradePoint:any;\r\n        if(getGradeList) {\r\n            gradePoint  = getGradeList.data;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb titleName={['Class']} homeName={['Home']} url={['dashboard']} baseName={['Class']} baseURL={['viewclasses']} mainPageTitle={['Add Class']}/>\r\n                            {gradePoint ?  \r\n                            <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card-box\">\r\n                            <div className=\"card-head\">\r\n                            <header>Add Class</header>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <Formik\r\n                                initialValues={initialValues}\r\n                                onSubmit={(values: ClassesType, actions) =>{\r\n                                    this.props.addClassesPost(values)\r\n                                    actions.setSubmitting(false);\r\n                                    { getErrorData ?                           \r\n                                        actions.setErrors({\r\n                                            standard: getErrorData.standard,\r\n                                            grade: getErrorData.grade\r\n                                        })\r\n                                        : \r\n                                        <SpinnerLoader/> }\r\n                                }}\r\n                                validationSchema={object().shape({\r\n                                })}\r\n                                render={({\r\n                                    values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit\r\n                                }: FormikProps<ClassesType>) => (\r\n                                    <form onSubmit={handleSubmit} className=\"ui form\">\r\n                                        <div className=\"row\">\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                <FormGroup>\r\n                                                <Field \r\n                                                label='Grade*'\r\n                                                name=\"grade\"  \r\n                                                select\r\n                                                component={TextField}        \r\n                                                disabled={false}  \r\n                                                >\r\n                                                    { gradePoint.map((item:GradeFieldsType) =>(\r\n                                                                <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </Field> \r\n                                                </FormGroup>\r\n                                            </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                <FormGroup>\r\n                                                <Field \r\n                                                label='Standard*'\r\n                                                name=\"standard\"  \r\n                                                select\r\n                                                component={TextField}        \r\n                                                disabled={false}  \r\n                                                >\r\n                                                    {\r\n                                                        STANDARD.map( item => (\r\n                                                            <MenuItem value={item.value}>{item.label}</MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                    \r\n                                                </Field>                         \r\n                                                </FormGroup>\r\n                                                </div>\r\n                                                </div>\r\n                                                </div>\r\n                                            <div className=\"text-right mb-3 mr-2 mt-4\"> \r\n                                                <Button className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                                <Link to=\"/viewclasses\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                                            </div>\r\n                                      \r\n                                    </form>\r\n                                )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                     : <div><SpinnerLoader/></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = ({classes}: RootState) => {\r\n    console.log(classes, 'classes...')\r\n    return {\r\n    categoryDetails: classes.gradelist,\r\n      loading:classes.loading,\r\n      errorMessage: classes.errors\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps,{ addClassesPost, fetchGradePost }\r\n)(AddNewClasses);","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx",["1500"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx",["1501","1502"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../store/Index'\r\nimport { ClassesType, ClassesTypes } from '../../store/classes/Type';\r\nimport {deletePost, fetchClassesPost } from '../../store/classes/Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport history from '../../History';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { loadMoreType } from '../../components/type';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\n\r\nexport interface PostsListProps {\r\n    loading: boolean\r\n    classesDetails: ClassesTypes;\r\n    classesDelete:ClassesType;\r\n    deleteDetails:ClassesType[];\r\n    deletePost: (classesDelete: any) => void;\r\n    fetchClassesPost: (loadMoreType:loadMoreType) => any;\r\n   \r\n  }\r\n  interface ISearchBarState {\r\n    show:boolean,\r\n    showDelete:boolean,\r\n    addShow: boolean,\r\n    acadamicAdmin: boolean,\r\n    schoolAdmin: boolean,\r\n    bothData:boolean,\r\n    teacher: boolean,\r\n    parent: boolean,\r\n    deleteClassesId:any,\r\n    query:string,\r\n    hasMore:boolean,\r\n    classData:any,\r\n    prev:number,\r\n    next:number,\r\n    acsOrder:boolean,\r\n    descOrder:boolean,\r\n    subjectsTotal:number,\r\n    page:number,\r\n    search:string\r\n  }\r\nclass ViewClassesDetails extends React.Component<PostsListProps,ISearchBarState> {\r\n  constructor(props: any) {\r\n    super(props);  \r\n    this.state = {\r\n      show: false,\r\n      showDelete: false,\r\n      addShow: false,\r\n      acadamicAdmin: false,\r\n      schoolAdmin: false,\r\n      bothData:false,\r\n      teacher: false,\r\n      parent: false,\r\n      deleteClassesId: [],\r\n      query: '',\r\n      classData: [],\r\n      subjectsTotal:1,\r\n      hasMore:true,\r\n      prev: 0,\r\n      next: 10,\r\n      acsOrder:true,\r\n      descOrder:false,\r\n      page:1,\r\n      search:''\r\n    };\r\n    const postValue = {\r\n      page_no: 1\r\n    } \r\n      this.props.fetchClassesPost(postValue); \r\n  }\r\n  componentDidMount(): void {   \r\n    this.checkUserType();\r\n  }\r\n    checkUserType(){\r\n        let getToken = localStorage.getItem('usertype');\r\n            if(getToken === UserRoles.acadamicAdmin) {\r\n                this.setState({ acadamicAdmin: true })\r\n            } else if(getToken === UserRoles.schoolAdmin) {\r\n                this.setState({ schoolAdmin: true })\r\n            } else if(getToken === UserRoles.teacher) {\r\n                this.setState({ teacher: true })\r\n            } else if(getToken === UserRoles.parent) {\r\n                this.setState({ parent: true })\r\n            }    \r\n          }\r\n\r\n      componentDidUpdate() {\r\n        this.checkStatusProcess();\r\n      }\r\n      checkStatusProcess(){\r\n        const selectDataList = this.props.deleteDetails;\r\n        const getDeleteDetails = JSON.stringify(selectDataList);\r\n        const getDeleteList = JSON.parse(getDeleteDetails);\r\n        if(getDeleteList === true){   \r\n          const postValue = {\r\n            page_no: 1\r\n          }    \r\n          this.props.fetchClassesPost(postValue);\r\n        }\r\n       }\r\n\r\n      public handleDelete = () => {\r\n          this.props.deletePost(this.state.deleteClassesId);\r\n        this.setState({ showDelete: false });\r\n      }\r\n      public hideSchoolDelete = () => {\r\n        this.setState({ showDelete: false });  \r\n      }\r\n      public showSchoolDelete = (getData:any) => {\r\n        this.setState({ showDelete: true,  deleteClassesId: getData});\r\n      }\r\n      \r\n      public showFilterData = (getdata : any) => {\r\n        if(getdata.sort_by === 'desc') {\r\n          this.setState({ acsOrder: false })\r\n          const postValue = {\r\n            page_no: 1,\r\n            sort_by: getdata.sort_by,\r\n            order_by: getdata.order_by\r\n          }      \r\n          this.props.fetchClassesPost(postValue);\r\n        } else {\r\n          this.setState({ acsOrder: true })\r\n          const postValue = {\r\n            page_no: 1,\r\n            sort_by: getdata.sort_by,\r\n            order_by: getdata.order_by\r\n          }      \r\n          this.props.fetchClassesPost(postValue);\r\n        }\r\n      }\r\n\r\n  private renderSchoolManageDelete() {\r\n    const actionOption = this.state.deleteClassesId;\r\n    let titleMessage:any;\r\n    let titleMsg = 'Please Confirm'\r\n    if(actionOption.isActive === true) {\r\n      titleMessage = 'Active';\r\n    } else {\r\n      titleMessage = 'Inactive';\r\n    }\r\n    return (\r\n      <div>\r\n        <Modal show={this.state.showDelete}>\r\n          <Modal.Header className=\"pb-0 pt-0\">\r\n            <Modal.Title>{titleMsg}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          <p>Are you sure want to {titleMessage} ?</p>\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer className=\"modelboxbutton\">\r\n            <button className=\"btn btn-danger mr-1 ml-1 w-15\" onClick={this.handleDelete}>Okay</button>\r\n            <button className=\"btn btn-default mr-1 ml-1 w-15\" onClick={this.hideSchoolDelete}>Cancel</button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\npublic fetchMoreClassData = () => {\r\n  if(this.state.hasMore === true){\r\n    const postValue = {\r\n    page_no:this.state.page + 1, \r\n    search: this.state.search\r\n    }\r\n    this.setState({\r\n      page: this.state.page + 1\r\n          })\r\n    this.props.fetchClassesPost(postValue); \r\n    const getClassResponse = JSON.parse(JSON.stringify(this.props.classesDetails));\r\n    const getClassData = getClassResponse.data;\r\n    const ClassDataList = getClassData.total;\r\n    const getRecordValue = getClassData.records;\r\n    const getDataLength = getRecordValue.length;\r\n    const allClass = ClassDataList ? getClassData : null;\r\n    if (this.state.classData.length === allClass.total) {\r\n      this.setState({\r\n        hasMore: false,\r\n    })\r\n    }\r\n        this.setState({ classData: [...this.state.classData, ...getClassData.records] })\r\n        this.setState({next:this.state.next + getDataLength})\r\n  }\r\n}\r\n  private renderClassesManageView(getClassResponseData:any) {\r\n    const { loading } = this.props;\r\n    let classList:any;\r\n    if(getClassResponseData){\r\n      if(getClassResponseData.records){\r\n        classList = getClassResponseData.records\r\n      } else {\r\n        classList = this.state.classData\r\n      }\r\n    }\r\n      return (\r\n        <div>\r\n             {/* <InfiniteScroll\r\n                dataLength={this.state.classData.length}\r\n                next={this.fetchMoreClassData}\r\n                hasMore={this.state.hasMore}\r\n                loader={<h4 style={loadingTextCSS}>Loading...</h4>}\r\n              > */}\r\n              <table className=\"table table-striped custom-table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                 <th>{this.state.acsOrder ? <button onClick={() => this.showFilterData({sort_by:'desc', order_by:'grade'})} title=\"Asc order\">Grade <i className=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i></button> :  <button onClick={() => this.showFilterData({sort_by:'asc', order_by:'grade'})} title=\"Desc order\">Grade <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i></button> }              \r\n                  </th>\r\n                  <th>{this.state.acsOrder ? <button onClick={() => this.showFilterData({sort_by:'desc', order_by:'standard'})} title=\"Asc order\">Standard <i className=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i></button> :  <button onClick={() => this.showFilterData({sort_by:'asc', order_by:'standard'})} title=\"Desc order\">Standard <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i></button> } </th>\r\n                  <th>Action</th>\r\n                 </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {classList ? \r\n                    classList.map((data: ClassesType, index: number) => (                    \r\n                      <tr key={index}>\r\n                          <td >{data['grade'] || '-'}</td>\r\n                          <td >{data['standard'] || '-'}</td>            \r\n                        <td>\r\n                        <Link to={'/editclasses/' + data.id}>\r\n                        <button className=\"btn btn-primary btn-xs\" title=\"Edit Class\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" ></i></button>\r\n                        </Link>\r\n                        {data.is_active ? <button className=\"btn btn-success btn-xs\" title=\"Active Class\"  onClick={() => this.showSchoolDelete({id : String(data['id']), isActive: false })}><i className=\"fa fa-eye\" aria-hidden=\"true\"></i></button> : <button className=\"btn btn-danger btn-xs\" onClick={() => this.showSchoolDelete({id : String(data['id']), isActive: true })} title=\"Inactive Class\"><i className=\"fa fa-ban\" aria-hidden=\"true\"></i></button>}\r\n                        </td>\r\n                      </tr>\r\n                    ))  \r\n                  : null}\r\n                  </tbody>\r\n                  </table>\r\n              {/* </InfiniteScroll> */}\r\n        </div>                 \r\n      )\r\n  }\r\n  handleInputChange = (e:any) => {\r\n    const { value } = e.target;\r\n    const getSearchValue = value;\r\n    if(getSearchValue) {\r\n      const postSearchValue = {\r\n        page_no: 1,\r\n        search: getSearchValue\r\n      }      \r\n      this.props.fetchClassesPost(postSearchValue);\r\n    } else {\r\n      const postSearchValue = {\r\n        page_no: 1,\r\n        search: ''\r\n      }      \r\n      this.props.fetchClassesPost(postSearchValue);\r\n    }\r\n  }\r\n    render() {\r\n      const { loading } = this.props;\r\n      const loadingTextCSS = { display: loading ? \"block\" : \"none\" };\r\n        const getToken = localStorage.getItem('token');\r\n            if(!getToken){\r\n                history.push(\"/\");\r\n            } \r\n            let geClassResponseData:any\r\n            if(this.state.page === 1 ) {\r\n              const ClassResponse = JSON.parse(JSON.stringify(this.props.classesDetails));\r\n              geClassResponseData = ClassResponse.data;\r\n            } else {\r\n              geClassResponseData = this.state.classData;\r\n            }\r\n        return (\r\n            <div>\r\n                {this.renderSchoolManageDelete()}\r\n                   <div className=\"page-wrapper\">\r\n          <div className=\"page-content-wrapper\">\r\n            <div className=\"page-content pt-3\">\r\n              <BreadCrumb titleName={['Class']} homeName={['Home']} url={['dashboard']} mainPageTitle={['View Class']}/>\r\n        <div>\r\n      <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  <div className=\"card card-topline-red\">\r\n                    <div className=\"card-head\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n                      <header>\r\n                        <Link to={'/addnewclasses'}>\r\n                        <button className=\"btn btn-pink\">Add New</button>\r\n                        </Link>\r\n                        \r\n                      </header>\r\n                      <div className=\"tools\">\r\n                      <form className=\"mt-2\">\r\n                      <input\r\n                        placeholder=\"Search\"\r\n                        name=\"search\"\r\n                        className=\"form-control\"\r\n                        onChange={this.handleInputChange}\r\n                      />\r\n                    </form>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body no-padding height-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"table-responsive\">\r\n                            {this.renderClassesManageView(geClassResponseData)}           \r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>  \r\n      </div>\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = ({classes}: RootState) => {\r\n  const getDeleteMsg = JSON.stringify(classes);\r\n  const getDeleteStatus = JSON.parse(getDeleteMsg);  \r\n    return {\r\n        classesDetails: classes.items,\r\n        loading:classes.loading,\r\n        deleteDetails:getDeleteStatus.isAuthenticated\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps, { fetchClassesPost, deletePost }\r\n)(ViewClassesDetails);","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx",["1503","1504"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx",["1505","1506"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx",["1507","1508"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport { connect } from 'react-redux';\r\nimport { ProfileActionTypes } from '../../store/profile/Types'\r\nimport { fetchProfilePost } from '../../store/profile/Actions'\r\nimport { RootState } from '../../store/Index'\r\nimport { LogoutPost } from '../../store/authentication/Actions'\r\n\r\nexport interface ProfileDetails {\r\n\tgetProfileDetails?:ProfileActionTypes[];\r\n\tfetchProfilePost: () => any;\r\n\tLogoutPost: () => void;\r\n}\r\n\r\nclass Sidenav extends React.Component<ProfileDetails> {\r\n\tpublic state = {\r\n\t\tacadamicAdmin: false,\r\n\t\tschoolAdmin: false,\r\n\t\tbothData:false,\r\n\t\tteacher: false,\r\n\t\tparent: false,\r\n\t\tshowLogout: false\r\n\t\t  };\r\n\t\t\r\n\t\t  public closeLogout = () => {\r\n\t\t\tthis.setState({ showLogout: false });  \r\n\t\t  }\r\n\t\r\n\t\t  public ShowLogoutBox = () => {\r\n\t\t\tthis.setState({ showLogout: true });  \r\n\t\t  }\r\n\t\r\n\t\t  componentDidMount(): void {\r\n\t\t\tthis.props.fetchProfilePost() \r\n\t\t\tthis.checkUserType();\r\n\t\t  }\r\n\t\t  checkUserType(){\r\n\t\t\tlet getToken = localStorage.getItem('usertype');\r\n\t\t\tif(getToken === UserRoles.acadamicAdmin) {\r\n\t\t\t\tthis.setState({ acadamicAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.schoolAdmin) {\r\n\t\t\t\tthis.setState({ schoolAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.teacher) {\r\n\t\t\t\tthis.setState({ teacher: true })\r\n\t\t\t} else if(getToken === UserRoles.parent) {\r\n\t\t\t\tthis.setState({ parent: true })\r\n\t\t\t}\r\n\t\t  }\r\n    render() {\r\n\t\tconst getProfile = JSON.stringify(this.props.getProfileDetails);\r\n\t\tconst profileList = JSON.parse(getProfile);\r\n\t\tconst getData = profileList.data;\r\n\t\tlet userFirstName;\r\n\t\tlet userLastName\r\n\t\tif(getData){\r\n\t\t\tuserFirstName = getData.firstname;\r\n\t\t\tuserLastName = getData.lastname;\r\n\t\t}\r\n        return (\r\n            <div>\r\n        {/* start page container */}\r\n\t\t<div className=\"page-container\">\r\n\t\t\t{/* start sidebar menu */}\r\n\t\t\t<div className=\"sidebar-container\">\r\n\t\t\t\t<div className=\"sidemenu-container navbar-collapse collapse fixed-menu\">\r\n\t\t\t\t\t<div id=\"remove-scroll\">\r\n\t\t\t\t\t\t<ul className=\"sidemenu page-header-fixed p-t-20\" data-keep-expanded=\"false\" data-auto-scroll=\"true\"\r\n\t\t\t\t\t\t\tdata-slide-speed=\"200\">\r\n\t\t\t\t\t\t\t<li className=\"sidebar-toggler-wrapper hide\">\r\n\t\t\t\t\t\t\t\t<div className=\"sidebar-toggler\">\r\n\t\t\t\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li className=\"nav-item start active\">\r\n\t\t\t\t\t\t\t<Link to={'/dashboard'}  className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">dashboard</i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Dashboard</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t<span className=\"title\">classNamees</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Instant Feedback</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Attendance</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Notice Board</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-book\" aria-hidden=\"true\"></i> \r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Diary</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Quizzes</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Question Set</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Manage</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"arrow\"></span>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t<ul className=\"sub-menu\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/viewclasses'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span className=\"title\">Class</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teachers</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"selected\"></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Students</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teacher Details</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/viewschooldetails'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">School</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t <li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n                                                        <Link to=\"/ViewSubjectDetails\" className=\"nav-link \">\r\n                                                            <span className=\"title\">Subject</span>\r\n                                                        </Link>\r\n                                                    </li>\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.acadamicAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/usermanage'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">User Manage</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\t\t\t\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t{/* end sidebar menu */}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({schools, login, profile}: RootState) => {\r\n\treturn {\r\n\t\tgetProfileDetails: profile.items\r\n\t};\r\n  };\r\nexport default connect(\r\n\tmapStateToProps, { fetchProfilePost, LogoutPost }\r\n  )(Sidenav);","D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx",["1509","1510"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassesForm.tsx",["1511"],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts",[],"D:\\daps project\\smoke-test-issues-FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts",["1512","1513","1514"],"import { ThunkAction } from 'redux-thunk';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState, RootActions } from '../Index';\r\nimport { AxiosResponse } from 'axios';\r\nimport { baseAPIAuth } from '../../Service';\r\nimport { AUTHAPI } from '../../services/Config'\r\nimport { ProfileActionTypes, ProfilelDetailsType } from './Types'\r\nimport toaster from \"toasted-notes\";\r\nimport { notificationMsg } from '../../services/Constants'\r\nimport history from '../../History';\r\n\r\n//Implement Thunk middle ware\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, undefined, RootActions>;\r\n\r\ninterface FetchProfile {\r\n    type: ProfileActionTypes.FETCH_PROFILE;\r\n}\r\n\r\ninterface FetchProfileSuccess {\r\n    type: ProfileActionTypes.FETCH_PROFILE_SUCCESS;\r\n    payload: ProfilelDetailsType;\r\n}\r\n\r\ninterface FetchProfileFail {\r\n    type: ProfileActionTypes.FETCH_PROFILE_FAIL;\r\n}\r\n\r\nexport const fetchProfilePost = (): ThunkResult<void> => async dispatch => {\r\n    handleFetchProfile(dispatch);\r\n    try {\r\n        const response: AxiosResponse<ProfilelDetailsType> = await baseAPIAuth.get(AUTHAPI.PROFILE, { headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n        handleFetchProfileSuccess(dispatch, response.data);\r\n    } catch (e) {\r\n        handleFetchProfileFail(dispatch);\r\n    }\r\n};\r\n\r\n\r\nexport const handleFetchProfile = (dispatch: Dispatch<FetchProfile>) => {\r\n    dispatch({ type: ProfileActionTypes.FETCH_PROFILE });\r\n};\r\n\r\nexport const handleFetchProfileSuccess = (\r\n    dispatch: Dispatch<FetchProfileSuccess>,\r\n    response: ProfilelDetailsType\r\n) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.FETCH_PROFILE_SUCCESS,\r\n        payload: response\r\n    });\r\n    \r\n};\r\n\r\nexport const handleFetchProfileFail = (dispatch: Dispatch<FetchProfileFail>) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.FETCH_PROFILE_FAIL\r\n    });\r\n};\r\n\r\n\r\nexport type ProfileAction =\r\n    | FetchProfile\r\n    | FetchProfileSuccess\r\n    | FetchProfileFail;","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx",["1515","1516","1517","1518","1519","1520","1521","1522"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport { fetchSubjectsPost,fetchSubject, deletePost } from '../../store/subject/Actions'\r\nimport { addSubject } from '../../store/subject/Actions';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { RootState } from '../../store/Index'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { SubjectFieldsType, SubjectTypes, loadMoreType, ISearchBarState } from '../../store/subject/Types'\r\nimport { UserDetails } from '../../store/authentication/Types'\r\nimport history from '../../History';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport {  Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\n\r\nexport interface PostsListProps extends RouteComponentProps<OwnPropsParams> {\r\n  loading: boolean\r\n  subjectDetails: SubjectTypes;\r\n  subjectDetailDelete: SubjectFieldsType;\r\n  tokenValue:UserDetails;\r\n  addSubjectDetails:any;\r\n  deleteDetails:SubjectFieldsType[];\r\n  fetchSubjectsPost: (getData:loadMoreType) => any;\r\n  fetchSubject: (id: number) => void;\r\n  deletePost: (subjectDetailDelete: number) => void;\r\n  addSubject: (subject: SubjectFieldsType) => void;\r\n}\r\n\r\nclass ViewSubjectDetails extends React.Component<PostsListProps, ISearchBarState> {  \r\n  constructor(props: any) {\r\n    super(props);  \r\n    this.state = {\r\n      show: false,\r\n      showDelete: false,\r\n      addShow: false,\r\n      acadamicAdmin: false,\r\n      schoolAdmin: false,\r\n      bothData:false,\r\n      teacher: false,\r\n      parent: false,\r\n      deleteSubjectId: [],\r\n      query: '',\r\n      subjectsData: [],\r\n      subjectsTotal:1,\r\n      hasMore:true,\r\n      prev: 0,\r\n      next: 0,\r\n      acsOrder:true,\r\n      descOrder:false,\r\n      page:1,\r\n      search:'',\r\n      getResponseData:[]\r\n    }; \r\n    this.getOnSubjectData();\r\n    this.checkUserType(); \r\n\r\n  }\r\n\r\n  componentDidMount(): void {     \r\n    \r\n  }\r\npublic getOnSubjectData() {\r\n  const postValue = {\r\n    page_no:this.state.page\r\n  }   \r\n  this.props.fetchSubjectsPost(postValue);  \r\n}\r\n\r\n  componentDidUpdate() {\r\n    this.checkStatusProcess();\r\n  }\r\n  checkUpdateValue(){\r\n    this.setState({ getResponseData: this.props.subjectDetails });\r\n  }\r\n checkStatusProcess(){\r\n  const selectDataList = this.props.deleteDetails;\r\n  const getDeleteDetails = JSON.stringify(selectDataList);\r\n  const getDeleteList = JSON.parse(getDeleteDetails);\r\n  if(getDeleteList === true){\r\n    const postValue = {\r\n      page_no:1\r\n    }      \r\n    this.props.fetchSubjectsPost(postValue);\r\n  }\r\n }\r\n public fetchMoreData = () =>  {\r\n  let allSchools:any;\r\n  let subjectState:any = [];  \r\n    const selectData = this.props.subjectDetails;\r\n  const getAllSubjectDetails = JSON.stringify(selectData);\r\n  const getSubjectList = JSON.parse(getAllSubjectDetails);\r\n  const dataValue = getSubjectList.data;\r\n}\r\n  public handleSubjectDelete = () => {\r\n      this.props.deletePost(this.state.deleteSubjectId);\r\n    this.setState({ showDelete: false });\r\n  }\r\n\r\n  public hideSubjectDelete = () => {\r\n    this.setState({ showDelete: false })\r\n  }\r\n  public showSubjectDelete = (getData : any) => {\r\n    this.setState({ showDelete: true,  deleteSubjectId: getData});\r\n  }\r\n\r\n  public showFilterData = (getdata : any) => {\r\n    if(getdata.sort_by === 'desc') {\r\n      this.setState({ acsOrder: false, sortOrder: getdata.sort_by, orderName: getdata.order_by, search:'' })\r\n      const postValue = {\r\n        page_no: 1,\r\n        search: this.state.search,\r\n        sort_by: getdata.sort_by, \r\n        order_by: getdata.order_by\r\n      }      \r\n      this.setState({ \r\n        page: 1,\r\n        hasMore: true })\r\n      this.props.fetchSubjectsPost(postValue);\r\n    } else {\r\n      this.setState({ acsOrder: true, sortOrder: getdata.sort_by, orderName: getdata.order_by, search:'' })\r\n      const postValue = {\r\n        page_no: 1,\r\n        search: this.state.search,\r\n        sort_by: getdata.sort_by, \r\n        order_by: getdata.order_by\r\n      } \r\n      this.setState({ \r\n        page: 1,\r\n        hasMore: true })\r\n      this.props.fetchSubjectsPost(postValue);\r\n    }\r\n  }\r\n  checkUserType(){\r\n    let getToken = localStorage.getItem('usertype');\r\n\t\tif(getToken === UserRoles.acadamicAdmin) {\r\n\t\t\tthis.setState({ acadamicAdmin: true })\r\n\t\t} else if(getToken === UserRoles.schoolAdmin) {\r\n\t\t\tthis.setState({ schoolAdmin: true })\r\n\t\t} else if(getToken === UserRoles.teacher) {\r\n\t\t\tthis.setState({ teacher: true })\r\n\t\t} else if(getToken === UserRoles.parent) {\r\n\t\t\tthis.setState({ parent: true })\r\n\t\t}    \r\n\t  }\r\n  private renderSubjectManageDelete() {\r\n    const actionOption = this.state.deleteSubjectId;\r\n    let titleMessage:any;\r\n    let titleMsg = 'Please Confirm'\r\n    if(actionOption.isActive === true){\r\n      titleMessage = 'Active';\r\n    } else {\r\n      titleMessage = 'Inactive';\r\n    }\r\n    return (\r\n      <div>\r\n        <Modal show={this.state.showDelete} handleClose={this.hideSubjectDelete}>\r\n          <Modal.Header className=\"pb-0 pt-0\">\r\n            <Modal.Title>{titleMsg}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body className=\"modelbottomcolor\">\r\n            <p>Are you sure want to {titleMessage} ?</p>\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer className=\"modelboxbutton\">\r\n            <button className=\"btn btn-danger mr-1 ml-1 w-15\" onClick={this.handleSubjectDelete}>Okay</button>\r\n            <button className=\"btn btn-default mr-1 ml-1 w-15\" onClick={this.hideSubjectDelete}>Cancel</button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  private renderSubjectManageView(getSubjectResponseData:any) {    \r\n    const { loading } = this.props;\r\n    const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n    let SubjectList:any;\r\n    if(getSubjectResponseData){\r\n      if(getSubjectResponseData.records){\r\n        SubjectList = getSubjectResponseData.records\r\n      } else {\r\n        SubjectList = this.state.subjectsData\r\n      }\r\n    }\r\n      return(\r\n       \r\n        <div>\r\n        {/* <InfiniteScroll\r\n        dataLength={this.state.subjectsData.length}\r\n        next={this.fetchMoreData}\r\n        hasMore={true}\r\n        loader={<h4 style={loadingTextCSS}>Loading...</h4>}\r\n      > */}\r\n      <table className=\"table table-striped custom-table table-hover\">\r\n      <thead>\r\n        <tr>\r\n            <th>\r\n              {this.state.acsOrder ? <button onClick={() => this.showFilterData({sort_by:'desc', order_by:'name'})} title=\"Asc order\">Subject Name <i className=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i></button> :  <button onClick={() => this.showFilterData({sort_by:'asc', order_by:'name'})} title=\"Desc order\">Subject Name <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i></button> }              \r\n           </th>\r\n            <th>{this.state.acsOrder ? <button onClick={() => this.showFilterData({sort_by:'desc', order_by:'short_name'})} title=\"Asc order\">Short Name <i className=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i></button> :  <button onClick={() => this.showFilterData({sort_by:'asc', order_by:'short_name'})} title=\"Desc order\">Short Name <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i></button> } </th>\r\n            <th>{this.state.acsOrder ? <button onClick={() => this.showFilterData({sort_by:'desc', order_by:'category'})} title=\"Asc order\">Category <i className=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i></button> :  <button onClick={() => this.showFilterData({sort_by:'asc', order_by:'category'})} title=\"Desc order\">Category <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i></button> } </th>\r\n            <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n      {SubjectList\r\n            ? SubjectList.map((data: SubjectFieldsType) => (\r\n              <tr>\r\n              <td >{data['name'] || '-'}</td>\r\n              <td >{data['short_name'] || '-'}</td>\r\n              <td >{data['category'] || '-'}</td>\r\n              <td>\r\n              <Link to={'/edit_subject/' + data.id}>\r\n              {data.is_active ? <button className=\"btn btn-primary btn-xs\" title=\"Edit Subject\"><i className=\"fa fa-pencil\" aria-hidden=\"true\" ></i></button> : null}\r\n              </Link>\r\n              {data.is_active ? <button className=\"btn btn-success btn-xs\" title=\"Active Subject\"  onClick={() => this.showSubjectDelete({id : String(data['id']), isActive: false })}><i className=\"fa fa-eye\" aria-hidden=\"true\"></i></button> : <button className=\"btn btn-danger btn-xs\" onClick={() => this.showSubjectDelete({id : String(data['id']), isActive: true })} title=\"Inactive Subject\"><i className=\"fa fa-ban\" aria-hidden=\"true\"></i></button>}\r\n              </td>\r\n            </tr>\r\n              ))\r\n            : null}\r\n      </tbody>\r\n    </table>\r\n      {/* </InfiniteScroll> */}\r\n      </div>\r\n      )\r\n    // }\r\n  }\r\n\r\n  handleInputChange = (e:any) => {\r\n    const { value } = e.target;\r\n    const getSearchValue = value;\r\n    if(getSearchValue) {\r\n      const postSearchValue = {\r\n        page_no: 1,\r\n        search: getSearchValue\r\n      }      \r\n      this.props.fetchSubjectsPost(postSearchValue);     \r\n      this.setState({ page: 1, hasMore: true, sortOrder: this.state.sortOrder, orderName: this.state.orderName, search: getSearchValue })\r\n    }else {\r\n      const postSearchValue = {\r\n        page_no: 1,\r\n        search: ''\r\n      }      \r\n      this.props.fetchSubjectsPost(postSearchValue);\r\n    }\r\n    this.setState({ page: 1, hasMore: true, search: '' })  \r\n  }\r\n\r\n  render() {\r\n  const { loading } = this.props;\r\n  const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n  let dataValue:any;\r\n  if(this.state.page === 1 ) {\r\n  const selectData = this.props.subjectDetails;\r\n  const getSubjectList = JSON.parse(JSON.stringify(selectData));\r\n  dataValue = getSubjectList.data;\r\n } else {\r\n  dataValue = this.state.subjectsData;\r\n }\r\n    const getToken = localStorage.getItem('token');\r\n        if(!getToken){\r\n            history.push(\"/\");\r\n        } \r\n    return (\r\n      <div>\r\n        {this.renderSubjectManageDelete()}\r\n        <div className=\"page-wrapper\">\r\n          <div className=\"page-content-wrapper\">\r\n            <div className=\"page-content pt-3\">\r\n            <BreadCrumb titleName={['Subject']} homeName={['Home']} url={['dashboard']} mainPageTitle={['View Subject']}/>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  <div className=\"card card-topline-red\">\r\n                    <div className=\"card-head\">\r\n                      <header>\r\n                      <Link to=\"/add_subject\">\r\n                        <button className=\"btn btn-pink\">Add New</button>\r\n                        </Link>\r\n                      </header>\r\n                      <div className=\"tools\">\r\n                      <form className=\"mt-2\">\r\n                      <input\r\n                        placeholder=\"Search\"\r\n                        name=\"search\"\r\n                        className=\"form-control\"\r\n                        onChange={this.handleInputChange}\r\n                      />\r\n                    </form>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body no-padding height-9\">\r\n                      <div className=\"row\">\r\n                        <div className=\"table-responsive\">\r\n                            {this.renderSubjectManageView(dataValue)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n        <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface OwnPropsParams {\r\n  id: string;\r\n  token: string;\r\n}\r\n\r\nconst mapStateToProps = ({subjects, login}: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n  const getDeleteMsg = JSON.stringify(subjects);\r\n  const getDeleteStatus = JSON.parse(getDeleteMsg);  \r\n  return {\r\n    subjectDetails: subjects.items,\r\n    loading:subjects.loading,\r\n    match: ownProps.match,\r\n    deleteDetails:getDeleteStatus.isAuthenticated\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps, { fetchSubjectsPost, fetchSubject, deletePost, addSubject }\r\n)(ViewSubjectDetails);","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx",["1523"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx",["1524","1525","1526"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx",["1527","1528"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx",["1529","1530"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { SchoolDetailsType, SchoolFieldsType } from '../../store/school/Types'\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { CATEGORY, MONTHLIST } from '../../services/Constants'\r\nimport { addSchool } from '../../store/school/Actions';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport history from '../../History';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { TextField } from 'formik-material-ui';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport { RootState } from '../../store/Index'\r\nimport { SchoolValidation } from './SchoolValidation'\r\nimport {GoogleMap, LoadScript, Marker, useJsApiLoader } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '400px'\r\n};\r\n\r\nconst center = {\r\n    lat: 13.067439,\r\n    lng: 80.237617\r\n};\r\n\r\nconst position = {\r\n    lat: 13.067439,\r\n    lng: 80.237617\r\n}\r\nconst initialValues: SchoolFieldsType = {\r\n    school_name: '',\r\n    address: '',\r\n    name: '',\r\n    designation: '',\r\n    phone_number: '',\r\n    email_id: '',\r\n    category: '',\r\n    latitude: '',\r\n    longitude: '',\r\n    acadamic_start_month: '',\r\n    acadamic_end_month: '',\r\n    start_time: '',\r\n    end_time: ''\r\n}\r\n\r\nexport type OwnSchoolFormProps = {\r\n    addSchool: (school: SchoolDetailsType) => void;\r\n    loading: boolean;\r\n    errorMessage: any;\r\n};\r\ntype SchoolState = { latitude: '', longitude:'' };\r\n\r\nclass AddNewSchool extends React.Component<OwnSchoolFormProps, SchoolState>  {\r\n    public onMarkerDragEnd = ({e}: { e: any }) =>  {\r\n        const lat = e.latLng.lat();\r\n        const lng = e.latLng.lng();\r\n        this.setState({\r\n            latitude: lat,\r\n            longitude: lng,\r\n        })\r\n    };\r\n    \r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };\r\n        const getToken = localStorage.getItem('token');\r\n        const lat = this.state ? this.state.latitude : '';\r\n        const lng = this.state ? this.state.longitude : '';\r\n        let getErrorData:any;\r\n        if(this.props.errorMessage) {\r\n            const errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));           \r\n            if(errorMessageList.data){\r\n                getErrorData = errorMessageList.data\r\n            }\r\n        }\r\n        if(!getToken){\r\n            history.push(\"/\");\r\n        } \r\n        return (\r\n            <div>\r\n        <div className=\"page-wrapper\">\r\n          <div className=\"page-content-wrapper\">\r\n            <div className=\"page-content pt-3\">\r\n            <BreadCrumb titleName={['School']} homeName={['Home']} url={['dashboard']} mainPageTitle={['Add School']} baseName={['School']} baseURL={['school']}/>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  <div className=\"card-box\">\r\n                  <div className=\"card-head\">\r\n                    <header>Add School</header>\r\n                </div>\r\n                  <div className=\"card-body\">\r\n            <Formik\r\n            \r\n                validationSchema={SchoolValidation}             \r\n                initialValues={initialValues} onSubmit={(values, actions) => {\r\n                    const startTime = values.start_time;\r\n                    const endTime = values.end_time;   \r\n\r\n                    const initialValuesList: SchoolDetailsType = {\r\n                        school_name: values.school_name,\r\n                        address: values.address,\r\n                        contact_persons: [{\r\n                            name: values.name,\r\n                            designation: values.designation,\r\n                            phone_number: values.phone_number,\r\n                            email_id: values.email_id\r\n                        }],\r\n                        category: values.category,\r\n                        school_coordinates: [{\r\n                            latitude: lat,\r\n                            longitude: lng\r\n                        }],\r\n                        acadamic_start_month: values.acadamic_start_month,\r\n                        acadamic_end_month: values.acadamic_end_month,\r\n                        start_time: moment(startTime, 'hh:mm').format('hh:mm A'),\r\n                        end_time: moment(endTime, 'hh:mm').format('hh:mm A')\r\n                    }\r\n                        this.props.addSchool(initialValuesList)\r\n                        actions.setSubmitting(false);\r\n                        { getErrorData ?                           \r\n                            actions.setErrors({\r\n                                school_name: getErrorData.school_name,\r\n                                address: getErrorData.address,\r\n                                name: getErrorData.name,\r\n                                designation: getErrorData.designation,\r\n                                phone_number: getErrorData.phone_number,\r\n                                email_id: getErrorData.email_id,\r\n                                category: getErrorData.category,\r\n                                acadamic_start_month: getErrorData.acadamic_start_month,\r\n                                acadamic_end_month: getErrorData.acadamic_end_month,\r\n                                start_time: getErrorData.start_time,\r\n                                end_time: getErrorData.end_time,\r\n                            })\r\n                            : \r\n                            <SpinnerLoader/> }\r\n\r\n                }}>\r\n                {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                     <Form>\r\n                     <div>                       \r\n                        <div className=\"\">\r\n                        <div className=\"row\">\r\n                                 <div className=\"col-md-6 p-t-20\">\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                 <FormGroup>\r\n                                     <Field\r\n                                         label='School Name*'\r\n                                         type=\"text\"\r\n                                         name=\"school_name\"\r\n                                         component={TextField}\r\n                                         className=\"textfield__input\"\r\n                                         disabled={false}\r\n                                     />\r\n                                 </FormGroup>\r\n                             </div>\r\n                                 </div>\r\n                                 <div className=\"col-md-6 p-t-20\">\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                 <FormGroup>\r\n                                 <Field \r\n                                 label='Category*'\r\n                                 name=\"category\"  \r\n                                 select\r\n                                 component={TextField}                   \r\n                                 className=\"textfield__input\"\r\n                                 fullwidth=\"true\"\r\n                                 disabled={false}\r\n                                 >\r\n                                 {CATEGORY.map(item => (\r\n                                  <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                 ))}\r\n                                 </Field>                        \r\n                                 </FormGroup>\r\n                                 </div>\r\n                                 </div>\r\n                        </div>\r\n                                                \r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                              label='Contact Person Name*'\r\n                                             type=\"text\"\r\n                                             name=\"name\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                         label='Contact Person Designation*'\r\n                                             type=\"text\"\r\n                                             name=\"designation\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                        </div>\r\n\r\n                         <div className=\"row\">\r\n                         <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                         label='Contact Person Phone Number*'\r\n                                             type=\"text\"\r\n                                             name=\"phone_number\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                         label='Contact Person Email Id*'\r\n                                             type=\"text\"\r\n                                             name=\"email_id\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"row\">\r\n                         <div className=\"col-md-12 p-b-5 p-t-5\">\r\n                         <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width\">\r\n                             <FormGroup>\r\n                                 <Field\r\n                                     name=\"address\"\r\n                                     component={TextField}\r\n                                     label=\"Address*\"\r\n                                     className=\"textfield__input\"\r\n                                     rows=\"1\"\r\n                                     disabled={false}\r\n                                 />\r\n                             </FormGroup>\r\n                             </div>\r\n                             </div> \r\n                         </div>                           \r\n                         <div className=\"row\">\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                             type=\"time\"\r\n                                             name=\"start_time\"\r\n                                             label=\"Start Time*\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                             InputLabelProps={{\r\n                                              shrink: true,\r\n                                          }} \r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                         <Field\r\n                                             type=\"time\"\r\n                                             name=\"end_time\"\r\n                                             label=\"End Time*\"\r\n                                             component={TextField}\r\n                                             className=\"textfield__input\"\r\n                                             fullwidth=\"true\"\r\n                                             disabled={false}\r\n                                             InputLabelProps={{\r\n                                              shrink: true,\r\n                                          }}  \r\n                                         />\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"row\">\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                     <Field \r\n                                     name=\"acadamic_start_month\"  \r\n                                     select\r\n                                     component={TextField}                   \r\n                                     className=\"textfield__input\"\r\n                                     label=\"Academic Start Month*\"\r\n                                     fullwidth=\"true\"\r\n                                     disabled={false}\r\n                                     >\r\n                                     {MONTHLIST.map(item => (\r\n                                      <MenuItem value={item.code}>{item.month}</MenuItem>\r\n                                     ))}\r\n                                     </Field>                               \r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                             <div className=\"col-md-6 p-t-20\">\r\n                                 <div>\r\n                                 <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                     <FormGroup>\r\n                                     <Field \r\n                                     name=\"acadamic_end_month\" \r\n                                     select\r\n                                     component={TextField}                        \r\n                                     className=\"textfield__input\"\r\n                                     label=\"Academic End Month*\"\r\n                                     fullwidth=\"true\" \r\n                                     disabled={false}\r\n                                     >\r\n                                     {MONTHLIST.map(item => (\r\n                                         <MenuItem value={item.code}>{item.month}</MenuItem>\r\n                                     ))}\r\n                                     </Field>\r\n                                     </FormGroup>\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"mt-3 mb-3\">\r\n                         <LoadScript  googleMapsApiKey=\"AIzaSyCk__DGKYrWV5NmfnpWvVJeiV5kuyC8MmQ\">\r\n                                <GoogleMap\r\n                                mapContainerStyle={containerStyle}\r\n                                center={center}\r\n                                zoom={15}\r\n                                >\r\n                                    <Marker\r\n                                    position={position}\r\n                                    onDragEnd={(e) => this.onMarkerDragEnd({e: e})}\r\n                                    draggable={true}\r\n                                    />\r\n                                         <></>\r\n                                </GoogleMap>\r\n                        </LoadScript>\r\n                         </div>\r\n                         <div className=\"text-right mb-3 mr-2 mt-4\"> \r\n                         <Button className=\"btn btn-pink mr-1 ml-1 w-15 mt-1\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                         <Link to=\"/school\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                        </div>\r\n                     </div>\r\n                     </div>\r\n                 </Form>\r\n                )}\r\n            </Formik>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({schools}: RootState) => {\r\n    return {\r\n        loading: schools.loading,\r\n        errorMessage: schools.errors\r\n    };\r\n  };\r\n\r\nexport default connect(\r\n    mapStateToProps,{ addSchool }\r\n)(AddNewSchool);",["1531","1532"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx",["1533","1534","1535"],"import  React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../store/Index';\r\nimport { addClassesPost } from '../../store/classes/Actions';\r\nimport { ClassesType, GradeFieldsType } from '../../store/classes/Type';\r\nimport  { ClassesForm }  from './ClassesForm';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { fetchGradePost } from '../../store/classes/Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { Field, FieldProps, Formik, FormikProps } from 'formik';\r\nimport { object } from 'yup';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { STANDARD } from '../../services/Constants';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\n\r\nconst initialValues: ClassesType = {\r\n    grade : '',\r\n    standard : ''\r\n};\r\n\r\n    export type OwnClassesFormProps = {\r\n        addClassesPost: (classes: ClassesType) => void;\r\n        loading: boolean;\r\n        fetchGradePost:() => any;\r\n        categoryDetails:GradeFieldsType[];\r\n        errorMessage: any;\r\n    };\r\nclass AddNewClasses extends React.Component<OwnClassesFormProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n    }\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n        let getErrorData:any;\r\n            if(this.props.errorMessage){\r\n                let errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));                \r\n                    if(errorMessageList.data){\r\n                        getErrorData = errorMessageList.data\r\n                    }\r\n            }\r\n        const getGradeList = JSON.parse(JSON.stringify(this.props.categoryDetails));\r\n        let gradePoint:any;\r\n        if(getGradeList) {\r\n            gradePoint  = getGradeList.data;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb titleName={['Class']} homeName={['Home']} url={['dashboard']} baseName={['Class']} baseURL={['class']} mainPageTitle={['Add Class']}/>\r\n                            {gradePoint ?  \r\n                            <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card-box\">\r\n                            <div className=\"card-head\">\r\n                            <header>Add Class</header>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <Formik\r\n                                initialValues={initialValues}\r\n                                onSubmit={(values: ClassesType, actions) =>{\r\n                                    this.props.addClassesPost(values)\r\n                                    actions.setSubmitting(false);\r\n                                    { getErrorData ?                           \r\n                                        actions.setErrors({\r\n                                            standard: getErrorData.standard,\r\n                                            grade: getErrorData.grade\r\n                                        })\r\n                                        : \r\n                                        <SpinnerLoader/> }\r\n                                }}\r\n                                validationSchema={object().shape({\r\n                                })}\r\n                                render={({\r\n                                    values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit\r\n                                }: FormikProps<ClassesType>) => (\r\n                                    <form onSubmit={handleSubmit} className=\"ui form\">\r\n                                        <div className=\"row\">\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                <FormGroup>\r\n                                                <Field \r\n                                                label='Grade*'\r\n                                                name=\"grade\"  \r\n                                                select\r\n                                                component={TextField}        \r\n                                                disabled={false}  \r\n                                                >\r\n                                                    { gradePoint.map((item:GradeFieldsType) =>(\r\n                                                                <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </Field> \r\n                                                </FormGroup>\r\n                                            </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                <FormGroup>\r\n                                                <Field \r\n                                                label='Standard*'\r\n                                                name=\"standard\"  \r\n                                                select\r\n                                                component={TextField}        \r\n                                                disabled={false}  \r\n                                                >\r\n                                                    {\r\n                                                        STANDARD.map( item => (\r\n                                                            <MenuItem value={item.value}>{item.label}</MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                    \r\n                                                </Field>                         \r\n                                                </FormGroup>\r\n                                                </div>\r\n                                                </div>\r\n                                                </div>\r\n                                            <div className=\"text-right mb-3 mr-2 mt-4\"> \r\n                                                <Button className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                                <Link to=\"/class\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                                            </div>\r\n                                      \r\n                                    </form>\r\n                                )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                     : <div><SpinnerLoader/></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = ({classes}: RootState) => {\r\n    return {\r\n    categoryDetails: classes.gradelist,\r\n      loading:classes.loading,\r\n      errorMessage: classes.errors\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps,{ addClassesPost, fetchGradePost }\r\n)(AddNewClasses);","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx",["1536","1537"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx",["1538"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx",["1539"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { SubjectFieldsType, CategoryFieldsType, SubjectTypes } from '../../store/subject/Types';\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport {  RouteComponentProps } from 'react-router-dom';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport history from '../../History';\r\nimport { RootState } from '../../store/Index';\r\nimport { fetchCategoryPost, fetchSubject, editSubject } from '../../store/subject/Actions'\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport { Link } from 'react-router-dom';\r\nimport { SubjectValidation } from './SubjectValidation'\r\nimport { TextField } from 'formik-material-ui';\r\n\r\ninterface subjectEditField {\r\n    getCategoryDetails:any;\r\n    getAllCategoryDetails:any;\r\n    getCategoryList:any;\r\n    categoryData:any;\r\n    electData:any;\r\n    getAllSubjectDetails:any;\r\n    getSubjectList:any;\r\n    dataValue:any;\r\n}\r\nexport interface PostsListProps extends RouteComponentProps<OwnPropsParams> {\r\n    loading: boolean;\r\n    subjectData: SubjectTypes;\r\n    subjectIdList: SubjectTypes;\r\n    categoryDetails: CategoryFieldsType[],\r\n    editSubject: (subject: SubjectFieldsType) => void;\r\n    fetchCategoryPost: () => void;\r\n    fetchSubject: (id: number) => void;\r\n    errorMessage: any;\r\n} \r\n\r\ntype AllProps = PostsListProps & subjectEditField;\r\nclass EditSubject extends React.Component<AllProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchCategoryPost();\r\n        this.props.fetchSubject(Number(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        const { loading } = this.props  \r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n        const getToken = localStorage.getItem('token');\r\n        if(!getToken){\r\n            history.push(\"/\");\r\n        }\r\n        let getCategoryDetails = JSON.parse(JSON.stringify(this.props.categoryDetails)); \r\n        let categoryData:any;\r\n        let dataValue:any;\r\n        let shortName;\r\n        let getname;\r\n        let category;\r\n        if(getCategoryDetails){\r\n            categoryData = getCategoryDetails.data;          \r\n        }\r\n        const getClassesList = JSON.parse(JSON.stringify(this.props.subjectIdList)); \r\n         if(getClassesList){     \r\n            dataValue = getClassesList;     \r\n            shortName = getClassesList.short_name;\r\n            getname = getClassesList.name;\r\n            category = getClassesList.category;\r\n        }\r\n        const initialValues: SubjectFieldsType = {\r\n            id: dataValue.id,\r\n            school_id: dataValue.school_id,\r\n            subject_name: dataValue.subject_name,\r\n            short_name: shortName,\r\n            name: getname,\r\n            category: category\r\n        }\r\n        let getErrorData:any;\r\n        if(this.props.errorMessage){\r\n            const errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));           \r\n            if(errorMessageList.data){\r\n                getErrorData = errorMessageList.data\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n          <div className=\"page-content-wrapper\">\r\n            <div className=\"page-content pt-3\">\r\n            <BreadCrumb titleName={['Subject']} homeName={['Home']} url={['dashboard']} baseName={['Subject']} baseURL={['subject']} mainPageTitle={['Edit Subject']}/>\r\n            { shortName && getname && category && dataValue ? \r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                <div className=\"card-box\">\r\n                <div className=\"card-head\">\r\n                    <header>Edit Subject</header>\r\n                </div>\r\n                  <div className=\"card-body\">\r\n                    {<Formik\r\n                   validationSchema={SubjectValidation}\r\n                   initialValues={initialValues} onSubmit={(values, actions) => {\r\n                       const initialValuesList: SubjectFieldsType = {\r\n                        school_id: '',\r\n                        short_name: values.short_name,\r\n                        id: values.id,\r\n                        name: values.name,\r\n                        category:values.category,\r\n                       }\r\n                       this.props.editSubject(initialValuesList)\r\n                        actions.setSubmitting(false);\r\n                        { getErrorData ?                           \r\n                            actions.setErrors({\r\n                                short_name: getErrorData.short_name,\r\n                                created_by: getErrorData.created_by,\r\n                                name: getErrorData.name\r\n                            })\r\n                            : \r\n                        <SpinnerLoader/> }   \r\n                   }}>\r\n                   {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                       <Form>\r\n                           <div className=\"row\">\r\n                               <div className=\"p-t-20 col-md-6\">\r\n                              <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                <FormGroup>\r\n                                    <Field\r\n                                           label='Subject Name*'\r\n                                           type=\"text\"\r\n                                           name=\"name\"\r\n                                           component={TextField}\r\n                                           className=\"textfield__input\"\r\n                                           disabled={false}\r\n                                       /> \r\n                               </FormGroup>\r\n                                </div>\r\n                               </div>\r\n                               <div className=\"col-md-6 p-t-20\">\r\n                               <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                               <FormGroup>\r\n                               <Field\r\n                                           label='Short Name*'\r\n                                           type=\"text\"\r\n                                           name=\"short_name\"\r\n                                           component={TextField}\r\n                                           className=\"textfield__input\"\r\n                                           disabled={false}\r\n                                       />\r\n                               </FormGroup>\r\n                           </div>\r\n                               </div>\r\n                               </div>\r\n                               <div className=\" row\">\r\n                               <div className=\"col-md-6 p-t-20\">\r\n                               <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-2\">\r\n                               <FormGroup>\r\n                               <Field \r\n                                   label='Category*'\r\n                                   name=\"category\"   \r\n                                   select\r\n                                   component={TextField}                  \r\n                                   className=\"textfield__input\"\r\n                                   fullwidth=\"true\"\r\n                                   disabled={false}\r\n                                   >\r\n                                    {categoryData && categoryData.map((item: any)=> (\r\n                                    <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                   ))}\r\n                                    </Field>   \r\n                                    </FormGroup>\r\n                           </div>\r\n                               </div>\r\n                           </div>\r\n                           <div className=\"text-right mb-3 mr-2 mt-4\">                            \r\n                                <Button className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                <Link to=\"/subject\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                           </div>\r\n               </Form>\r\n                   )}\r\n               </Formik>}\r\n               </div>\r\n               </div>\r\n               </div>\r\n               </div>\r\n                : <div><SpinnerLoader/></div>}\r\n            </div>\r\n            </div>\r\n            </div>\r\n            <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = ({subjects}: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n    categoryDetails: subjects.category,\r\n      loading:subjects.loading,\r\n      subjectData: subjects.items[Number(ownProps.match.params.id)],\r\n      subjectIdList: subjects.items,\r\n      errorMessage: subjects.errors\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps,{ editSubject, fetchCategoryPost, fetchSubject }\r\n)(EditSubject);","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx",["1540","1541"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx",["1542","1543"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport { connect } from 'react-redux';\r\nimport { ProfileActionTypes } from '../../store/profile/Types'\r\nimport { fetchProfilePost } from '../../store/profile/Actions'\r\nimport { RootState } from '../../store/Index'\r\nimport { LogoutPost } from '../../store/authentication/Actions'\r\n\r\nexport interface ProfileDetails {\r\n\tgetProfileDetails?:ProfileActionTypes[];\r\n\tfetchProfilePost: () => any;\r\n\tLogoutPost: () => void;\r\n}\r\n\r\nclass Sidenav extends React.Component<ProfileDetails> {\r\n\tpublic state = {\r\n\t\tacadamicAdmin: false,\r\n\t\tschoolAdmin: false,\r\n\t\tbothData:false,\r\n\t\tteacher: false,\r\n\t\tparent: false,\r\n\t\tshowLogout: false\r\n\t\t  };\r\n\t\t\r\n\t\t  public closeLogout = () => {\r\n\t\t\tthis.setState({ showLogout: false });  \r\n\t\t  }\r\n\t\r\n\t\t  public ShowLogoutBox = () => {\r\n\t\t\tthis.setState({ showLogout: true });  \r\n\t\t  }\r\n\t\r\n\t\t  componentDidMount(): void {\r\n\t\t\tthis.props.fetchProfilePost() \r\n\t\t\tthis.checkUserType();\r\n\t\t  }\r\n\t\t  checkUserType(){\r\n\t\t\tlet getToken = localStorage.getItem('usertype');\r\n\t\t\tif(getToken === UserRoles.acadamicAdmin) {\r\n\t\t\t\tthis.setState({ acadamicAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.schoolAdmin) {\r\n\t\t\t\tthis.setState({ schoolAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.teacher) {\r\n\t\t\t\tthis.setState({ teacher: true })\r\n\t\t\t} else if(getToken === UserRoles.parent) {\r\n\t\t\t\tthis.setState({ parent: true })\r\n\t\t\t}\r\n\t\t  }\r\n    render() {\r\n\t\tconst getProfile = JSON.stringify(this.props.getProfileDetails);\r\n\t\tconst profileList = JSON.parse(getProfile);\r\n\t\tconst getData = profileList.data;\r\n\t\tlet userFirstName;\r\n\t\tlet userLastName\r\n\t\tif(getData){\r\n\t\t\tuserFirstName = getData.firstname;\r\n\t\t\tuserLastName = getData.lastname;\r\n\t\t}\r\n        return (\r\n            <div>\r\n        {/* start page container */}\r\n\t\t<div className=\"page-container\">\r\n\t\t\t{/* start sidebar menu */}\r\n\t\t\t<div className=\"sidebar-container\">\r\n\t\t\t\t<div className=\"sidemenu-container navbar-collapse collapse fixed-menu\">\r\n\t\t\t\t\t<div id=\"remove-scroll\">\r\n\t\t\t\t\t\t<ul className=\"sidemenu page-header-fixed p-t-20\" data-keep-expanded=\"false\" data-auto-scroll=\"true\"\r\n\t\t\t\t\t\t\tdata-slide-speed=\"200\">\r\n\t\t\t\t\t\t\t<li className=\"sidebar-toggler-wrapper hide\">\r\n\t\t\t\t\t\t\t\t<div className=\"sidebar-toggler\">\r\n\t\t\t\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li className=\"nav-item start active\">\r\n\t\t\t\t\t\t\t<Link to={'/dashboard'}  className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">dashboard</i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Dashboard</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t<span className=\"title\">classNamees</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Instant Feedback</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Attendance</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Notice Board</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-book\" aria-hidden=\"true\"></i> \r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Diary</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Quizzes</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Question Set</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Manage</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"arrow\"></span>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t<ul className=\"sub-menu\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/class'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span className=\"title\">Class</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teachers</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"selected\"></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Students</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teacher Details</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/school'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">School</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t <li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n                                                        <Link to=\"/subject\" className=\"nav-link \">\r\n                                                            <span className=\"title\">Subject</span>\r\n                                                        </Link>\r\n                                                    </li>\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.acadamicAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/usermanage'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">User Manage</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\t\t\t\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t{/* end sidebar menu */}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({schools, login, profile}: RootState) => {\r\n\treturn {\r\n\t\tgetProfileDetails: profile.items\r\n\t};\r\n  };\r\nexport default connect(\r\n\tmapStateToProps, { fetchProfilePost, LogoutPost }\r\n  )(Sidenav);","D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx",["1544","1545"],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts",[],"D:\\daps project\\change_url_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts",["1546","1547","1548"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\index.tsx",[],["1549","1550"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\App.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\History.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx",["1551"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx",["1552"],"import  React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport {  SubjectFieldsType, CategoryFieldsType} from '../../store/subject/Types'\r\nimport { fetchCategoryPost } from '../../store/subject/Actions'\r\nimport {  Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { addSubject } from '../../store/subject/Actions';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport history from '../../History';\r\nimport { Link } from 'react-router-dom';\r\nimport { TextField } from 'formik-material-ui';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport { SubjectValidation } from './SubjectValidation'\r\n\r\nconst initialValues: SubjectFieldsType = {\r\n    category: '',\r\n    short_name: '',\r\n    school_id : '',\r\n    created_by: '',\r\n    name: '',\r\n    subject_name:''\r\n}\r\nexport type OwnSubjectFormProps = {\r\n    categoryDetails: CategoryFieldsType[],\r\n    addSubject: (subject: SubjectFieldsType) => void;\r\n    fetchCategoryPost: () => void;\r\n    loading: boolean;\r\n    errorMessage: any;\r\n};\r\nclass AddNewSubject extends React.Component<OwnSubjectFormProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchCategoryPost();\r\n    }\r\n    render() {\r\n        const { loading } = this.props  \r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };  \r\n        const getToken = localStorage.getItem('token');\r\n        if(!getToken){\r\n            history.push(\"/\");\r\n        }\r\n        const getCategoryDetails = this.props.categoryDetails;\r\n        const getAllCategoryDetails = JSON.stringify(getCategoryDetails);\r\n        const getCategoryList = JSON.parse(getAllCategoryDetails);\r\n        const categoryData = getCategoryList.data;\r\n        \r\n        const submit = (values: any, actions: any) => {\r\n            const initialValuesList: SubjectFieldsType = {\r\n                school_id: '',\r\n                short_name: values.short_name,\r\n                created_by: values.created_by,\r\n                name: values.name,\r\n                is_active: 'true',\r\n                category:values.category\r\n\r\n            }\r\n            this.props.addSubject(initialValuesList)\r\n           actions.setSubmitting(false);\r\n            { this.props.errorMessage?.data ?                           \r\n                actions.setErrors({\r\n                    short_name: this.props.errorMessage.data.short_name,\r\n                    created_by: this.props.errorMessage.data.created_by,\r\n                    name: this.props.errorMessage.data.name\r\n                })\r\n                : \r\n            <SpinnerLoader/> }\r\n\r\n        }\r\n        return (\r\n            <div>\r\n            <div className=\"page-wrapper\">\r\n            <div className=\"page-content-wrapper\">\r\n                <div className=\"page-content pt-3\">\r\n                <BreadCrumb titleName={['Subject']} homeName={['Home']} url={['dashboard']} baseName={['Subject']} baseURL={['subject']} mainPageTitle={['Add Subject']}/>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    <div className=\"card-box\">\r\n                <div className=\"card-head\">\r\n                    <header>Add Subject</header>\r\n                </div>\r\n                  <div className=\"card-body\">\r\n                    <Formik                     \r\n                    validationSchema={SubjectValidation}\r\n                    initialValues={initialValues} \r\n                    onSubmit={submit}>\r\n                    {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                        <Form>\r\n                        <div>                        \r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-6 p-t-20\">\r\n                                \r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                    <FormGroup>\r\n                                    <Field\r\n                                           label='Subject Name*'\r\n                                           type=\"text\"\r\n                                           name=\"name\"\r\n                                           component={TextField}\r\n                                           className=\"textfield__input\"\r\n                                           disabled={false}\r\n                                       />\r\n                                        </FormGroup>\r\n                                </div>\r\n                                    </div>\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                        <Field\r\n                                           label='Short Name*'\r\n                                           type=\"text\"\r\n                                           name=\"short_name\"\r\n                                           component={TextField}\r\n                                           className=\"textfield__input\"\r\n                                           disabled={false}\r\n                                       />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                </div>\r\n                                <div className=\" row\">\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-2\">                                        \r\n                                        <FormGroup>\r\n                                        <Field \r\n                                   label='Category*'\r\n                                   name=\"category\"   \r\n                                   select\r\n                                   component={TextField}                   \r\n                                   className=\"textfield__input\"\r\n                                   fullwidth=\"true\"\r\n                                   disabled={false}                                   \r\n                                   >\r\n                                   {categoryData && categoryData.map((item: any)=> (\r\n                                    <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                   ))}\r\n                                   </Field> \r\n                                    </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"text-right mb-3 mr-2 mt-4\"> \r\n                                    <Button className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                <Link to=\"/subject\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                           </div>\r\n                        </div>\r\n                    </Form>\r\n                    )}\r\n                </Formik>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n            \r\n        );\r\n                }\r\n    }\r\n    const mapStateToProps = (state: any) => {\r\n        return {\r\n          categoryDetails: state.subjects.category,\r\n          loading: state.subjects.loading,\r\n          errorMessage: state.subjects.errors\r\n        };\r\n      };\r\n    export default connect(\r\n        mapStateToProps,{ fetchCategoryPost, addSubject }\r\n    )(AddNewSubject);\r\n\r\n\r\n\r\n","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx",["1553","1554"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx",["1555","1556","1557"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { RootState } from '../../store/Index';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { SchoolDetailsType, SchoolFieldsType, SchoolTypes } from '../../store/school/Types'\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { editSchool, fetchSchool } from '../../store/school/Actions';\r\nimport { CATEGORY, MONTHLIST } from '../../services/Constants'\r\nimport { Link } from 'react-router-dom';\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport history from '../../History';\r\nimport { TextField } from 'formik-material-ui';\r\nimport moment from 'moment';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\nimport { UserRoles } from '../../services/Constants';\r\nimport { SchoolValidation } from './SchoolValidation'\r\nimport {GoogleMap, LoadScript, Marker} from '@react-google-maps/api';\r\n\r\nexport interface PostsListProps extends RouteComponentProps<OwnPropsParams> {\r\n    loading: boolean\r\n    schoolData: SchoolTypes;\r\n    schoolEditDetails: SchoolTypes;\r\n    editSchool: (school: SchoolDetailsType) => void;\r\n    fetchSchool: (id: number) => void;\r\n    errorMessage: any;\r\n}  \r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '400px'\r\n};\r\n\r\nconst center = {\r\n    lat: 13.067439,\r\n    lng: 80.237617\r\n};\r\n\r\nclass EditSchool extends React.Component<PostsListProps> {\r\n    componentDidMount(): void {  \r\n        this.checkUserType();\r\n        this.props.fetchSchool(Number(this.props.match.params.id));\r\n      }\r\n\r\n    public state = {\r\n        show: false,\r\n        showDelete: false,\r\n        addShow: false,\r\n        acadamicAdmin: false,\r\n        schoolAdmin: false,\r\n        bothData:false,\r\n        teacher: false,\r\n        parent: false,\r\n        deleteSchoolId: -1,\r\n        latitude:\"\",\r\n        longitude:\"\",\r\n        getUrlService:''\r\n      };\r\n    checkUserType(){\r\n        let getToken = localStorage.getItem('usertype');\r\n            if(getToken === UserRoles.acadamicAdmin) {\r\n                this.setState({ acadamicAdmin: true })\r\n                this.setState({ getUrlService:'school'})\r\n            } else if(getToken === UserRoles.schoolAdmin) {\r\n                this.setState({ schoolAdmin: true })\r\n                this.setState({ getUrlService:'view_school'})\r\n            } else if(getToken === UserRoles.teacher) {\r\n                this.setState({ teacher: true })\r\n            } else if(getToken === UserRoles.parent) {\r\n                this.setState({ parent: true })\r\n            }    \r\n          }\r\n        \r\n          public onMarkerDragEnd = ({e}: { e: any }) =>  {\r\n            const lat = e.latLng.lat();\r\n            const lng = e.latLng.lng();\r\n    \r\n            this.setState({\r\n                latitude: lat,\r\n                longitude: lng,\r\n            })\r\n        };\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };\r\n        const { getUrlService } =  this.state;\r\n        const getToken = localStorage.getItem('token');\r\n        let getErrorData:any;\r\n        if(this.props.errorMessage) {\r\n            const errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));           \r\n            if(errorMessageList.data){\r\n                getErrorData = errorMessageList.data\r\n            }\r\n        }\r\n        if(!getToken){\r\n            history.push(\"/\");\r\n        }\r\n        let getselectData = JSON.parse(JSON.stringify(this.props.schoolEditDetails))\r\n        let selectData:any;\r\n        let position:any;\r\n        let lat:any;\r\n        let lng:any;\r\n        let getStatTime;\r\n        let getEndTime;\r\n        let contactPersonsName;\r\n        let contactPersonsDesignation;\r\n        let contactPersonsPhoneNumber;\r\n        let contactPersonsemailId;\r\n        let latitude;\r\n        let longitude;\r\n        let schoolCoordinates;\r\n        let contactPersons;\r\n        let school_name;\r\n        let school_id;\r\n        let school_address;\r\n        let school_category;\r\n        let acadamic_start_month;\r\n        let acadamic_end_month;\r\n        if(getselectData){\r\n            selectData = getselectData.data; \r\n            if(selectData){\r\n                schoolCoordinates = selectData.school_coordinates;\r\n                contactPersons = selectData.contact_persons;\r\n                school_name = selectData.school_name;\r\n                school_id = selectData.id;\r\n                school_address = selectData.address;\r\n                school_category = selectData.category;\r\n                acadamic_start_month= selectData.acadamic_start_month;\r\n                acadamic_end_month = selectData.acadamic_end_month;\r\n            }            \r\n        }\r\n       \r\n        if(selectData) {       \r\n        getStatTime = selectData.start_time;\r\n        getEndTime = selectData.end_time; \r\n        }\r\n\r\n        if(schoolCoordinates){\r\n        position = {\r\n                lat: parseFloat(schoolCoordinates[0].latitude),\r\n                lng: parseFloat(schoolCoordinates[0].longitude)\r\n            }\r\n            lat = this.state ? this.state.latitude : schoolCoordinates[0].latitude;\r\n            lng = this.state ? this.state.longitude : schoolCoordinates[0].longitude;\r\n            latitude = schoolCoordinates[0].latitude;\r\n            longitude = schoolCoordinates[0].longitude;\r\n        }\r\n        if(contactPersons){\r\n            contactPersonsName = contactPersons[0].name;\r\n            contactPersonsDesignation = contactPersons[0].designation;\r\n            contactPersonsPhoneNumber = contactPersons[0].phone_number;\r\n            contactPersonsemailId = contactPersons[0].email_id;\r\n        }\r\n        const initialValues: SchoolFieldsType = {\r\n\r\n            id: school_id,\r\n            school_name: school_name,\r\n            address: school_address,\r\n            name: contactPersonsName,\r\n            designation: contactPersonsDesignation,\r\n            phone_number:contactPersonsPhoneNumber,\r\n            email_id: contactPersonsemailId,\r\n            category: school_category,\r\n            latitude: latitude,\r\n            longitude: longitude,\r\n            acadamic_start_month: acadamic_start_month,\r\n            acadamic_end_month: acadamic_end_month,\r\n            start_time: moment(getStatTime, [\"h:mm A\"]).format(\"HH:mm\"),\r\n            end_time: moment(getEndTime, [\"h:mm A\"]).format(\"HH:mm\")\r\n        }\r\n        return (\r\n            <div>\r\n        <div className=\"page-wrapper\">\r\n          <div className=\"page-content-wrapper\">\r\n            <div className=\"page-content pt-3\">\r\n              <BreadCrumb titleName={['School']} homeName={['Home']} url={['dashboard']} baseName={['School']} baseURL={[getUrlService]} mainPageTitle={['Edit School']}/>\r\n              { selectData && contactPersons && schoolCoordinates ? \r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                <div className=\"card-box\">\r\n                  <div className=\"card-head\">\r\n                    <header>Edit School</header>\r\n                </div>\r\n                  <div className=\"card-body\">\r\n                  <Formik\r\n                   validationSchema={SchoolValidation}\r\n                   initialValues={initialValues} onSubmit={(values, actions) => {   \r\n                    const startTime = values.start_time;\r\n                    const endTime = values.end_time; \r\n                       const initialValuesList: SchoolDetailsType = {\r\n                            id: values.id,\r\n                            school_name: values.school_name,\r\n                            address: values.address,\r\n                            contact_persons: [{\r\n                                name: values.name,\r\n                                designation: values.designation,\r\n                                phone_number: values.phone_number,\r\n                                email_id: values.email_id\r\n                            }],\r\n                            category: values.category,\r\n                            school_coordinates: [{\r\n                                latitude: values.latitude,\r\n                                longitude: values.longitude\r\n                            }],\r\n                            acadamic_start_month: values.acadamic_start_month,\r\n                            acadamic_end_month: values.acadamic_end_month,\r\n                            start_time: moment(startTime, 'hh:mm').format('hh:mm A'),\r\n                            end_time: moment(endTime, 'hh:mm').format('hh:mm A'),\r\n                            is_active: 'true'\r\n                       }\r\n                       this.props.editSchool(initialValuesList)\r\n                       actions.setSubmitting(false);\r\n                       { getErrorData ?  \r\n                        setTimeout(() => {\r\n                            actions.setErrors({\r\n                                school_name: getErrorData.school_name,\r\n                                address: getErrorData.address,\r\n                                name: getErrorData.name,\r\n                                designation: getErrorData.designation,\r\n                                phone_number: getErrorData.phone_number,\r\n                                email_id: getErrorData.email_id,\r\n                                category: getErrorData.category,\r\n                                acadamic_start_month: getErrorData.acadamic_start_month,\r\n                                acadamic_end_month: getErrorData.acadamic_end_month,\r\n                                start_time: getErrorData.start_time,\r\n                                end_time: getErrorData.end_time,\r\n                            })\r\n                        }, 1000)                       \r\n                        : \r\n                        <SpinnerLoader/> }\r\n                   }}>\r\n                   {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                        <Form>\r\n                        <div>\r\n                          \r\n                            <div className=\"\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6 p-t-20\">\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                    <FormGroup>\r\n                                        <Field\r\n                                            label='School Name*'\r\n                                            type=\"text\"\r\n                                            name=\"school_name\"\r\n                                            component={TextField}\r\n                                            className=\"textfield__input\"\r\n                                            disabled={this.state.schoolAdmin}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-6 p-t-20\">\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                    <FormGroup>\r\n                                    <Field \r\n                                    label='Category*'\r\n                                    name=\"category\"  \r\n                                    select\r\n                                    component={TextField}                   \r\n                                    className=\"textfield__input\"\r\n                                    fullwidth=\"true\"\r\n                                    disabled={false}\r\n                                    >\r\n                                    {CATEGORY.map(item => (\r\n                                     <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                    ))}\r\n                                    </Field>                        \r\n                                    </FormGroup>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                           \r\n                           \r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                                 label='Contact Person Name*'\r\n                                                type=\"text\"\r\n                                                name=\"name\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                            label='Contact Person Designation*'\r\n                                                type=\"text\"\r\n                                                name=\"designation\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n \r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                            label='Contact Person Phone Number*'\r\n                                                type=\"text\"\r\n                                                name=\"phone_number\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                            label='Contact Person Email Id*'\r\n                                                type=\"text\"\r\n                                                name=\"email_id\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-12 p-b-5 p-t-5\">\r\n                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width\">\r\n                                <FormGroup>\r\n                                    <Field\r\n                                        name=\"address\"\r\n                                        component={TextField}\r\n                                        label=\"Address*\"\r\n                                        className=\"textfield__input\"\r\n                                        rows=\"1\"\r\n                                        disabled={false}\r\n                                    />\r\n                                </FormGroup>\r\n                                </div>\r\n                                </div> \r\n                            </div>                           \r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                                type=\"time\"\r\n                                                name=\"start_time\"\r\n                                                label=\"Start Time*\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                                InputLabelProps={{\r\n                                                 shrink: true,\r\n                                             }} \r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                            <Field\r\n                                                type=\"time\"\r\n                                                name=\"end_time\"\r\n                                                label=\"End Time*\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                fullwidth=\"true\"\r\n                                                disabled={false}\r\n                                                InputLabelProps={{\r\n                                                 shrink: true,\r\n                                             }}  \r\n                                            />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                        <Field \r\n                                        name=\"acadamic_start_month\"  \r\n                                        select\r\n                                        component={TextField}                   \r\n                                        className=\"textfield__input\"\r\n                                        label=\"Academic Start Month*\"\r\n                                        fullwidth=\"true\"\r\n                                        disabled={false}\r\n                                        >\r\n                                        {MONTHLIST.map(item => (\r\n                                         <MenuItem value={item.code}>{item.month}</MenuItem>\r\n                                        ))}\r\n                                        </Field>                               \r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-6 p-t-20\">\r\n                                    <div>\r\n                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                        <FormGroup>\r\n                                        <Field \r\n                                        name=\"acadamic_end_month\" \r\n                                        select\r\n                                        component={TextField}                        \r\n                                        className=\"textfield__input\"\r\n                                        label=\"Academic End Month*\"\r\n                                        fullwidth=\"true\" \r\n                                        disabled={false}\r\n                                        >\r\n                                        {MONTHLIST.map(item => (\r\n                                            <MenuItem value={item.code}>{item.month}</MenuItem>\r\n                                        ))}\r\n                                        </Field>\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mt-3 mb-3\">\r\n                            <LoadScript\r\n                                        googleMapsApiKey=\"AIzaSyCk__DGKYrWV5NmfnpWvVJeiV5kuyC8MmQ\"\r\n                                    >\r\n                                        <GoogleMap\r\n                                            mapContainerStyle={containerStyle}\r\n                                            center={center}\r\n                                            zoom={15}\r\n                                        >\r\n                                            <Marker\r\n                                                position={position}\r\n                                                onDragEnd={(e) => this.onMarkerDragEnd({e: e})}\r\n                                                draggable={true}\r\n                                            />\r\n                                            <></>\r\n                                        </GoogleMap>\r\n                                    </LoadScript>\r\n                            </div>\r\n                            <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                            <Button className=\"btn btn-pink mr-1 ml-1 w-15 mt-1\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                            <Link to=\"/school\"  style={{ display: this.state.acadamicAdmin ? \"inline-block\" : \"none\" }}><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                                <Link to=\"/view_school\"  style={{ display: this.state.schoolAdmin ? \"inline-block\" : \"none\" }}><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                           </div>\r\n                        </div>\r\n                        </div>\r\n                    </Form>\r\n                   )}\r\n               </Formik>\r\n               </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n             : <div><SpinnerLoader/></div> }\r\n            </div>\r\n            </div>\r\n            </div>            \r\n        <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = ({schools}: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n    errorMessage: schools.errors,\r\n    loading:schools.loading,\r\n    schoolData: schools.items[Number(ownProps.match.params.id)],\r\n    schoolEditDetails: schools.items\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps,{ editSchool, fetchSchool }\r\n)(EditSchool);","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx",["1558","1559","1560"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx",["1561"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { EditClassesPost, fetchGradePost, fetchClassesIdPost } from '../../store/classes/Actions';\r\nimport { ClassesType, GradeFieldsType, ClassesTypes } from '../../store/classes/Type';\r\nimport { RootState } from '../../store/Index';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { object } from 'yup';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { STANDARD } from '../../services/Constants';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\n\r\ninterface PostEditProps extends RouteComponentProps<OwnPropsParams> {\r\n    classes: ClassesType;\r\n    getClassesDetail:ClassesTypes;\r\n    fetchGradePost:() => any;\r\n    fetchClassesIdPost: (id: number) => void;\r\n    EditClassesPost: (classes: ClassesType) => void;\r\n    categoryDetails:GradeFieldsType[];\r\n    loading: boolean;\r\n    errorMessage: any;\r\n}\r\nclass EditClasses extends  React.Component<PostEditProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n        this.props.fetchClassesIdPost(Number(this.props.match.params.id));       \r\n    }\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };   \r\n        const getClassesList = JSON.parse(JSON.stringify(this.props.getClassesDetail));      \r\n        const getGradeList = JSON.parse(JSON.stringify(this.props.categoryDetails));\r\n        let getErrorData:any;\r\n        if(this.props.errorMessage){\r\n            let errorMessageList = JSON.parse(JSON.stringify(this.props.errorMessage));                \r\n                if(errorMessageList.data){\r\n                    getErrorData = errorMessageList.data\r\n                }\r\n        }\r\n        let gradeValue;\r\n        let getstandard;\r\n        let getId:number;\r\n        let gradePoint:any;\r\n        if(getGradeList) {\r\n            gradePoint  = getGradeList.data;\r\n        }\r\n       if(getClassesList) {\r\n        gradeValue = getClassesList.grade;\r\n        getstandard = getClassesList.standard;\r\n        getId = getClassesList.id\r\n       }\r\n        const initialValues: ClassesType = {\r\n            grade : gradeValue,\r\n            standard : getstandard\r\n        };\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb titleName={['class']} homeName={['Home']} url={['dashboard']} baseName={['Class']} baseURL={['class']} mainPageTitle={['Edit Class']}/>\r\n                            {gradePoint && gradeValue && getstandard ?   \r\n                <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card-box\">\r\n                            <div className=\"card-head\">\r\n                            <header>Edit Class</header>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                          {<Formik\r\n                            validationSchema={object().shape({\r\n                            })}\r\n                            initialValues={initialValues} onSubmit={(values, actions) => {\r\n                                const getValues: ClassesType = {\r\n                                    id : getId,\r\n                                    grade : values.grade,\r\n                                    standard : values.standard\r\n                                };\r\n                                this.props.EditClassesPost(getValues)\r\n                                actions.setSubmitting(false);\r\n                                { getErrorData ?                           \r\n                                    actions.setErrors({\r\n                                        standard: getErrorData.standard,\r\n                                        grade: getErrorData.grade\r\n                                    })\r\n                                    : \r\n                                    <SpinnerLoader/> }\r\n            \r\n                            }}>\r\n                                {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (  \r\n                                     <Form>\r\n                                     <div className=\"row\">\r\n                                             <div className=\"col-md-6 p-t-20\">\r\n                                             <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                             <FormGroup>\r\n                                             <Field \r\n                                             label='Grade*'\r\n                                             name=\"grade\"  \r\n                                             select\r\n                                             component={TextField}        \r\n                                             disabled={false}  \r\n                                             >\r\n                                                 { gradePoint.map((item:GradeFieldsType) =>(\r\n                                                             <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                     ))\r\n                                                 }\r\n                                             </Field> \r\n                                             </FormGroup>\r\n                                         </div>\r\n                                             </div>\r\n                                             <div className=\"col-md-6 p-t-20\">\r\n                                             <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                             <FormGroup>\r\n                                             <Field \r\n                                             label='Standard*'\r\n                                             name=\"standard\"  \r\n                                             select\r\n                                             component={TextField}        \r\n                                             disabled={false}  \r\n                                             >\r\n                                                 {\r\n                                                     STANDARD.map( item => (\r\n                                                         <MenuItem value={item.value}>{item.label}</MenuItem>\r\n                                                     ))\r\n                                                 }\r\n                                                 \r\n                                             </Field>                         \r\n                                             </FormGroup>\r\n                                             </div>\r\n                                             </div>\r\n                                             </div>\r\n                                         <div className=\"text-right mb-3 mr-2 mt-4\"> \r\n                                                <Button className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                                <Link to=\"/class\"><Button className=\"btn btn-default mr-1 ml-1 w-15\">Cancel</Button></Link>\r\n                                         </div>\r\n                                   \r\n                                 </Form>\r\n                                 )}\r\n                            </Formik>}\r\n                               \r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    : <div><SpinnerLoader/></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = ({classes}: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n    classes:classes.items[Number(ownProps.match.params.id)],\r\n    getClassesDetail:classes.items,\r\n    categoryDetails: classes.gradelist,\r\n    loading:classes.loading,\r\n    errorMessage: classes.errors\r\n    };\r\n  };\r\nexport default connect(\r\n    mapStateToProps,{ fetchClassesIdPost, EditClassesPost, fetchGradePost }\r\n)(EditClasses);","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\type.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx",["1562","1563"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport { connect } from 'react-redux';\r\nimport { ProfileActionTypes } from '../../store/profile/Types'\r\nimport { fetchProfilePost } from '../../store/profile/Actions'\r\nimport { RootState } from '../../store/Index'\r\nimport { LogoutPost } from '../../store/authentication/Actions'\r\n\r\nexport interface ProfileDetails {\r\n\tgetProfileDetails?:ProfileActionTypes[];\r\n\tfetchProfilePost: () => any;\r\n\tLogoutPost: () => void;\r\n}\r\n\r\nclass Sidenav extends React.Component<ProfileDetails> {\r\n\tpublic state = {\r\n\t\tacadamicAdmin: false,\r\n\t\tschoolAdmin: false,\r\n\t\tbothData:false,\r\n\t\tteacher: false,\r\n\t\tparent: false,\r\n\t\tshowLogout: false\r\n\t\t  };\r\n\t\t\r\n\t\t  public closeLogout = () => {\r\n\t\t\tthis.setState({ showLogout: false });  \r\n\t\t  }\r\n\t\r\n\t\t  public ShowLogoutBox = () => {\r\n\t\t\tthis.setState({ showLogout: true });  \r\n\t\t  }\r\n\t\r\n\t\t  componentDidMount(): void {\r\n\t\t\tthis.props.fetchProfilePost() \r\n\t\t\tthis.checkUserType();\r\n\t\t  }\r\n\t\t  checkUserType(){\r\n\t\t\tlet getToken = localStorage.getItem('usertype');\r\n\t\t\tif(getToken === UserRoles.acadamicAdmin) {\r\n\t\t\t\tthis.setState({ acadamicAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.schoolAdmin) {\r\n\t\t\t\tthis.setState({ schoolAdmin: true })\r\n\t\t\t} else if(getToken === UserRoles.teacher) {\r\n\t\t\t\tthis.setState({ teacher: true })\r\n\t\t\t} else if(getToken === UserRoles.parent) {\r\n\t\t\t\tthis.setState({ parent: true })\r\n\t\t\t}\r\n\t\t  }\r\n    render() {\r\n\t\tconst getProfile = JSON.stringify(this.props.getProfileDetails);\r\n\t\tconst profileList = JSON.parse(getProfile);\r\n\t\tconst getData = profileList.data;\r\n\t\tlet userFirstName;\r\n\t\tlet userLastName\r\n\t\tif(getData){\r\n\t\t\tuserFirstName = getData.firstname;\r\n\t\t\tuserLastName = getData.lastname;\r\n\t\t}\r\n        return (\r\n            <div>\r\n        {/* start page container */}\r\n\t\t<div className=\"page-container\">\r\n\t\t\t{/* start sidebar menu */}\r\n\t\t\t<div className=\"sidebar-container\">\r\n\t\t\t\t<div className=\"sidemenu-container navbar-collapse collapse fixed-menu\">\r\n\t\t\t\t\t<div id=\"remove-scroll\">\r\n\t\t\t\t\t\t<ul className=\"sidemenu page-header-fixed p-t-20\" data-keep-expanded=\"false\" data-auto-scroll=\"true\"\r\n\t\t\t\t\t\t\tdata-slide-speed=\"200\">\r\n\t\t\t\t\t\t\t<li className=\"sidebar-toggler-wrapper hide\">\r\n\t\t\t\t\t\t\t\t<div className=\"sidebar-toggler\">\r\n\t\t\t\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li className=\"nav-item start active\">\r\n\t\t\t\t\t\t\t<Link to={'/dashboard'}  className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">dashboard</i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Dashboard</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t<span className=\"title\">classNamees</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Instant Feedback</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Attendance</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Notice Board</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-book\" aria-hidden=\"true\"></i> \r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Diary</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Quizzes</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Question Set</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link nav-toggle\">\r\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t<span className=\"title\">Manage</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"arrow\"></span>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t<ul className=\"sub-menu\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/class'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span className=\"title\">Class</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teachers</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"selected\"></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Students</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Teacher Details</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/school'} className=\"nav-link\"> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">School</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t <li className=\"nav-item\" style={{ display: this.state.schoolAdmin ? \"block\" : \"none\" }}>\r\n                                                        <Link to=\"/subject\" className=\"nav-link \">\r\n                                                            <span className=\"title\">Subject</span>\r\n                                                        </Link>\r\n                                                    </li>\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" style={{ display: this.state.acadamicAdmin ? \"block\" : \"none\" }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/user'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">User Manage</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\t\t\t\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t{/* end sidebar menu */}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({schools, login, profile}: RootState) => {\r\n\treturn {\r\n\t\tgetProfileDetails: profile.items\r\n\t};\r\n  };\r\nexport default connect(\r\n\tmapStateToProps, { fetchProfilePost, LogoutPost }\r\n  )(Sidenav);","D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\Service.ts",[],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts",["1564","1565","1566"],"D:\\daps project\\forgot_password_change_FE\\DAPS\\02_WebFrontEnd\\src\\components\\CommonLoader.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\index.tsx",[],["1567","1568"],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\reportWebVitals.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\App.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\Index.ts",["1569"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport reduxThunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport { schoolReducer } from './school/Reducer'\r\nimport { SchoolsAction } from './school/Actions';\r\nimport { SchoolsState } from './school/Types';\r\n\r\nimport { SubjectReducer } from './subject/Reducer'\r\nimport { SubjectsAction } from './subject/Actions';\r\nimport { SubjectsState } from './subject/Types';\r\n\r\n//Login form details \r\nimport { authenticationReducer } from './authentication/Reducer'\r\nimport { LoginAction } from './authentication/Actions'\r\nimport { AuthState } from './authentication/Types'\r\n\r\nimport { ProfileAction } from './profile/Actions'\r\nimport { ProfileReducer } from './profile/Reducer'\r\nimport { ProfileState } from './profile/Types'\r\n\r\nimport { ClassesAction } from './classes/Actions';\r\nimport { classesReducer } from './classes/Reducer';\r\nimport { ClassesState } from './classes/Type';\r\n\r\nimport { UserAction } from './usermanage/Actions';\r\nimport { userReducer } from './usermanage/Reducer';\r\nimport { UserState } from './usermanage/Type';\r\n\r\nimport { StudentAction } from './student/Actions';\r\nimport { studentReducer } from './student/Reducer';\r\nimport { StudentState } from './student/Types';\r\n\r\nimport { TeacherAction } from './teacher/Actions';\r\nimport { TeacherReducer } from './teacher/Reducer';\r\nimport { TeacherState } from './teacher/Type';\r\n\r\nimport { DiaryAction } from './diary/Actions';\r\nimport { diaryReducer } from './diary/Reducer';\r\nimport { diaryState } from './diary/Types';\r\n\r\nimport { QuestionAction } from './question/Actions';\r\nimport { questionReducer } from './question/Reducer';\r\nimport { QuestionState } from './question/Types';\r\n\r\nexport interface RootState {\r\n    schools: SchoolsState;\r\n    login:AuthState;\r\n    subjects: SubjectsState;\r\n    profile: ProfileState;\r\n    classes: ClassesState;\r\n    userManage:UserState;\r\n    student:StudentState;\r\n    teacher:TeacherState;\r\n    diary:diaryState;\r\n    questionset:QuestionState;\r\n}\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n    login: authenticationReducer,\r\n    schools: schoolReducer,\r\n    subjects: SubjectReducer,\r\n    profile: ProfileReducer,\r\n    classes: classesReducer,\r\n    userManage:userReducer,\r\n    student:studentReducer,\r\n    teacher:TeacherReducer,\r\n    diary:diaryReducer,\r\n    questionset:questionReducer\r\n});\r\n\r\n\r\nexport type RootActions  = SchoolsAction & SubjectsAction & LoginAction & ClassesAction; // | CommentsAction | etc.\r\nexport type RootActionsType = UserAction & StudentAction & TeacherAction & ProfileAction & QuestionAction;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(reduxThunk as ThunkMiddleware<RootState, RootActions, RootActionsType>)\r\n    )\r\n);\r\n\r\nexport default createBrowserHistory();","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\Pages.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Reducer.ts",["1570"],"import { Reducer } from 'redux'\r\nimport { DiaryActionTypes, diaryState } from './Types';\r\n\r\nexport const initialState: diaryState = {\r\n    items: [],\r\n    loading: false,\r\n    isAuthenticated: null,\r\n    errors: [],\r\n    page: 1,\r\n    per_page: 10,\r\n    records: [],\r\n    total: 0,\r\n    studentList: [],\r\n    classList:[],\r\n    getImageURL:[],\r\n    getClassList:[],\r\n    getStudentList:[]\r\n}\r\n\r\nconst reducer: Reducer<diaryState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case DiaryActionTypes.ADD_DIARY:\r\n        case DiaryActionTypes.FETCH_ALLCLASS_LIST_ID:\r\n        case DiaryActionTypes.FETCH_DIARY:\r\n        case DiaryActionTypes.FETCH_DIARY_ID:\r\n        case DiaryActionTypes.FETCH_STUDENT_LIST_ID: \r\n        case DiaryActionTypes.ADD_DIARY_IMAGE:  \r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                gradelist:[],\r\n                getClassList:[],\r\n                getStudentList:[]\r\n            };\r\n        case DiaryActionTypes.ADD_DIARY_FAIL:\r\n        case DiaryActionTypes.DELETE_DIARY_FAIL:\r\n        case DiaryActionTypes.EDIT_DIARY_FAIL:\r\n        case DiaryActionTypes.FETCH_ALLCLASS_LIST_FAIL_ID:\r\n        case DiaryActionTypes.FETCH_DIARY_FAIL:\r\n        case DiaryActionTypes.FETCH_DIARY_FAIL_ID:\r\n        case DiaryActionTypes.FETCH_STUDENT_LIST_FAIL_ID:\r\n        case DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST: \r\n        case DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_FAIL: \r\n        case DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                getSearchStudentList: action.payload\r\n            };\r\n        case DiaryActionTypes.ADD_DIARY_IMAGE_FAIL: \r\n            return {\r\n                ...state,\r\n                errors: action.payload,\r\n                loading: false,\r\n                isAuthenticated: true\r\n            };\r\n\r\n        case DiaryActionTypes.ADD_DIARY_SUCCESS:            \r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload,\r\n                isAuthenticated: false,\r\n                modelPop: false\r\n            };\r\n        case DiaryActionTypes.ADD_DIARY_IMAGE_SUCCESS:\r\n        const { ImageURL } = action;\r\n        return { \r\n            ...state, \r\n            isAuthenticated: true,\r\n            loading: false,\r\n            items: action.payload,\r\n            getImageURL: ImageURL\r\n        }; \r\n        case DiaryActionTypes.FETCH_DIARY_SUCCESS:\r\n            let classList:any;\r\n            let studentList:any;\r\n            const { payload, records, per_page, page, total } = action;\r\n            if(records){\r\n                records.map((item:any)=>{                   \r\n                    classList = item.class_list;\r\n                    studentList = item.student_list;\r\n                })\r\n            }\r\n            if (page === 1) {\r\n                state.records = []\r\n            }\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                items: payload,\r\n                page: page,\r\n                per_page: per_page,\r\n                records: [...state.records, ...records],\r\n                total: total,\r\n                totalPage: Math.ceil(total / per_page),\r\n                isAuthenticated: false,\r\n                getClassList:classList,\r\n                getStudentList:studentList\r\n            }\r\n\r\n            case DiaryActionTypes.FETCH_ALLCLASS_LIST_SUCCESS_ID:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                gradelist: action.payload\r\n            };\r\n\r\n            case DiaryActionTypes.FETCH_STUDENT_LISTSUCCESS_ID:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                standardList: action.payload\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport { reducer as diaryReducer }","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Reducer.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Type.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\History.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Type.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Types.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Type.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\AuthRoute.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\services\\Constants.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\BaseLayout.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\router\\Roles.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotPassword.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolAdminProfile.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\OtpValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLoginPassword.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ForgotOTPCheck.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\unautheration.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\errorhandlers\\NotFoundPage.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\AddUserManage.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\EditUserManage.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddTeacher.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditTeacher.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\EditSubject.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\ViewSubjectDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\AddNewSubject.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\ViewSchoolDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\EditSchool.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\dashboard\\Index.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\AddNewSchool.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPassword.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserLogin.tsx",["1571","1572","1573","1574","1575","1576"],"import React, { Component } from 'react';\r\nimport { LoginUserType } from '../../store/authentication/Types'\r\nimport { connect } from 'react-redux';\r\nimport { CheckLoginUser } from '../../store/authentication/Actions'\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport history from '../../History';\r\nimport { object, string } from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport './Authentication.scss'\r\nimport { formValidationPatten, FormInvalidMessage, FormvalidationMessage, formValidationSize, formValidationSizeMsg } from '../../services/Constants';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport { RootState } from '../../store/Index';\r\n\r\nconst initialUserLogin: LoginUserType = {\r\n    username: ''\r\n}\r\n\r\nexport type LoginPostProps = {\r\n    CheckLoginUser: (LoginPostType: LoginUserType) => void;\r\n    loading: boolean\r\n};\r\n\r\nclass UserLogin extends Component<LoginPostProps> {   \r\n\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };\r\n        const loginUser = localStorage.getItem('username');\r\n        if(loginUser){\r\n            history.push(\"/login\");\r\n        } \r\n        const getToken = localStorage.getItem('token');\r\n        if(getToken){\r\n            history.push(\"/dashboard\");\r\n        }\r\n        return (\r\n            <div>\r\n            {/* <SpinnerLoader/> */}\r\n        <div className=\"limiter\">\r\n            <div className=\"container-login100\">\r\n                <div className=\"wrap-login100 p-3 pl-5 pr-5 formboxsize\">\r\n                    <Formik\r\n                       \r\n                        validate={(values:LoginUserType) => {\r\n                                const errors = {username: ''};\r\n                                var intRegex = formValidationPatten.phoneRegExp;\r\n                                if(values.username === '') {\r\n                                    errors.username = 'Please enter a valid email or phone number';\r\n                                } \r\n                                else if (!Number.isNaN(Number(values.username[0]))) {\r\n                                    if(intRegex.test(values.username)) {\r\n                                   if((values.username.length !== 10) || (!intRegex.test(values.username)))\r\n                                    {\r\n                                        errors.username = 'Please enter a valid phone number.';\r\n                                        return errors;\r\n                                    }\r\n                                \r\n                                    }\r\n                                }\r\n                                else{\r\n                                        var eml = formValidationPatten.emailPatten;       \r\n                                        if (eml.test(values.username) === false) {\r\n                                            errors.username = 'Please enter a valid email'\r\n                                            return errors\r\n                                        }\r\n                                }\r\n                                return {};\r\n                        }}\r\n                        initialValues={initialUserLogin} \r\n                        onSubmit={(values, formikHelpers) => {\r\n                            return new Promise(res => {\r\n                                this.props.CheckLoginUser(values);\r\n                            })\r\n\r\n                        }}>\r\n                        {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                            <Form>\r\n                                <span className=\"login100-form-logo logoprofileicon\">\r\n                                    <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                                <span className=\"login100-form-title p-b-20 p-t-20 mb-2 formtitlesize\">\r\n                                Login\r\n                                </span>\r\n                                <div className=\"wrap-input100 validate-input mb-0\" data-validate=\"Enter username\">\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        name=\"username\"\r\n                                        as={TextField}\r\n                                        placeholder=\"Email Id or Phone Number*\"\r\n                                        className=\"input100\"\r\n                                    />         \r\n                                    <span className=\"focus-input100\" data-placeholder=\"&#xf207;\"></span>    \r\n                                </div>                                     \r\n                                    {errors.username && touched.username ? (\r\n                                <div className=\"errorlogin\">{errors.username}</div>\r\n                                ) : null} \r\n                                <div className=\"container-login100-form-btn mt-5\">                                   \r\n                                    <div>\r\n                                        <Button className=\"login100-form-btn \" type=\"submit\" disabled={\r\n                                            isValidating ||\r\n                                            !!(errors.username && touched.username)\r\n                                        } >Next</Button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12 mt-3\">\r\n                                        <div className=\"text-left text-center\">\r\n                                            <Link to={'/forgot_password'} className=\"txt1\">\r\n                                            Forgot Password?\r\n                                            </Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div style={loadingTextCSS}><SpinnerLoader/></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({login}: RootState) => {\r\n    return {\r\n        loading: login.loading\r\n    };\r\n  };\r\n\r\nexport default connect(\r\n    mapStateToProps,{ CheckLoginUser }\r\n)(UserLogin);","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegister.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\UserRegisterPassword.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ViewClassesDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManagement.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\AddNewClasses.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\AddStudent.tsx",["1577","1578"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { RootState } from '../../store/Index';\r\nimport { addStudent } from '../../store/student/Actions';\r\nimport { fetchGradePost, fetchGradeStandardPost } from '../../store/classes/Actions';\r\nimport { studentInputTypes, StudentType } from '../../store/student/Types';\r\nimport { fetchParent } from '../../store/student/Actions';\r\nimport { Button, FormGroup, MenuItem } from '@material-ui/core';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { StudentValidation } from './StudentValidation';\r\nimport history from '../../History';\r\nimport ImageUpload  from './StudentImage';\r\n\r\nexport type OwnStudentFormProps = {\r\n    addStudent: (student: any) => void;\r\n    fetchGradePost:() => any;\r\n    fetchGradeStandardPost:() => any;\r\n    fetchParent: (getParent:any) => void;\r\n    loading: boolean;    \r\n    errorMessage: any;\r\n    ListGrade:any;\r\n    ListStandard:any;\r\n    getParentResponse:any;\r\n    checkParent:any;\r\n    getImageURL:any;\r\n};\r\n const initialAddValues: StudentType = {\r\n    phone_number: '',\r\n    email_id: '',\r\n    student_name:  '',\r\n    academic_year:'2020',\r\n    grade: '',\r\n    standard:'',\r\n    parent_firstname:  '',\r\n    parent_lastname:  '',\r\n    profile_picture: '',\r\n    user_id:'sdad'\r\n}\r\n\r\nexport class AddStudent extends React.Component<OwnStudentFormProps, studentInputTypes> {  \r\n    formik:any;\r\n    parentName:any;\r\n    constructor(props: any) {        \r\n        super(props);        \r\n        this.state = {\r\n            phone_number:'',\r\n            email_id:'',\r\n            student_name:'',\r\n            academic_year:'2020',\r\n            grade:'',\r\n            standard:'',\r\n            parent_firstname:'',\r\n            parent_lastname:'',\r\n            profile_picture:'',\r\n            user_id:'',\r\n            checkParentList:false\r\n        }  \r\n    }\r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n        this.props.fetchGradeStandardPost();        \r\n    }\r\n    findParantDetail= (e: any) => {\r\n        const { value } = e.target;\r\n        if(value.length === 10) {\r\n            const getPhone = {\r\n                phone_number:value\r\n            };\r\n            this.props.fetchParent(getPhone);          \r\n        }        \r\n    }\r\n   goBack(){\r\n    history.push(\"/student\");\r\n   }\r\n    componentDidUpdate(prevProps:any, prevState:any, snapshot:any) {  \r\n         // This is the function used to update old parent details\r\n        this.parentName = false;\r\n        if(this.props.getParentResponse.length === undefined){ \r\n            this.parentName = true;\r\n            this.formik.setFieldValue('email_id', this.props.getParentResponse.email_id)  \r\n            this.formik.setFieldValue('parent_firstname', this.props.getParentResponse.parent_firstname)\r\n            this.formik.setFieldValue('parent_lastname', this.props.getParentResponse.parent_lastname)\r\n        }\r\n        \r\n      }\r\n    render() {     \r\n        let getImage:any;\r\n        const { loading } = this.props;        \r\n        const loadingStudent = { display: loading ? \"block\" : \"none\" }; \r\n        if(this.props.getImageURL){\r\n            const getUrlpath = this.props.getImageURL.url;\r\n            if(getUrlpath){\r\n                getUrlpath.map((items:any)=>{\r\n                    getImage = items;\r\n                })\r\n            }\r\n        }     \r\n        return (\r\n            <div>\r\n                 <div className=\"page-wrapper\">\r\n                <div className=\"page-content-wrapper\">\r\n                    <div className=\"page-content pt-3\">\r\n                        <BreadCrumb \r\n                        titleName={['Student']} \r\n                        homeName={['Home']} \r\n                        url={['dashboard']} \r\n                        baseName={['Student']} \r\n                        baseURL={['student']} \r\n                        mainPageTitle={['Add Student']}/>\r\n                        <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                        <div className=\"card-box\">\r\n                        <div className=\"card-head\">\r\n                        <header>Add Student</header>\r\n                        <div className=\"tools\">\r\n                      </div>\r\n                        </div>\r\n                        <div className=\"card-body\">                          \r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-12\">                                                      \r\n                                <Formik\r\n                                    ref={node=>this.formik = node}\r\n                                    validationSchema={StudentValidation}\r\n                                    initialValues={initialAddValues}\r\n                                    onSubmit={(values:any, actions) => { \r\n                                        const postValue:any = {\r\n                                            phone_number: values.phone_number,\r\n                                            email_id: values.email_id,\r\n                                            student_name: values.student_name,\r\n                                            academic_year:'2020',\r\n                                            grade: values.grade,\r\n                                            standard:values.standard,\r\n                                            parent_firstname: values.parent_firstname,\r\n                                            parent_lastname: values.parent_lastname,\r\n                                            profile_picture: getImage,\r\n                                            user_id:'sdad'\r\n                                        }                                     \r\n                                        this.props.addStudent(postValue)\r\n                                    }}>\r\n                                        {({ values, errors, isSubmitting, isValidating, dirty, touched, setFieldValue }) => (\r\n                                        <Form>                                    \r\n                                            <div className=\"row\">\r\n                                            <div className=\"col-md-6 p-t-20\">\r\n                                            <div className=\"col-md-12 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                        <FormGroup>\r\n                                                            <Field\r\n                                                                label='Student Name*'\r\n                                                                type=\"text\"\r\n                                                                name=\"student_name\"\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input\"\r\n                                                                disabled={false}\r\n                                                            />\r\n                                                        </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-12 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                    <FormGroup>\r\n                                                    <Field \r\n                                                    label='Class*'\r\n                                                    name=\"grade\"  \r\n                                                    select\r\n                                                    component={TextField}        \r\n                                                    disabled={false}  \r\n                                                    >\r\n                                                        { this.props.ListGrade.map((item:any) =>(\r\n                                                                    <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Field> \r\n                                                    </FormGroup> \r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-12 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                    <FormGroup>\r\n                                                    <Field \r\n                                                    label='Section*'\r\n                                                    name=\"standard\"  \r\n                                                    select\r\n                                                    component={TextField}        \r\n                                                    disabled={false} \r\n                                                    fullwidth \r\n                                                    >\r\n                                                        { this.props.ListStandard.map((item:any) =>(\r\n                                                                    <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Field> \r\n                                                    </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"col-md-6 p-t-20\">\r\n                                                <div className=\"paddingleft\">\r\n                                                <ImageUpload postImage={getImage}/>\r\n                                                </div>                                            \r\n                                            </div>                                                \r\n                                            </div>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                    <FormGroup>\r\n                                                            <Field\r\n                                                                label='Phone Number*'\r\n                                                                type=\"text\"\r\n                                                                name=\"phone_number\"\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input\"\r\n                                                                disabled={false} \r\n                                                                onChange={(e:any) => {\r\n                                                                    setFieldValue('phone_number', e.target.value)\r\n                                                                    this.findParantDetail(e);\r\n                                                                  }}                                                           \r\n                                                            /> \r\n                                                    </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                        <FormGroup>\r\n                                                            <Field\r\n                                                                label='Email Id*'\r\n                                                                type=\"email\"\r\n                                                                name=\"email_id\"\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input\"\r\n                                                                disabled={this.parentName}\r\n                                                               \r\n                                                            />\r\n                                                        </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                        <FormGroup>                                                       \r\n                                                            <Field\r\n                                                                label='Parent First Name*'\r\n                                                                type=\"text\"\r\n                                                                name=\"parent_firstname\"\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input\"\r\n                                                                disabled={this.parentName}\r\n                                                            />\r\n                                                        </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6 p-t-20\">\r\n                                                    <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                        <FormGroup>                                                       \r\n                                                            <Field\r\n                                                                label='Parent Last Name*'\r\n                                                                type=\"text\"\r\n                                                                name=\"parent_lastname\"\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input\"\r\n                                                                disabled={this.parentName}\r\n                                                            />\r\n                                                        </FormGroup>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                                <Button className=\"btn btn-pink mr-1 ml-1\" disabled={!isValidating && !dirty} type=\"submit\">Submit</Button>\r\n                                                <Button className=\"btn btn-default mr-1 ml-1\" onClick={this.goBack}>Cancel</Button>\r\n                                            </div>\r\n        \r\n                                    </Form>\r\n                                    )}\r\n                                </Formik>\r\n                               \r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={loadingStudent}><SpinnerLoader/></div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any) => {\r\n    return {\r\n        ListGrade:state.classes.gradelist,\r\n        ListStandard:state.classes.standardList,\r\n        loading:state.student.loading,\r\n        errorMessage: state.student.errors,\r\n        getParentResponse:state.student.parentDetails,\r\n        checkParent:state.student.getParentStatus,\r\n        getImageURL:state.student.ImageURL\r\n    };\r\n  };\r\n\r\nexport default connect(mapStateToProps, { addStudent, fetchGradePost, fetchGradeStandardPost, fetchParent })(AddStudent)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\EditClasses.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\ViewStudentFullDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\ViewStudentDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\EditStudent.tsx",["1579"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { RootState } from '../../store/Index';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { StudentType } from '../../store/student/Types';\r\nimport { editStudent, fetchStudent } from '../../store/student/Actions';\r\nimport { SubjectForms } from './StudentForms';\r\nimport { fetchGradePost, fetchGradeStandardPost } from '../../store/classes/Actions';\r\n\r\ninterface OwnStudentEditProps extends RouteComponentProps<OwnPropsParams> {\r\n    editStudent: (student: any) => void;\r\n    fetchGradePost: () => any;\r\n    fetchGradeStandardPost: () => any;\r\n    fetchStudent: (id: number) => void;\r\n    loading: boolean;\r\n    errorMessage: any;\r\n    ListGrade: any;\r\n    ListStandard: any;\r\n    getStudentIt: any;\r\n    getStudentData: any;\r\n    getImageURL:any\r\n};\r\n\r\nexport class EditStudent extends React.Component<OwnStudentEditProps>  {\r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n        this.props.fetchGradeStandardPost();\r\n        this.props.fetchStudent(Number(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTextCSS = { display: loading ? \"block\" : \"none\" };\r\n        const getEditDetails = this.props.getStudentData;\r\n        let getEditData = getEditDetails.data;\r\n        let emailId:any\r\n        let getGrade:any;\r\n        let getStandard:any;\r\n        let studentclass_details:any;\r\n        let getID:any;\r\n        let phoneNo:any;\r\n        let studentName:any;\r\n        let parentFirstname:any;\r\n        let parentLastname:any;\r\n        let userId:any\r\n        let profilePicture:any\r\n        if(getEditData){\r\n            emailId = getEditData.email_id;\r\n            getID = getEditData.id;\r\n            phoneNo = getEditData.phone_number;\r\n            studentName = getEditData.student_name;\r\n            parentFirstname = getEditData.parent_firstname;\r\n            studentclass_details = getEditData.studentclass_details;\r\n            parentLastname = getEditData.parent_lastname;\r\n            userId = getEditData.user_id;\r\n            if(studentclass_details){\r\n                getGrade = studentclass_details[0].grade;\r\n                getStandard = studentclass_details[0].standard;\r\n                profilePicture = studentclass_details[0].profile_picture\r\n            }\r\n        }\r\n        const initialEditValues: StudentType = {\r\n            id:getID,\r\n            phone_number:phoneNo,\r\n            email_id:emailId,\r\n            student_name:studentName,\r\n            academic_year:'2020',\r\n            grade: getGrade,\r\n            standard: getStandard,\r\n            parent_firstname:parentFirstname,\r\n            parent_lastname:parentLastname,\r\n            profile_picture:profilePicture,\r\n            user_id:userId\r\n        };\r\n        let getUpdateImage:any\r\n        if(this.props.getImageURL){\r\n            const getUrlpath = this.props.getImageURL.url;\r\n            if(getUrlpath){\r\n                getUrlpath.map((items:any)=>{\r\n                    getUpdateImage = items;\r\n                })\r\n            }\r\n        } \r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb\r\n                                titleName={['Student']}\r\n                                homeName={['Home']}\r\n                                url={['dashboard']}\r\n                                baseName={['Student']}\r\n                                baseURL={['student']}\r\n                                mainPageTitle={['Edit Student']} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"card-box\">\r\n                                        <div className=\"card-head\">\r\n                                            <header>Edit Student</header>\r\n                                            <div className=\"tools\">\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            {getEditData && emailId && parentFirstname ?\r\n                                                <SubjectForms\r\n                                                    initialValues={initialEditValues}\r\n                                                    onSubmit={this.props.editStudent}\r\n                                                    gradeList={this.props.ListGrade}\r\n                                                    standardList={this.props.ListStandard}\r\n                                                    updateImage={getUpdateImage} />\r\n                                                : <SpinnerLoader />}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={loadingTextCSS}><SpinnerLoader /></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = ({ student, classes }: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n        getStudentIt: student.items[Number(ownProps.match.params.id)],\r\n        ListGrade: classes.gradelist,\r\n        ListStandard: classes.standardList,\r\n        loading: student.loading,\r\n        errorMessage: student.errors,\r\n        getStudentData: student.items,\r\n        getImageURL:student.ImageURL\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchGradePost, fetchGradeStandardPost, editStudent, fetchStudent })(EditStudent)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddSubject.tsx",["1580"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, MenuItem, Checkbox, TextField } from '@material-ui/core';\r\nimport { Field, Formik, FormikProps } from 'formik';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport { fetchGetAllClassList } from '../../store/diary/Actions';\r\nimport { TeacherSubjectMappingPost } from '../../store/teacher/Actions';\r\nimport { GetCorrectSubject } from '../../store/subject/Actions';\r\n\r\nexport type OwnTeacherFormProps = {\r\n    TeacherSubjectMappingPost: (teacherMap: any) => void;    \r\n    fetchGetAllClassList: () => any; // This is the service get all class list \r\n    GetCorrectSubject: () => any; \r\n    errorMessage?: any;\r\n    loading: boolean; \r\n    gradeStandard:any;\r\n    getTeacherViewData:any;\r\n    schoolIdDetails:any,\r\n    SubjectList:any\r\n};\r\nexport interface addSubject {\r\n    subjectName?:any,\r\n    classNameId?:any,\r\n    classInchanger?:any,\r\n    addClassMapping?:any\r\n}\r\nconst initialSubjectValues:addSubject = {\r\n    subjectName:''\r\n}\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nexport class AddSubject extends React.Component<OwnTeacherFormProps, addSubject> {\r\n    teacherId:any;\r\n    getClassList:any = [];\r\n    getSubject:any;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            addClassMapping:[]\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        this.props.fetchGetAllClassList(); // This is the service get all class list\r\n        this.props.GetCorrectSubject();\r\n    }\r\n    componentDidUpdate() {  \r\n        if(this.props.errorMessage.length === undefined) {\r\n            this.teacherId.setFieldValue('classNameId', this.props.errorMessage.teacher_id)\r\n        } \r\n    }\r\n    getSubjectDetails(getEvent:any, getValue:any) {\r\n        const { value } = getEvent.target;\r\n        this.getSubject = value;\r\n    }\r\n    getClassMappingList(getValue?:any){     \r\n        this.getClassList = [];\r\n        if(getValue){\r\n            getValue.map((items:any)=>{\r\n                const getClassList = String(items.id);  \r\n                this.getClassList.push(getClassList)                \r\n            })\r\n        }\r\n    }\r\n    \r\n  validateSubject(value:any) {\r\n        let error;\r\n        if (!value) {\r\n          error = 'Please select subject';\r\n        }\r\n        return error;\r\n      }\r\n onSubmit = (values: addSubject) => {\r\n    const teacherMap:any = {\r\n        academic_year: '2021',\r\n        teacher_id: this.props.getTeacherViewData.ldap_id,\r\n        subject_id: values.subjectName,\r\n        class_ids:this.getClassList\r\n    }\r\n    this.props.TeacherSubjectMappingPost(teacherMap)\r\n}\r\n    \r\n    render() {\r\n        const { loading } = this.props;\r\n        const loadingTeacher = { display: loading ? \"block\" : \"none\" };\r\n        const getClass:any = this.props.gradeStandard;\r\n        const getSubject:any = this.props.SubjectList;\r\n        let getSubjectCrnList:any;\r\n        if(getSubject){\r\n            getSubjectCrnList = getSubject.data;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                <div className=\"page-content-wrapper\">\r\n                    <div className=\"page-content pt-3\">\r\n                        <BreadCrumb \r\n                        titleName={['Teacher']} \r\n                        homeName={['Home']} \r\n                        url={['dashboard']} \r\n                        baseName={['Teacher']} \r\n                        baseURL={['teacher']} \r\n                        mainPageTitle={['Add Subject']}/>\r\n                        {getSubjectCrnList && getClass ?\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card-box\">\r\n                                <div className=\"card-head\">\r\n                                    <header>Add Subject</header>\r\n                                    <div className=\"tools\">\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <Formik\r\n                                                ref={node=>this.teacherId = node}\r\n                                                initialValues={initialSubjectValues}\r\n                                                onSubmit={this.onSubmit}\r\n                                                render={({\r\n                                                    values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit, setFieldValue\r\n                                                }: FormikProps<any>) => (\r\n                                                    <form onSubmit={handleSubmit} className=\"ui form\">  \r\n                                                    <div className=\"row\"> \r\n                                                        <div className=\"col-md-6 p-t-20\">\r\n                                                            <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                                <FormGroup>\r\n                                                            <Field\r\n                                                                label='Subject*'\r\n                                                                name=\"subjectName\"\r\n                                                                select\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input mt-1\"\r\n                                                                fullwidth=\"true\"\r\n                                                                disabled={false}\r\n                                                                validate={this.validateSubject} \r\n                                                                onChange={(e:any, value:any) => {\r\n                                                                    setFieldValue('subjectName', e.target.value)\r\n                                                                    this.getSubjectDetails(e, value)\r\n                                                                  }} \r\n                                                            >\r\n                                                                {getSubjectCrnList.map((item: any) => (\r\n                                                                    <MenuItem value={item.id}>{item.name}</MenuItem>\r\n                                                                ))}\r\n                                                            </Field>                                                      \r\n                                                                </FormGroup>\r\n                                                                {errors.subjectName && touched.subjectName && <div className=\"errorcolor\">{errors.subjectName}</div>}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"col-md-6 p-t-20\">\r\n                                                                <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                                <FormGroup>\r\n                                                                    {getClass?\r\n                                                                <Autocomplete\r\n                                                                    fullWidth\r\n                                                                    multiple\r\n                                                                    limitTags={2}\r\n                                                                    id=\"checkboxes-tags-demo\"\r\n                                                                    options={getClass}\r\n                                                                    disableCloseOnSelect\r\n                                                                    getOptionLabel={(option:any) => option.grade_standard}\r\n                                                                    onChange={(e, value) => {\r\n                                                                       this.getClassMappingList(value)\r\n                                                                    }}\r\n                                                                    renderOption={(option, { selected }) => (\r\n                                                                        <React.Fragment>\r\n                                                                        <Checkbox\r\n                                                                            icon={icon}\r\n                                                                            checkedIcon={checkedIcon}\r\n                                                                            style={{ marginRight: 8 }}\r\n                                                                            checked={selected}\r\n                                                                        />\r\n                                                                        {option.grade_standard}\r\n                                                                        </React.Fragment>\r\n                                                                    )}\r\n                                                                    className=\"mb-3 mt-1\"\r\n                                                                    renderInput={(params) => (\r\n                                                                        <TextField {...params} label=\"Search Class Name\" name=\"classNameId\" placeholder=\"Search Student\" />\r\n                                                                    )}\r\n                                                                    />\r\n                                                                    :null}                                                                    \r\n                                                                </FormGroup> \r\n                                                                {errors.classNameId && touched.classNameId && <div className=\"errorcolor\">{errors.classNameId}</div>}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>         \r\n                                                        <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                                            <Button className=\"btn btn-pink mr-1 ml-1\" type=\"submit\">Submit</Button>\r\n                                                            <Link to={`/teacher/${this.props.getTeacherViewData.ldap_id}`}><Button className=\"btn btn-default mr-1 ml-1\">Cancel</Button></Link>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                )}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                :<SpinnerLoader/>}\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n            <div style={loadingTeacher}><SpinnerLoader/></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any) => {\r\n    return {\r\n        loading:state.student.loading,\r\n        errorMessage: state.teacher.errors,\r\n        gradeStandard:state.diary.gradelist,\r\n        getTeacherViewData:state.teacher.GetTeacherProfile,\r\n        schoolIdDetails:state.profile.schoolId,\r\n        SubjectList:state.subjects.category\r\n    };\r\n  };\r\n\r\nexport default connect(mapStateToProps,{TeacherSubjectMappingPost, GetCorrectSubject, fetchGetAllClassList})(AddSubject)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddClassInCharge.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\TeacherView.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\ViewFullDetailTeacher.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditClassInCharge.tsx",["1581","1582","1583","1584","1585","1586","1587","1588"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, Checkbox, MenuItem } from '@material-ui/core';\r\nimport { Field, Form, Formik, FormikProps, FieldArray } from 'formik';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { fetchTeacherPostId, fetchTeachersMappingPost, fetchClassInchargeMappingPost } from '../../store/teacher/Actions';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport { EditClasslist } from '../../store/teacher/Type';\r\nimport { fetchGetAllClassList } from '../../store/diary/Actions';\r\nimport { TextField } from 'formik-material-ui';\r\n\r\ninterface OwnSubjectMappingProps extends RouteComponentProps<OwnPropsParams> {\r\n    TeacherClassMappingPost: (teacherMap: any) => void;\r\n    fetchGetAllClassList: () => any;\r\n    fetchTeacherPostId: (id: string) => void;\r\n    fetchClassInchargeMappingPost: (classIncharge: any) => void;\r\n    loading: boolean;\r\n    ClassNameList: any;\r\n    records: any;\r\n    page: number;\r\n    per_page: number;\r\n    totalPage: number;\r\n};\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nexport class EditClassInCharge extends Component<OwnSubjectMappingProps> {\r\n    getClassIncharge: any = [];\r\n    // state = {\r\n    //     EditClassMapping: {}\r\n    // }\r\n    componentDidMount(): void {\r\n        this.props.fetchTeacherPostId(String(this.props.match.params.id));\r\n        this.props.fetchGetAllClassList();\r\n        this.getTeacherDetails();\r\n\r\n    }\r\n    getTeacherDetails() {\r\n        if (this.props.match.params.id) {\r\n            const postValue: any = {\r\n                page_no: 1,\r\n                academic_year: 2021,\r\n                teacher_id: this.props.match.params.id\r\n            }\r\n            this.props.fetchClassInchargeMappingPost(postValue);\r\n        }\r\n    }\r\n    getClassInchargeList(getValue?: any) {\r\n        // this.getClassIncharge = [];\r\n        // if(getValue){\r\n        //     getValue.map((items:any)=>{\r\n        //         this.getClassIncharge.push(String(items.id))                \r\n        //     })\r\n        // }\r\n    }\r\n    onSubmitClassIncharge = (values: any) => {\r\n        const ClassIncharge: any = {\r\n            academic_year: '2021',\r\n            teacher_id: this.props.match.params.id,\r\n            class_incharge: this.getClassIncharge\r\n        }\r\n        this.props.TeacherClassMappingPost(ClassIncharge)\r\n    }\r\n\r\n    render() {\r\n        const getClass: any = this.props.ClassNameList;\r\n        let getClassName:any\r\n        let getClassNames:any\r\n        if(this.props.records){\r\n            this.props.records.forEach((items:any)=>{\r\n                    if (this.props.ClassNameList.length) {                            \r\n                        let getClassList =  this.props.ClassNameList.find((item:any)=> item.id === parseInt(items.class_id)) \r\n                        if(getClassList){\r\n                            items['class_name'] = getClassList.grade_standard;\r\n                        }                          \r\n                      } \r\n            })\r\n        }\r\n        if(this.props.records){\r\n            getClassNames = this.props.records[0]['class_name'];\r\n        }\r\n        const initialEditClassValues:EditClasslist = {\r\n            ClassList:getClassNames\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb\r\n                                titleName={['Teacher']}\r\n                                homeName={['Home']}\r\n                                url={['dashboard']}\r\n                                baseName={['Teacher']}\r\n                                baseURL={['teacher']}\r\n                                mainPageTitle={['Edit Mapping Subject']} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"card-box\">\r\n                                        <div className=\"card-head\">\r\n                                            <header>Edit Class Incharge Mapping</header>\r\n                                            <div className=\"tools\">\r\n                                            </div>\r\n                                        </div>\r\n                                        { getClassNames ?\r\n                                        <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <Formik\r\n                                                initialValues={initialEditClassValues}\r\n                                                onSubmit={this.onSubmitClassIncharge}\r\n                                                render={({\r\n                                                    values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit, setFieldValue\r\n                                                }: FormikProps<EditClasslist>) => (\r\n                                                    <form onSubmit={handleSubmit} className=\"ui form\">  \r\n                                                    <div className=\"row\">      \r\n                                                            <div className=\"col-md-12 p-t-20\">\r\n                                                                <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                                <FormGroup>\r\n                                                                {getClass?\r\n                                                                <FormGroup>\r\n                                                                <Field \r\n                                                                label='Section*'\r\n                                                                name=\"ClassList\"  \r\n                                                                select\r\n                                                                component={TextField}        \r\n                                                                disabled={false}  \r\n                                                                >\r\n                                                                    {\r\n                                                                        getClass.map( (item:any) => (\r\n                                                                            <MenuItem value={item.grade_standard}>{item.grade_standard}</MenuItem>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                    \r\n                                                                </Field>                         \r\n                                                                </FormGroup>\r\n                                                                 \r\n                                                                    :null}\r\n                                                                </FormGroup> \r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>         \r\n                                                        <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                                            <Button className=\"btn btn-pink mr-1 ml-1\" type=\"submit\">Submit</Button>\r\n                                                            <Link to={`/teacher/${this.props.match.params.id}`}><Button className=\"btn btn-default mr-1 ml-1\">Cancel</Button></Link>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                )}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                :null}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = (state: any, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n        getTeacherViewId: state.teacher.items[Number(ownProps.match.params.id)],\r\n        loading: state.teacher.loading,\r\n        errorMessage: state.teacher.errors,\r\n        getTeacherid: state.teacher.TeacherId,\r\n        records: state.teacher.classRecords,\r\n        ClassNameList: state.diary.gradelist\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchGetAllClassList, fetchTeacherPostId, fetchClassInchargeMappingPost })(EditClassInCharge)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\diary\\ViewDiaryDetails.tsx",["1589","1590","1591","1592","1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608"],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\EditTeacherSubject.tsx",["1609"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, MenuItem, Checkbox, TextField } from '@material-ui/core';\r\nimport { fetchTeacherPostId, fetchTeachersMappingPost } from '../../store/teacher/Actions';\r\nimport { Field, Formik, FormikProps } from 'formik';\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport { fetchGetAllClassList } from '../../store/diary/Actions';\r\nimport { TeacherEditSubjectMappingPost } from '../../store/teacher/Actions';\r\nimport { GetCorrectSubject } from '../../store/subject/Actions';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\ninterface OwnTeacherSubjectFormProps extends RouteComponentProps<OwnPropsParams> {\r\n    TeacherEditSubjectMappingPost: (teacherMap: any) => void;    \r\n    fetchTeachersMappingPost: (teacherDetails: any) => void;\r\n    fetchGetAllClassList: () => any; // This is the service get all class list \r\n    GetCorrectSubject: () => any; \r\n    errorMessage?: any;\r\n    loading: boolean; \r\n    gradeStandard:any;\r\n    getTeacherViewData:any;\r\n    schoolIdDetails:any,\r\n    SubjectList:any\r\n    getTeacherid: any;\r\n    page: number;\r\n    per_page: number;\r\n    totalPage: number;\r\n    records: any;\r\n    total: number;\r\n};\r\nexport interface EditSubject {\r\n    subjectName?:any,\r\n    classNameId?:any,\r\n    classInchanger?:any,\r\n    addClassMapping?:any\r\n}\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nexport class EditTeacherSubject extends Component<OwnTeacherSubjectFormProps, EditSubject> {\r\n    teacherId:any;\r\n    getSubject:any;\r\n    getClassList:any = [];\r\n    updateClassList:any = [];\r\n    updateSubject:any;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            addClassMapping:[]\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        this.props.fetchGetAllClassList();\r\n        this.props.GetCorrectSubject();\r\n        this.getTeacherDetails();\r\n    }\r\n    getTeacherDetails() {\r\n        if (this.props.getTeacherid) {\r\n            const postValue: any = {\r\n                page_no: 1,\r\n                academic_year: 2021,\r\n                teacher_id: this.props.match.params.id\r\n            }\r\n            this.props.fetchTeachersMappingPost(postValue)\r\n        }\r\n    }\r\n    getSubjectDetails(getEvent:any, getValue:any) {\r\n        const { value } = getEvent.target;\r\n        this.getSubject = value;\r\n    }\r\n    getClassMappingList(getValue?:any){     \r\n        this.getClassList = [];\r\n        if(getValue){\r\n            getValue.map((items:any)=>{\r\n                const getClassList = String(items.id);  \r\n                this.getClassList.push(getClassList)                \r\n            })\r\n        }\r\n    }\r\n    validateSubject(value:any) {\r\n        let error;\r\n        if (!value) {\r\n          error = 'Please select subject';\r\n        }\r\n        return error;\r\n      }\r\n    onSubmit = (values: any) => {\r\n        const teacherMap:any = {\r\n            academic_year: '2021',\r\n            teacher_id: this.props.getTeacherViewData.ldap_id,\r\n            subject_id: values.subjectName,\r\n            class_ids:this.getClassList\r\n        }\r\n        this.props.TeacherEditSubjectMappingPost(teacherMap);\r\n    }\r\n    render() {\r\n        let getClassData:any = [];\r\n        const { loading } = this.props;\r\n        const loadingSubject = { display: loading ? \"block\" : \"none\" };\r\n        const getClassList:any = this.props.gradeStandard;\r\n        const getSubjectList:any = this.props.SubjectList;\r\n        let getSubjectCrnList:any;\r\n        if(getSubjectList){\r\n            getSubjectCrnList = getSubjectList.data;\r\n        }\r\n        const initialEditSubjectValues:EditSubject = {\r\n            subjectName:''\r\n        }\r\n        return (\r\n            <div>\r\n                 <div className=\"page-wrapper\">\r\n                <div className=\"page-content-wrapper\">\r\n                    <div className=\"page-content pt-3\">\r\n                        <BreadCrumb \r\n                        titleName={['Teacher']} \r\n                        homeName={['Home']} \r\n                        url={['dashboard']} \r\n                        baseName={['Teacher']} \r\n                        baseURL={['teacher']} \r\n                        mainPageTitle={['Edit Subject']}/>\r\n                {getSubjectCrnList && getClassList ?\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card-box\">\r\n                                <div className=\"card-head\">\r\n                                    <header>Edit Subject</header>\r\n                                    <div className=\"tools\">\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <Formik\r\n                                                ref={node=>this.teacherId = node}\r\n                                                initialValues={initialEditSubjectValues}\r\n                                                onSubmit={this.onSubmit}\r\n                                                render={({\r\n                                                    values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit, setFieldValue\r\n                                                }: FormikProps<any>) => (\r\n                                                    <form onSubmit={handleSubmit} className=\"ui form\">  \r\n                                                    <div className=\"row\"> \r\n                                                        <div className=\"col-md-6 p-t-20\">\r\n                                                            <div className=\"mdl-textfield mdl-js-textfield  mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                            <FormGroup>\r\n                                                            <Field\r\n                                                                label='Subject*'\r\n                                                                name=\"subjectName\"\r\n                                                                select\r\n                                                                component={TextField}\r\n                                                                className=\"textfield__input mt-1\"\r\n                                                                fullwidth=\"true\"\r\n                                                                disabled={false}\r\n                                                            >\r\n                                                                {getSubjectCrnList.map((item: any) => (\r\n                                                                    <MenuItem value={item.name}>{item.name}</MenuItem>\r\n                                                                ))}\r\n                                                            </Field>\r\n                                                        </FormGroup>\r\n                                                                {errors.subjectName && touched.subjectName && <div className=\"errorcolor\">{errors.subjectName}</div>}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"col-md-6 p-t-20\">\r\n                                                                <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label txt-full-width pt-0\">\r\n                                                                <FormGroup>\r\n                                                                    {getClassList?\r\n                                                                <Autocomplete\r\n                                                                    fullWidth\r\n                                                                    multiple\r\n                                                                    limitTags={2}\r\n                                                                    id=\"checkboxes-tags-demo\"\r\n                                                                    options={getClassList}\r\n                                                                    disableCloseOnSelect                                                                    \r\n                                                                    getOptionLabel={(option:any) => option.grade_standard}\r\n                                                                    defaultValue={getClassData.id}\r\n                                                                    onChange={(e, value) => {\r\n                                                                       this.getClassMappingList(value)\r\n                                                                    }}\r\n                                                                    renderOption={(option, { selected }) => (\r\n                                                                        <React.Fragment>\r\n                                                                        <Checkbox\r\n                                                                            icon={icon}\r\n                                                                            checkedIcon={checkedIcon}\r\n                                                                            style={{ marginRight: 8 }}\r\n                                                                            checked={selected}\r\n                                                                        />\r\n                                                                        {option.grade_standard}\r\n                                                                        </React.Fragment>\r\n                                                                    )}\r\n                                                                    className=\"mb-3 mt-1\"\r\n                                                                    renderInput={(params) => (\r\n                                                                        <TextField {...params} label=\"Search Class Name\" name=\"classNameId\" placeholder=\"Search Student\" />\r\n                                                                    )}\r\n                                                                    />\r\n                                                                    :null}                                                                    \r\n                                                                </FormGroup> \r\n                                                                {errors.classNameId && touched.classNameId && <div className=\"errorcolor\">{errors.classNameId}</div>}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>         \r\n                                                        <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                                            <Button className=\"btn btn-pink mr-1 ml-1\" type=\"submit\">Submit</Button>\r\n                                                            <Link to={`/teacher/${this.props.getTeacherViewData.ldap_id}`}><Button className=\"btn btn-default mr-1 ml-1\">Cancel</Button></Link>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                )}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                :<SpinnerLoader/>}\r\n\r\n                 <div style={loadingSubject}><SpinnerLoader/></div>\r\n                 </div>\r\n                 </div>\r\n                 </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\n\r\nconst mapStateToProps = (state: any, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n        getTeacherViewId: state.teacher.items[Number(ownProps.match.params.id)],\r\n        loading: state.teacher.loading,\r\n        errorMessage: state.teacher.errors,\r\n        gradeStandard:state.diary.gradelist,\r\n        getTeacherViewData: state.teacher.GetTeacherProfile,\r\n        getTeacherid: state.teacher.TeacherId,\r\n        records: state.teacher.records,\r\n        ClassNameList: state.diary.gradelist,\r\n        SubjectList: state.subjects.category\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchTeacherPostId, fetchTeachersMappingPost, fetchGetAllClassList, GetCorrectSubject, TeacherEditSubjectMappingPost })(EditTeacherSubject)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\viewQuestionDetails.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\AddQuestion.tsx",["1610"],"import React, { Component } from 'react'\r\nimport { Button, MenuItem, FormGroup } from '@material-ui/core';\r\nimport { connect } from 'react-redux'\r\nimport BreadCrumb from '../../components/BreadCrumb'\r\nimport { fetchGradePost } from '../../store/classes/Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { Field, Formik, Form, FieldArray } from 'formik';\r\nimport { GetCorrectSubject } from '../../store/subject/Actions';\r\nimport { TextField } from 'formik-material-ui';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport { addQuestion } from '../../store/question/Actions';\r\nimport { validationSchemaTest } from './QuestionValidation';\r\n\r\nexport type OwnQuestSetProps = {\r\n    loading: boolean;\r\n    addQuestion:(postQuestion:any) => void;\r\n    fetchGradePost: () => any;\r\n    GetCorrectSubject: () => any;  \r\n    getClassList:any;\r\n    getSubjectlist:any;\r\n    getProfile:any;\r\n}\r\nconst initialValues:any = {\r\n    question_name: '',\r\n    select_class: '',\r\n    select_subject: '',\r\n    questionlist: [\r\n        {\r\n            question: '',\r\n            add_topics: '',\r\n            question_name_A:'',\r\n            question_name_B:'',\r\n            question_name_C:'',\r\n            question_name_D:'',\r\n            answer:''\r\n        }\r\n\r\n    ]\r\n};\r\nexport class AddQuestion extends Component<OwnQuestSetProps> {  \r\n    getQuestionList:any = []; \r\n    componentDidMount(): void {\r\n        this.props.fetchGradePost();\r\n        this.props.GetCorrectSubject();\r\n    }\r\n  \r\n    render() {\r\n        const getProfile = this.props.getProfile;\r\n        const getSubject:any = this.props.getSubjectlist;\r\n        let SubjectList:any;\r\n        let Profiledata:any;\r\n        if(getSubject) {\r\n            SubjectList = getSubject.data;\r\n        }\r\n        if(getProfile){\r\n            Profiledata = getProfile.items.data;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                        <BreadCrumb\r\n                                titleName={['Question']}\r\n                                homeName={['Home']}\r\n                                url={['dashboard']}\r\n                                mainPageTitle={['Add Question']}\r\n                                baseName={['Question']}\r\n                                baseURL={['question']} />\r\n                                {SubjectList && this.props.getClassList && Profiledata ?\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            <Formik\r\n                                            initialValues={initialValues}\r\n                                            validationSchema={validationSchemaTest}\r\n                                            onSubmit={(values, actions) => {\r\n                                                let getQuestionValue:any                                                \r\n                                                if(values){\r\n                                                    values.questionlist.map((item:any, index:any)=>{\r\n                                                        let submitValue:any = [];\r\n                                                        let optionA:any;\r\n                                                        let optionB:any;\r\n                                                        let optionC:any;\r\n                                                        let optionD:any;\r\n                                                        if( item.answer === 'A'){\r\n                                                            optionA = true; optionB = false; optionC = false; optionD = false;\r\n                                                        } else if( item.answer === 'B'){\r\n                                                            optionA = false; optionB = true; optionC = false; optionD = false;\r\n                                                        } else if( item.answer === 'C'){\r\n                                                            optionA = false; optionB = false; optionC = true; optionD = false;\r\n                                                        } else if( item.answer === 'D'){\r\n                                                        optionA = false; optionB = false; optionC = false; optionD = true;\r\n                                                        }\r\n\r\n                                                        submitValue =   \r\n                                                              {\r\n                                                                serial_no: index + 1,\r\n                                                                question: item.question,\r\n                                                                question_picture: '',\r\n                                                                answers: [\r\n                                                                  {\r\n                                                                    serial_no: 'A',\r\n                                                                    choice: item.question_name_A,\r\n                                                                    choice_url: '',\r\n                                                                    is_correct_ans: optionA\r\n                                                                  },\r\n                                                                  {\r\n                                                                    serial_no: 'B',\r\n                                                                    choice: item.question_name_B,\r\n                                                                    choice_url: '',\r\n                                                                    is_correct_ans: optionB\r\n                                                                  },\r\n                                                                  {\r\n                                                                    serial_no: 'C',\r\n                                                                    choice: item.question_name_C,\r\n                                                                    choice_url: '',\r\n                                                                    is_correct_ans: optionC\r\n                                                                  },\r\n                                                                  {\r\n                                                                    serial_no: 'D',\r\n                                                                    choice: item.question_name_D,\r\n                                                                    choice_url: '',\r\n                                                                    is_correct_ans: optionD\r\n                                                                  }\r\n                                                                ]\r\n                                                              }\r\n                                                            \r\n                                                        this.getQuestionList.push(submitValue);\r\n                                                    })\r\n\r\n                                                    if(this.getQuestionList.length > 0) {\r\n                                                        getQuestionValue =  {\r\n                                                            school_id: Profiledata.school_id,\r\n                                                            academic_year: '2021',\r\n                                                            grade_id: values.select_class,\r\n                                                            subject_id: values.select_subject,\r\n                                                            question_name: values.question_name,\r\n                                                            posted_by:  Profiledata.firstname,\r\n                                                            add_topics:'',\r\n                                                            questions: this.getQuestionList\r\n                                                          }\r\n                                                    this.props.addQuestion(getQuestionValue);\r\n                                                    }\r\n                                                }\r\n                                             \r\n                                            }}>\r\n                                            {({ values, errors, isSubmitting, isValidating, dirty, touched, handleReset, handleSubmit }) => (\r\n                                                <Form>\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-md-4\">\r\n                                                            <FormGroup>\r\n                                                                <Field\r\n                                                                    label='Enter question set name*'\r\n                                                                    type=\"text\"\r\n                                                                    name=\"question_name\"\r\n                                                                    component={TextField}\r\n                                                                    className=\"textfield__input\"\r\n                                                                    disabled={false}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </div>\r\n                                                        <div className=\"col-md-4\">\r\n                                                            <FormGroup className=\"w-100 mb-4\">\r\n                                                                <Field\r\n                                                                    label='Select Class*'\r\n                                                                    name=\"select_class\"\r\n                                                                    select\r\n                                                                    component={TextField}\r\n                                                                    disabled={false}\r\n                                                                    fullwidth\r\n                                                                >\r\n                                                                     { this.props.getClassList.map((item:any) =>(\r\n                                                                    <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </Field>\r\n                                                            </FormGroup>\r\n                                                        </div>\r\n                                                        <div className=\"col-md-4\">\r\n                                                            <FormGroup className=\"w-100 mb-4\">\r\n                                                                <Field\r\n                                                                    label='Select Subject*'\r\n                                                                    name=\"select_subject\"\r\n                                                                    select\r\n                                                                    component={TextField}\r\n                                                                    disabled={false}\r\n                                                                    fullwidth\r\n                                                                >\r\n                                                                     { SubjectList.map((item:any) =>(\r\n                                                                    <MenuItem value={item.name}>{item.name}</MenuItem>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </Field>\r\n                                                            </FormGroup>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <FieldArray\r\n                                                        name=\"questionlist\"\r\n                                                        render={({ insert, remove, push }) => (\r\n                                                            <>\r\n                                                                        {values.questionlist.length > 0 &&\r\n                                                                            values.questionlist.map((friend:any, index:any) => (\r\n                                                                                <div className=\"row\" key={index}>\r\n                                                                            <div className=\"col-md-12\">\r\n                                                                                <div className=\"card-box mt-4\">\r\n                                                                                    <div className=\"card-body  pb-5\">\r\n                                                                                    <div className=\"col-md-12 text-right \">\r\n                                                                                        <button className=\"\"\r\n                                                                                            type=\"button\"                  \r\n                                                                                            onClick={() => remove(index)}\r\n                                                                                        >\r\n                                                                                        <span className=\"deleteIcon\"> \r\n                                                                                            <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n                                                                                        </span>\r\n                                                                                        </button>\r\n                                                                                    </div>\r\n                                                                                    \r\n                                                                                    <div className=\"d-flex mt-1 w-100\">\r\n                                                                                        <div className=\"mr-3 mt-4\">{index + 1}.</div>\r\n                                                                                        <FormGroup className=\"w-100\">\r\n                                                                                            <Field\r\n                                                                                                fullwidth\r\n                                                                                                label='Write Question*'\r\n                                                                                                type=\"text\"\r\n                                                                                                name={`questionlist.${index}.question`}\r\n                                                                                                component={TextField}\r\n                                                                                                className=\"textfield__input\"\r\n                                                                                                disabled={false}\r\n                                                                                            />\r\n                                                                                        </FormGroup>\r\n                                                                                    </div>\r\n                                                                                    <div className=\"col-md-12 pr-0 mt-3\">\r\n                                                                                        <FormGroup className=\"w-100\">\r\n                                                                                            <Field\r\n                                                                                                label='Add Topics*'\r\n                                                                                                type=\"text\"\r\n                                                                                                name={`questionlist.${index}.add_topics`}\r\n                                                                                                component={TextField}\r\n                                                                                                className=\"textfield__input\"\r\n                                                                                                disabled={false}\r\n                                                                                            />\r\n                                                                                        </FormGroup>\r\n                                                                                    </div>  \r\n                                                                                <div className=\"row\">\r\n                                                                                <div className=\"col-md-6\">\r\n                                                                                    <div className=\"col-md-12\">\r\n                                                                                        <div className=\"d-flex mt-3\">\r\n                                                                                        <div className=\"mt-4 mr-3 ml-2\">\r\n                                                                                        <Field type=\"radio\" name={`questionlist.${index}.answer`} value=\"A\"/>\r\n                                                                                        </div>\r\n                                                                                        <div className=\"mr-3 mt-4\">A.</div>\r\n                                                                                        <FormGroup className=\"w-100\">\r\n                                                                                        <Field\r\n                                                                                            label='Write Option A*'\r\n                                                                                            type=\"text\"\r\n                                                                                            name={`questionlist.${index}.question_name_A`}\r\n                                                                                            component={TextField}\r\n                                                                                            className=\"textfield__input\"\r\n                                                                                            disabled={false}\r\n                                                                                        />\r\n                                                                                        </FormGroup> \r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                    <div className=\"col-md-12\">\r\n                                                                                    <div className=\"d-flex mt-3\">\r\n                                                                                    <div className=\"mt-4 mr-3 ml-2\">\r\n                                                                                    <Field type=\"radio\" name={`questionlist.${index}.answer`} value=\"B\" />\r\n                                                                                    </div>\r\n                                                                                    <div className=\"mr-3 mt-4\">B.</div>\r\n                                                                                    <FormGroup className=\"w-100\">\r\n                                                                                    <Field\r\n                                                                                        label='Write Option B*'\r\n                                                                                        type=\"text\"\r\n                                                                                        name={`questionlist.${index}.question_name_B`}\r\n                                                                                        component={TextField}\r\n                                                                                        className=\"textfield__input\"\r\n                                                                                        disabled={false}\r\n                                                                                    />\r\n                                                                                    </FormGroup>  \r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                                </div>\r\n                                                                                <div className=\"col-md-6\">\r\n                                                                                    <div className=\"col-md-12\">\r\n                                                                                    <div className=\"d-flex mt-3\">\r\n                                                                                    <div className=\"mt-4 mr-3 ml-2\">\r\n                                                                                    <Field type=\"radio\" name={`questionlist.${index}.answer`} value=\"C\" />\r\n                                                                                    </div>\r\n                                                                                    <div className=\"mr-3 mt-4\">C.</div>\r\n                                                                                    <FormGroup className=\"w-100\">\r\n                                                                                    <Field\r\n                                                                                        label='Write Option C*'\r\n                                                                                        type=\"text\"\r\n                                                                                        name={`questionlist.${index}.question_name_C`}\r\n                                                                                        component={TextField}\r\n                                                                                        className=\"textfield__input\"\r\n                                                                                        disabled={false}\r\n                                                                                    />\r\n                                                                                    </FormGroup>\r\n                                                                                    </div>\r\n                                                                                 </div>\r\n                                                                                <div className=\"col-md-12\">\r\n                                                                                <div className=\"d-flex mt-3\">\r\n                                                                                    <div className=\"mt-4 mr-3 ml-2\">\r\n                                                                                    <Field type=\"radio\" name={`questionlist.${index}.answer`} value=\"D\" />\r\n                                                                                    </div>\r\n                                                                                    <div className=\"mr-3 mt-4\">D.</div>\r\n                                                                                    <FormGroup className=\"w-100\">\r\n                                                                                    <Field\r\n                                                                                        fullwidth\r\n                                                                                        label='Write Option D*'\r\n                                                                                        type=\"text\"\r\n                                                                                        name={`questionlist.${index}.question_name_D`}\r\n                                                                                        component={TextField}\r\n                                                                                        className=\"textfield__input\"\r\n                                                                                        disabled={false}\r\n                                                                                    />\r\n                                                                                    </FormGroup>\r\n                                                                                    \r\n                                                                                </div>\r\n                                                                                    </div>\r\n                                                                                </div>                                                                                   \r\n                                                                                </div>   \r\n                                                                               \r\n                                                                                   \r\n                                                                                </div>\r\n                                                                                  </div>\r\n                                                                                  </div>\r\n                                                                              </div>\r\n                                                                              \r\n                                                                            ))}\r\n                                                                            <div className=\"col-md-12 text-center\">\r\n                                                                            <Link to={'#'} className=\"mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored margin-right-10\" data-upgraded=\",MaterialButton\" onClick={() => push({question: \"\", add_topics: \"\", question_name_A:\"\", question_name_B:\"\", question_name_C:\"\", question_name_D:\"\" })}>\r\n                                                                                <i className=\"material-icons\">add</i>\r\n                                                                            </Link>\r\n                                                                            </div>\r\n                                                                       \r\n                                                        </>    \r\n                                                        )}\r\n                                                    />\r\n                                                    <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                                        <Button\r\n                                                            className=\"btn btn-pink mr-1 ml-1\"\r\n                                                            type=\"submit\">Submit</Button>\r\n                                                        <Link to={'/question'}>\r\n                                                            <Button\r\n                                                                className=\"btn btn-default mr-1 ml-1 \">Cancel</Button>\r\n                                                        </Link>\r\n                                                    </div>\r\n                                                </Form>\r\n                                            )}\r\n                                        </Formik>\r\n                            </div>\r\n                        </div>\r\n                        : <SpinnerLoader/>}\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:any) => {   \r\n    return{\r\n        loading:state.classes.loading,\r\n        getClassList:state.classes.gradelist,\r\n        getSubjectlist:state.subjects.category,\r\n        getProfile:state.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchGradePost, GetCorrectSubject, addQuestion})(AddQuestion)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\ViewQuestion.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\AddMoreQuestion.tsx",["1611"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button, MenuItem, FormGroup } from '@material-ui/core';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader'\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { RootState } from '../../store/Index';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { fetchQuestionSet } from '../../store/question/Actions';\r\nimport { fetchGradePost } from '../../store/classes/Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { GetCorrectSubject } from '../../store/subject/Actions';\r\nimport { TextField } from 'formik-material-ui';\r\nimport { AddMoreQuestionPost } from '../../store/question/Actions';\r\nimport { QuestionValidation } from './QuestionValidation';\r\n\r\ninterface OwnStudentEditProps extends RouteComponentProps<OwnPropsParams> {\r\n    fetchQuestionSet:(id:number) => void;\r\n    fetchGradePost: () => any;\r\n    GetCorrectSubject: () => any; \r\n    AddMoreQuestionPost:(addMoreQut:any) => void;\r\n    postQuestionId:any;\r\n    addNewQuestion:any;\r\n    loading: boolean;     \r\n    getClassList:any;\r\n    getSubjectlist:any;\r\n    getProfile:any;\r\n};\r\n\r\nexport class AddMoreQuestion extends Component<OwnStudentEditProps> {\r\n    componentDidMount(): void {\r\n        this.props.fetchQuestionSet(Number(this.props.match.params.id));\r\n        this.props.fetchGradePost();\r\n        this.props.GetCorrectSubject();\r\n    }\r\n\r\n    render() {\r\n        const getProfile = this.props.getProfile;\r\n        const getSubject:any = this.props.getSubjectlist;\r\n        let SubjectList:any;\r\n        let Profiledata:any;\r\n        let getquestionNo:any;\r\n        let getQuestions:any;\r\n        if(getSubject) {\r\n            SubjectList = getSubject.data;\r\n        }\r\n        if(getProfile){\r\n            Profiledata = getProfile.items.data;\r\n        }\r\n        let initialQuestionValues: any;\r\n        if(this.props.addNewQuestion){\r\n            getQuestions = this.props.addNewQuestion.questions;\r\n            \r\n            if(getQuestions){\r\n                if(getQuestions.length > 0){\r\n                    this.props.addNewQuestion.questions.map((items:any) =>{  \r\n                        getquestionNo = Number(items.serial_no);\r\n                    })\r\n                   \r\n                }\r\n            }\r\n            initialQuestionValues = {\r\n                select_class: this.props.addNewQuestion.grade_id,\r\n                select_subject: this.props.addNewQuestion.subject_id,\r\n                question_name: this.props.addNewQuestion.question_name,\r\n                question:'',\r\n                add_topics:'',\r\n                question_name_A:'',\r\n                question_name_B:'',\r\n                question_name_C:'',\r\n                question_name_D:'',\r\n                answer:''\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n               <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                        <BreadCrumb\r\n                                titleName={['Question']}\r\n                                homeName={['Home']}\r\n                                url={['dashboard']}\r\n                                mainPageTitle={['Add Question']}\r\n                                baseName={['Question']}\r\n                                baseURL={['question']} />\r\n                    { SubjectList && this.props.addNewQuestion && this.props.getClassList && getQuestions ?\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            <Formik\r\n                            validationSchema={QuestionValidation}\r\n                            initialValues={initialQuestionValues} onSubmit={(values, actions) => { \r\n                                let optionA:any;\r\n                                let optionB:any;\r\n                                let optionC:any;\r\n                                let optionD:any;\r\n                                if( values.answer === 'A'){\r\n                                    optionA = true; optionB = false; optionC = false; optionD = false;\r\n                                } else if( values.answer === 'B'){\r\n                                    optionA = false; optionB = true; optionC = false; optionD = false;\r\n                                } else if( values.answer === 'C'){\r\n                                    optionA = false; optionB = false; optionC = true; optionD = false;\r\n                                } else if( values.answer === 'D'){\r\n                                   optionA = false; optionB = false; optionC = false; optionD = true;\r\n                                }                             \r\n                               const getQuestionValue:any =  {\r\n                                id:Number(this.props.match.params.id),\r\n                                school_id: Profiledata.school_id,\r\n                                academic_year: '2021',\r\n                                grade_id: values.select_class,\r\n                                subject_id: values.select_subject,\r\n                                question_name: values.question_name,\r\n                                posted_by:  Profiledata.firstname,\r\n                                add_topics:values.add_topics,\r\n                                questions: [\r\n                                  {\r\n                                    serial_no: getquestionNo + 1,\r\n                                    question: values.question,\r\n                                    question_picture: '',\r\n                                    answers: [\r\n                                      {\r\n                                        serial_no: 'A',\r\n                                        choice: values.question_name_A,\r\n                                        choice_url: '',\r\n                                        is_correct_ans: optionA\r\n                                      },\r\n                                      {\r\n                                        serial_no: 'B',\r\n                                        choice: values.question_name_B,\r\n                                        choice_url: '',\r\n                                        is_correct_ans: optionB\r\n                                      },\r\n                                      {\r\n                                        serial_no: 'C',\r\n                                        choice: values.question_name_C,\r\n                                        choice_url: '',\r\n                                        is_correct_ans: optionC\r\n                                      },\r\n                                      {\r\n                                        serial_no: 'D',\r\n                                        choice: values.question_name_D,\r\n                                        choice_url: '',\r\n                                        is_correct_ans: optionD\r\n                                      }\r\n                                    ],\r\n                                    is_active:true\r\n                                  }\r\n                                ]\r\n                              }\r\n                              this.props.AddMoreQuestionPost(getQuestionValue);\r\n                            }}>\r\n                            {({ values, errors, isSubmitting, isValidating, dirty, touched }) => (\r\n                                <Form>\r\n                                <div className=\"row\">\r\n                                <div className=\"col-md-4\">\r\n                                <FormGroup>\r\n                                    <Field\r\n                                        label='Enter question set name*'\r\n                                        type=\"text\"\r\n                                        name=\"question_name\"\r\n                                        component={TextField}\r\n                                        className=\"textfield__input\"\r\n                                        disabled={false}\r\n                                    />\r\n                                </FormGroup> \r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                <FormGroup className=\"w-100 mb-4\">\r\n                                <Field \r\n                                label='Select Class*'\r\n                                name=\"select_class\"  \r\n                                select\r\n                                component={TextField}        \r\n                                disabled={false} \r\n                                fullwidth \r\n                                >\r\n                                    { this.props.getClassList.map((item:any) =>(\r\n                                                <MenuItem value={item.value}>{item.value}</MenuItem>\r\n                                        ))\r\n                                    }\r\n                                </Field> \r\n                                </FormGroup>                               \r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                <FormGroup className=\"w-100 mb-4\">\r\n                                <Field \r\n                                label='Select Subject*'\r\n                                name=\"select_subject\"  \r\n                                select\r\n                                component={TextField}        \r\n                                disabled={false} \r\n                                fullwidth \r\n                                >\r\n                                    { SubjectList.map((item:any) =>(\r\n                                                <MenuItem value={item.name}>{item.name}</MenuItem>\r\n                                        ))\r\n                                    }\r\n                                </Field> \r\n                                </FormGroup>  \r\n                                </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"card-box mt-4\">\r\n                                        <div className=\"card-body\">\r\n                                            <div className=\"d-flex mt-1\">\r\n                                            <div className=\"mr-3 mt-4\">{getquestionNo + 1}.</div>\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                label='Write Question*'\r\n                                                type=\"text\"\r\n                                                name=\"question\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                        </FormGroup> \r\n                                           \r\n                                            </div>\r\n                                            <div className=\"col-md-12 pr-0 mt-3\">\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                label='Add Topics*'\r\n                                                type=\"text\"\r\n                                                name=\"add_topics\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                            </FormGroup> \r\n                                            </div>\r\n                                            <div className=\"d-flex mt-3\">\r\n                                            <div className=\"mt-4 mr-3 ml-2\">\r\n                                            <Field type=\"radio\" name=\"answer\" value=\"A\"/>\r\n                                            </div>\r\n                                            <div className=\"mr-3 mt-4\">A.</div>\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                label='Write Option A*'\r\n                                                type=\"text\"\r\n                                                name=\"question_name_A\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                            </FormGroup> \r\n                                            </div>\r\n                                            <div className=\"d-flex mt-3\">\r\n                                            <div className=\"mt-4 mr-3 ml-2\">\r\n                                            <Field type=\"radio\" name=\"answer\" value=\"B\" />\r\n                                            </div>\r\n                                            <div className=\"mr-3 mt-4\">B.</div>\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                label='Write Option B*'\r\n                                                type=\"text\"\r\n                                                name=\"question_name_B\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                            </FormGroup>  \r\n                                            </div>\r\n                                            <div className=\"d-flex mt-3\">\r\n                                            <div className=\"mt-4 mr-3 ml-2\">\r\n                                            <Field type=\"radio\" name=\"answer\" value=\"C\" />\r\n                                            </div>\r\n                                            <div className=\"mr-3 mt-4\">C.</div>\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                label='Write Option C*'\r\n                                                type=\"text\"\r\n                                                name=\"question_name_C\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                            </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"d-flex mt-3\">\r\n                                            <div className=\"mt-4 mr-3 ml-2\">\r\n                                            <Field type=\"radio\" name=\"answer\" value=\"D\" />\r\n                                            </div>\r\n                                            <div className=\"mr-3 mt-4\">D.</div>\r\n                                            <FormGroup className=\"w-100\">\r\n                                            <Field\r\n                                                fullwidth\r\n                                                label='Write Option D*'\r\n                                                type=\"text\"\r\n                                                name=\"question_name_D\"\r\n                                                component={TextField}\r\n                                                className=\"textfield__input\"\r\n                                                disabled={false}\r\n                                            />\r\n                                            </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"text-right mb-3 mr-2 mt-4\">\r\n                                            <Button \r\n                                            className=\"btn btn-pink mr-1 ml-1\" \r\n                                             type=\"submit\">Submit</Button>\r\n                                            <Link to={'/question'}>\r\n                                            <Button \r\n                                            className=\"btn btn-default mr-1 ml-1 \">Cancel</Button>\r\n                                            </Link>\r\n                                        </div>\r\n                                        </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                \r\n                                </Form>\r\n                                    )}\r\n                            </Formik>\r\n                            </div>\r\n                        </div>\r\n                        : <SpinnerLoader/>}\r\n                    </div>\r\n                </div>\r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\ninterface OwnPropsParams {\r\n    id: string;\r\n}\r\nconst mapStateToProps = ({ questionset, classes, subjects, profile }: RootState, ownProps: RouteComponentProps<OwnPropsParams>) => {\r\n    return {\r\n        postQuestionId: questionset.items[Number(ownProps.match.params.id)],\r\n        addNewQuestion:questionset.getQuestionList,\r\n        getClassList:classes.gradelist,\r\n        getSubjectlist:subjects.category,\r\n        getProfile:profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchQuestionSet, fetchGradePost, GetCorrectSubject, AddMoreQuestionPost})(AddMoreQuestion)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\noticeboard\\ViewNoticeBoard.tsx",["1612","1613","1614","1615","1616","1617","1618","1619","1620","1621","1622","1623","1624","1625"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport BreadCrumb from '../../components/BreadCrumb';\r\nimport { diaryList } from '../../store/diary/Types';\r\nimport { StudentList } from '../../components/StudentList';\r\nimport ImageUpload from '../../components/ImageUpload';\r\nimport { fetchDiaryPost, fetchGetAllClassList, fetchGetStudent, addDiaryPost } from '../../store/diary/Actions';\r\nimport { diaryType } from '../../store/diary/Types';\r\nimport CommonLoader from '../../components/CommonLoader';\r\nimport { Button, FormGroup } from '@material-ui/core';\r\nimport { Field, Form, Formik, FormikProps } from 'formik';\r\nimport { TextField } from 'formik-material-ui';\r\nimport SpinnerLoader from '../../components/spinner/SpinnerLoader';\r\nimport { NoticesBoardValidation } from './NoticeBoardValidation';\r\nimport { NoticesBoard } from '../../services/Config';\r\n\r\nexport interface PostsDiaryProps {\r\n    fetchDiaryPost: (getDiary: any, url:any) => void;\r\n    fetchGetAllClassList: () => any;\r\n    fetchGetStudent: (getStudentList: any) => any;\r\n    addDiaryPost: (addDiaryPost: diaryType, URLPath:any) => void;\r\n    loading: boolean\r\n    DiaryDetails: any;\r\n    AllClassList: any;\r\n    AllStudentList: any;\r\n    page: number;\r\n    per_page: number;\r\n    totalPage: number;\r\n    records: any;\r\n    total: number;\r\n    getDiaryImageURL:any;\r\n    loadingStudent:boolean;\r\n    getResponseClassList:any;\r\n    getResponseStudent:any;\r\n    errorMessage:any;\r\n}\r\nexport interface addNoticeBoard {\r\n    your_title:string,\r\n    message:string\r\n  }\r\n  const initialNoticeBoard: addNoticeBoard = {\r\n    your_title:'',\r\n    message:''\r\n  }\r\n\r\nexport class ViewNoticeBoard extends React.Component<PostsDiaryProps, diaryList>  {\r\n    formikNoticeBoard:any\r\n    getAllStudentDetails: any = [];\r\n    getStudentList: any;\r\n    getClassList:any = [];\r\n    postStudentList:any = [];\r\n    getDiaryImage:any\r\n    state = {\r\n        checkedListAll: [],\r\n        ItemsChecked: false,\r\n        ShowStudentList: false,\r\n        images: [],\r\n        setImages: [],\r\n        maxNumber: 65,\r\n        AllStudent: [],\r\n        getClass:\"1st\",\r\n        page: 1,\r\n        search: '',\r\n        SortOrderData: '',\r\n        OrderNameData: '',\r\n        SelectValue: 'pl-2',\r\n        standardlist: [],\r\n        studentlist: [],\r\n        allstudentslist: [],\r\n        currentCheckboxAllStudent: false,\r\n        currentSelectedStandard: [],\r\n        selectedDiariesList: [],\r\n        getDiaryImage:''\r\n    };\r\n    constructor(props: any) {        \r\n        super(props);\r\n        this.handleCheckStudent = this.handleCheckStudent.bind(this);\r\n    }\r\n    componentDidMount(): void {\r\n        const { page, search, SortOrderData, OrderNameData } = this.state;\r\n        this.props.fetchGetAllClassList();\r\n        const postValue = {\r\n          page_no: page,\r\n          search: search,\r\n          sort_by: SortOrderData,\r\n          order_by: OrderNameData,\r\n          academic_year: '2021'\r\n        }\r\n        this.props.fetchDiaryPost(postValue, NoticesBoard.noticeboard);\r\n      }\r\n    componentDidUpdate(prevProps:any, prevState:any, snapshot:any) { \r\n        let getStudent:any;\r\n        if(this.props.getDiaryImageURL){\r\n          const getUrlpath = this.props.getDiaryImageURL.url;\r\n          if(getUrlpath){\r\n              getUrlpath.map((items:any)=>{\r\n                this.getDiaryImage = items;                               \r\n              })\r\n          }\r\n      } \r\n    if(this.props.AllClassList.length > 0){\r\n          const { AllClassList, AllStudentList } = this.props \r\n          \r\n          this.setState({ standardlist: AllClassList });  \r\n          getStudent = {\r\n            class_id: this.props.AllClassList[0].id\r\n          }\r\n          this.props.fetchGetStudent(getStudent); \r\n          this.setState({ studentlist: AllStudentList }); \r\n          this.setState({ currentSelectedStandard: this.props.AllClassList[0]});\r\n      }\r\n      \r\n  if(this.props.errorMessage.data){\r\n    this.formikNoticeBoard.setFieldError('your_title', this.props.errorMessage.data.title) \r\n    this.formikNoticeBoard.setFieldError('message', this.props.errorMessage.data.message) \r\n  }\r\n      }\r\n    standardonSelect(e: any, data: any) {\r\n        const { selectedDiariesList } = this.state;\r\n        const { AllStudentList } = this.props;\r\n        const { items } = data;\r\n        let standardlistele: any = document.getElementById(\"standardlist\");\r\n        if (standardlistele.querySelector('.active')) {\r\n          standardlistele.querySelector('.active').classList.remove('active');\r\n        }\r\n        this.setState({ currentSelectedStandard: items });   \r\n        e.target.classList.add('active')\r\n        const getStudent = {\r\n          class_id: items.id\r\n        }\r\n        this.props.fetchGetStudent(getStudent);  \r\n        this.setState({ studentlist: AllStudentList }); \r\n          this.unSelectAll();\r\n          let findDiariesList = selectedDiariesList.find((item: any) => item.id === getStudent.class_id);\r\n          if(findDiariesList){\r\n              this.selectPreviousSelectedStudents(findDiariesList);\r\n          }\r\n      }\r\n    \r\n      handleCheckStudent(e: any) {\r\n        const { selectedDiariesList, currentSelectedStandard } = this.state;\r\n        const { AllStudentList } = this.props;\r\n        const standardId: any = currentSelectedStandard;\r\n        let checkbox: any = document.getElementById('student_' + e.currentTarget.dataset.id);\r\n        if (checkbox.checked) {\r\n          checkbox['checked'] = true;\r\n    \r\n          let availableDiareslist = selectedDiariesList.filter((item: any) => item.id === standardId.id);\r\n          if (availableDiareslist.length) {\r\n            let findDiariesList = selectedDiariesList.map((item: any) => {\r\n              if (item.id === standardId.id) {\r\n                item.studentslist.push(AllStudentList.filter((item: any) => item.id == e.currentTarget.dataset.id)[0])\r\n                if (item.studentslist.length === AllStudentList.length) {\r\n                  let selectAllCheckbox: any = document.getElementById('student_all');\r\n                  selectAllCheckbox['checked'] = true;\r\n                  item.all = true;\r\n                  checkbox['checked'] = true;\r\n                }\r\n              }\r\n              return item;\r\n            });\r\n            this.setState({ selectedDiariesList: findDiariesList });\r\n          } else {\r\n            let selectedAllStandardStudents: any = currentSelectedStandard;\r\n            selectedAllStandardStudents['all'] = false;\r\n            selectedAllStandardStudents['studentslist'] = AllStudentList.filter((item: any) => item.id == e.currentTarget.dataset.id);\r\n            this.setState({ selectedDiariesList: [...selectedDiariesList, selectedAllStandardStudents] })\r\n          }\r\n    \r\n        } else {\r\n    \r\n          let findDiariesList = selectedDiariesList.map((item: any) => {\r\n            if (item.id === standardId.id) {\r\n              let studentslist;\r\n              if (item.all) {\r\n                studentslist = AllStudentList.filter((item: any) => item.id != e.currentTarget.dataset.id)\r\n              } else {\r\n                studentslist = item.studentslist.filter((item: any) => item.id != e.currentTarget.dataset.id)\r\n              }\r\n              item.studentslist = studentslist;\r\n              item.all = false;\r\n            }\r\n            return item;\r\n          })\r\n          this.setState({ selectedDiariesList: findDiariesList });\r\n          this.setState({ currentCheckboxAllStudent: false });\r\n    \r\n          let selectAllCheckbox: any = document.getElementById('student_all');\r\n          selectAllCheckbox['checked'] = false;\r\n          checkbox['checked'] = false;\r\n        }\r\n      }\r\n    \r\n      selectPreviousSelectedStudents(data: any) {\r\n        const { AllStudentList } = this.props;\r\n        \r\n        const { all } = data;\r\n        let selectAllCheckbox: any = document.getElementById('student_all');\r\n    \r\n        if (all) {\r\n          \r\n          AllStudentList.map((item: any, index: any) => {\r\n            let checkbox: any = document.getElementById('student_' + item.id);\r\n            checkbox['checked'] = true;\r\n          })\r\n          \r\n          selectAllCheckbox['checked'] = true;\r\n          this.setState({ currentCheckboxAllStudent: true })\r\n        } else {\r\n         \r\n          data.studentslist.map((item: any, index: any) => {\r\n            let checkbox: any = document.getElementById('student_' + item.id);\r\n            checkbox['checked'] = true;\r\n          })\r\n          if (data.studentslist.length === AllStudentList.length) {\r\n            let selectAllCheckbox: any = document.getElementById('student_all');\r\n            selectAllCheckbox['checked'] = true;\r\n          }\r\n        }\r\n    \r\n      }\r\n    \r\n      unSelectAll() {\r\n        // unseleted all\r\n        const { AllStudentList } = this.props;\r\n        let selectAllCheckbox: any = document.getElementById('student_all');\r\n        AllStudentList.map((item: any, index: any) => {\r\n          let checkbox: any = document.getElementById('student_' + item.id);\r\n          checkbox['checked'] = false;\r\n        })\r\n        this.setState({ currentCheckboxAllStudent: false })\r\n        selectAllCheckbox['checked'] = false;\r\n      }\r\n    \r\n      SelectAll() {\r\n        const { AllStudentList } = this.props;\r\n        let selectAllCheckbox: any = document.getElementById('student_all');\r\n        AllStudentList.map((item: any, index: any) => {\r\n          let checkbox: any = document.getElementById('student_' + item.id);\r\n          checkbox['checked'] = true;\r\n        })\r\n        selectAllCheckbox['checked'] = true;\r\n        this.setState({ currentCheckboxAllStudent: true })\r\n      }\r\n    \r\n      selectAllStudents() {\r\n        const { currentSelectedStandard, selectedDiariesList } = this.state;\r\n        if (!this.state.currentCheckboxAllStudent) {\r\n          // Selected All\r\n          this.SelectAll();\r\n          let selectedAllStandardStudents: any = currentSelectedStandard;\r\n          selectedAllStandardStudents['all'] = true;\r\n          selectedAllStandardStudents['studentslist'] = [];\r\n          const filteredPeople = selectedDiariesList.filter((item:any) => item != currentSelectedStandard);\r\n          this.setState({ selectedDiariesList: [...filteredPeople, selectedAllStandardStudents] })\r\n      \r\n        } else {\r\n          // unseleted all\r\n          this.unSelectAll();\r\n          const filteredPeople = selectedDiariesList.filter((item:any) => item != currentSelectedStandard);\r\n          this.setState({ selectedDiariesList: filteredPeople })\r\n        }\r\n      }\r\n   \r\n    showStudentList = (e: any, getValue: any) => {\r\n        if (getValue === true) {\r\n            this.setState({ ShowStudentList: getValue })\r\n        } else {\r\n            this.setState({ ShowStudentList: false })\r\n        }\r\n    }\r\n    HiddenStudentList(getValue: any) {\r\n        this.setState({ ShowStudentList: getValue })\r\n    }\r\n    onSubmitDiary = (values: any) => {\r\n        var today = new Date();\r\n        const { selectedDiariesList } = this.state;\r\n        this.getClassList = []\r\n        this.postStudentList = []    \r\n        let SelectclassList:any;\r\n        let studentList:any;\r\n        selectedDiariesList.map((items:any, index:any)=>{\r\n          SelectclassList = {\r\n            class_id: items.id,\r\n            is_all: true\r\n          }\r\n          this.getClassList.push(SelectclassList)\r\n          items.studentslist.map((slist: any, index: any) => {\r\n            \r\n            studentList = {\r\n              student_id: slist.studentclass_details[0].card_id,\r\n              student_name: slist.student_name,\r\n              parent_id: slist.user_id\r\n            }\r\n            this.postStudentList.push(studentList)\r\n          })\r\n        })\r\n    const postValue:any = {\r\n      academic_year: \"2021\",\r\n      class_list: this.getClassList,\r\n      student_list: this.postStudentList,\r\n      selected_value: \"test\",\r\n      title: values.your_title,\r\n      message: values.message,\r\n      images: this.getDiaryImage,\r\n      date: today\r\n    }\r\n    this.props.addDiaryPost(postValue, NoticesBoard.noticeboard);\r\n      }\r\n\r\n    render() {\r\n        const { loading, loadingStudent } = this.props;        \r\n        const loadingDiary = { display: loading || loadingStudent ? \"block\" : \"none\" }; \r\n        const { standardlist, selectedDiariesList, ShowStudentList } = this.state;  \r\n        const getRecords:any = this.props.records;\r\n        let getStudentList: any;\r\n        if (this.props.AllStudentList) {\r\n        getStudentList = this.props.AllStudentList;\r\n        }\r\n        if(getRecords){\r\n          getRecords.forEach((items:any)=>{\r\n            let getClass = items.class_list;\r\n            if(getClass){\r\n              getClass.map((ClassList:any)=>{\r\n            if (standardlist.length > 0) {                            \r\n              let getClassList:any =  standardlist.find((item:any)=> item.id === parseInt(ClassList.class_id)) \r\n              if(getClassList){\r\n                ClassList[\"grade_standard\"] = getClassList.grade_standard;\r\n              }                          \r\n            } \r\n              })\r\n            }         \r\n          })\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"page-wrapper\">\r\n                    <div className=\"page-content-wrapper\">\r\n                        <div className=\"page-content pt-3\">\r\n                            <BreadCrumb\r\n                                titleName={['Notice Board']}\r\n                                homeName={['Home']}\r\n                                url={['dashboard']}\r\n                                mainPageTitle={['Notice Board']} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"card p-3\">\r\n                                    <Formik\r\n                                     ref={node=>this.formikNoticeBoard = node}\r\n                                        validationSchema={NoticesBoardValidation}\r\n                                        initialValues={initialNoticeBoard}\r\n                                        onSubmit={this.onSubmitDiary}\r\n                                        render={({\r\n                                            values, errors, isSubmitting, isValidating, dirty, touched, handleSubmit, setFieldValue\r\n                                        }: FormikProps<any>) => (\r\n                                            <Form>\r\n                                          <FormGroup>\r\n                                                <Field\r\n                                                    label='Your Title*'\r\n                                                    type=\"text\"\r\n                                                    name=\"your_title\"\r\n                                                    component={TextField}\r\n                                                    className=\"textfield__input mb-3\"\r\n                                                    disabled={false}\r\n                                                    variant=\"outlined\"\r\n                                                    onClick={(e: any) => this.showStudentList(e, true)}\r\n                                                />\r\n                                            </FormGroup>\r\n                                            {/* here print the select values */}\r\n                                            <div>\r\n                                                {/* {this.getAllStudentDetails ? */}\r\n                                                <div className=\"row\">\r\n                                                <div className=\"col-12\">\r\n                                                    {selectedDiariesList ?\r\n                                                    <>\r\n                                                        {selectedDiariesList.map((item: any, index: any) => (\r\n                                                        <>\r\n                                                            {item.all ?\r\n                                                            <span className=\"btn btn-circle btn-circle btn-info disabled mr-2 mb-3\">{item.grade_standard} </span>\r\n                                                            : <>{item.studentslist.map((slist: any, index: any) => (\r\n                                                                <span className=\"btn btn-circle btn-circle btn-danger disabled mr-2 mb-3\">({item.grade_standard}) <span className=\"userNameTitle\">{slist.student_name}</span></span>\r\n                                                            )\r\n                                                            )}</>\r\n                                                            }\r\n\r\n                                                        </>\r\n                                                        ))}\r\n                                                    </> : 'No Selected'}\r\n                                                </div>\r\n                                                </div>\r\n                                                {/* This is the function used to multiple student list view on autocomplete option */}\r\n                                                {ShowStudentList ?\r\n                                                <div>\r\n                                                    <div className=\"row mb-3 p-3\">\r\n                                                    {/* List the class details list */}\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <ul className=\"list-group docListWindow small-slimscroll-style autoselection\" id=\"standardlist\">\r\n                                                        {standardlist ?\r\n                                                            <>\r\n                                                            {standardlist.map((items: any, index: any) => (\r\n                                                                <li className=\"list-group-item\" key={index} onClick={(e) => this.standardonSelect(e, { items, index })}>{items.grade_standard}\r\n                                                                <span className=\"icon-angle-right float-right\">&gt;</span>\r\n                                                                </li>\r\n                                                            ))}\r\n                                                            </>\r\n                                                            : <CommonLoader />}\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                    {/* This is the list of student details list */}\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <ul className=\"docListWindow small-slimscroll-style autoselection\">\r\n                                                        <li className=\"title-sticky list-group-item\" onClick={() => this.selectAllStudents()} >\r\n                                                            <div className=\"form-check\">\r\n                                                            <input type=\"checkbox\" className=\"form-check-input\" defaultChecked={this.state.currentCheckboxAllStudent} id={'student_all'} />\r\n                                                            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Select All</label>\r\n                                                            </div>\r\n                                                        </li>\r\n                                                        <StudentList studentlist={getStudentList} handleCheckStudent={this.handleCheckStudent} />\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                    </div>\r\n                                                    {/* This is the function called hidden studnet list*/}\r\n                                                    <div className=\"mt-3 text-center\">\r\n                                                    <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect m-b-10 btn-circle btn-info\"\r\n                                                        onClick={() => this.HiddenStudentList(false)}>\r\n                                                        <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                                    </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                : null}\r\n                                                <div className=\"row diarybg pt-3\">\r\n                                                <div className=\"col-md-10 pr-0\">\r\n                                                <FormGroup>\r\n                                                    <Field\r\n                                                        label='Write your message*'\r\n                                                        type=\"text\"\r\n                                                        name=\"message\"\r\n                                                        component={TextField}\r\n                                                        className=\"textfield__input mb-3\"\r\n                                                        disabled={false}\r\n                                                        multiline\r\n                                                        rows={12}\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </FormGroup>\r\n                                                </div>\r\n                                                <div className=\"col-md-2 text-center  pl-0\">\r\n                                                    <ImageUpload URLLink={NoticesBoard.noticeboardImage}/>\r\n                                                </div>\r\n                                                </div>\r\n\r\n                                                {/* This is the tag use import multiple image upload  */}\r\n\r\n                                                <div className=\"form-group text-right mt-3 mb-1\">\r\n                                                <Button type=\"submit\" className=\"btn btn-pink mr-1 ml-1 w-15\" disabled={!isValidating && !dirty} value=\"Submit\">Submit</Button>\r\n                                                </div>\r\n                                                <div>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            </Form>\r\n                                        )}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                {getRecords.length > 0 ?\r\n                <>\r\n                {\r\n                  getRecords.map((item:any)=>(\r\n                    <div className=\"card\">\r\n                    <div className=\"row p-4\">                    \r\n                      <div className=\"col-md-12\">\r\n                      \r\n                        <p>To: \r\n                          <>\r\n                        {item.class_list.map((classList: any) => (\r\n                          <span className=\"btn btn-circle btn-info mr-1 ml-2 mb-2\">{classList.grade_standard}</span>\r\n                        ))}\r\n                          {item.student_list.map((schoolList: any) => (\r\n                            <span className=\"btn btn-circle btn-info mr-2 mb-2\">{schoolList.student_name}</span>\r\n                          ))}\r\n                           </>\r\n                        </p>\r\n                        \r\n                      </div>\r\n                      <div className=\"col-md-12\">                        \r\n                        <h3>{item.title}</h3>\r\n                        <p className=\"pt-3\">{item.message}</p>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-md-6\">\r\n                          {item.images?\r\n                        <img src={`${process.env.REACT_APP_API_URL}${item.images}`} className=\"w-100 p-3\" alt=\"\"/>\r\n                      :null}\r\n                          </div>\r\n\r\n                        </div>\r\n                      \r\n                      </div>\r\n\r\n                      <div className=\"col-md-12 p-3 text-right\">\r\n                        by <strong>Md Nemathulla</strong> 10 months ago\r\n                              </div>\r\n{/* \r\n                      <div className=\"col-md-12\">\r\n                        {items.replyMessage.map((items: any) => (\r\n                          <div className=\"col-md-12 p-3 mb-2 replaybackground\">\r\n                            <h5>by <strong>{items.name}</strong>  commented a {items.year} year ago</h5>\r\n                            <p className=\"mt-3\">{items.message}</p>\r\n                          </div>\r\n                        ))}\r\n                      </div> */}\r\n                      <div className=\"col-md-12\">\r\n                        <form>\r\n                          <textarea name=\"message\" placeholder=\"Reply\" className=\"form-control\"></textarea>\r\n                          <div className=\"text-right pt-2\">\r\n                            <input type=\"submit\" className=\"btn btn-circle btn-primary m-b-10\" value=\"Submit\" />\r\n                          </div>\r\n                        </form>\r\n                        \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  ))\r\n                }\r\n                </>\r\n                   \r\n                :null}\r\n                </div>\r\n              </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={loadingDiary}><SpinnerLoader/></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n      total: state.diary.total,\r\n      per_page: state.diary.per_page,\r\n      records: state.diary.records,\r\n      page: state.diary.page,\r\n      totalPage: state.diary.totalPage,\r\n      loading: state.diary.loading,\r\n      loadingStudent: state.student.loading,\r\n      DiaryDetails: state.diary.items,\r\n      AllClassList: state.diary.gradelist,\r\n      AllStudentList: state.diary.standardList,\r\n      getDiaryImageURL:state.student.ImageURL,    \r\n      getResponseClassList:state.diary.getClassList,\r\n      getResponseStudent:state.diary.getStudentList,\r\n      errorMessage: state.diary.errors\r\n    };\r\n  };\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchDiaryPost, fetchGetAllClassList, fetchGetStudent, addDiaryPost })(ViewNoticeBoard)\r\n","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\school\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\usermanage\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\authentication\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\teacher\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\subject\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\Footer.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\services\\Config.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\diary\\Actions.ts",["1626","1627"],"import { ThunkAction } from 'redux-thunk';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState, RootActions } from '../Index';\r\nimport { AxiosResponse } from 'axios';\r\nimport { baseAPI } from '../../Service';\r\nimport { DIARYAPI } from '../../services/Config';\r\nimport toaster from \"toasted-notes\";\r\nimport { notificationMsg } from '../../services/Constants';\r\nimport { LoadMoreType } from '../../components/type';\r\nimport { DiaryActionTypes } from './Types';\r\n\r\n//Implement Thunk middle ware\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, undefined, RootActions>;\r\n\r\n\r\ninterface FetchSearchAllStudentSuccess {\r\n    type: DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_SUCCESS;\r\n    payload: any;\r\n}\r\ninterface FetchSearchAllStudentFail {\r\n    type: DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_FAIL;\r\n}\r\n\r\nexport const fetchSearchAllStudent = (params: any) => {\r\n    return async (dispatch: Dispatch): Promise<any> => {\r\n        try {\r\n            dispatch({ type: DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST });\r\n            const response = await baseAPI.get(DIARYAPI.GETALLSTUDENTSEARCHLIST, \r\n                {  params, headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n            return dispatch({\r\n                type: DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_SUCCESS,\r\n                payload: response.data.data\r\n            });\r\n        }catch(e){\r\n            dispatch({\r\n                type: DiaryActionTypes.FETCH_SEARCH_STUDENT_LIST_FAIL\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// This is the action used to get diary details\r\ninterface FetchDiary {\r\n    type: DiaryActionTypes.FETCH_DIARY;\r\n}\r\n\r\ninterface FetchDiarySuccess {\r\n    type: DiaryActionTypes.FETCH_DIARY_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchDiaryFail {\r\n    type: DiaryActionTypes.FETCH_DIARY_FAIL;\r\n}\r\n\r\nexport const fetchDiaryPost = (loadMoreType: LoadMoreType, url:any): ThunkResult<void> => async dispatch => {\r\n    handleFetchDiary(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.get(url, {\r\n            params: loadMoreType,\r\n            headers: {\r\n                \"Authorization\": localStorage.getItem('token')\r\n            }\r\n        });\r\n        const getResponse:any = response.data;\r\n        if(getResponse.status === true) {\r\n            handleFetchDiarySuccess(dispatch, response.data);\r\n        } else { \r\n            toaster.notify(getResponse.message, {\r\n                position: 'top',\r\n                duration: notificationMsg.duration\r\n            });           \r\n            handleFetchDiaryFail(dispatch);\r\n        }        \r\n    } catch (e) {\r\n        handleFetchDiaryFail(dispatch);\r\n    }\r\n};\r\n\r\nexport const handleFetchDiary = (dispatch: Dispatch<FetchDiary>) => {\r\n    dispatch({ type: DiaryActionTypes.FETCH_DIARY });\r\n};\r\n\r\nexport const handleFetchDiarySuccess = (\r\n    dispatch: Dispatch<FetchDiarySuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_DIARY_SUCCESS,\r\n        payload: response,\r\n        records: response.data.records,\r\n        per_page: response.data.per_page,\r\n        page: response.data.page,\r\n        total: response.data.total\r\n    });\r\n\r\n};\r\n\r\nexport const handleFetchDiaryFail = (dispatch: Dispatch<FetchDiaryFail>) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_DIARY_FAIL\r\n    });\r\n};\r\n\r\n//This is the function used to get all Student details\r\ninterface FetchGetAllStudent {\r\n    type: DiaryActionTypes.FETCH_ALLCLASS_LIST_ID;\r\n}\r\n\r\ninterface FetchGetAllStudentSuccess {\r\n    type: DiaryActionTypes.FETCH_ALLCLASS_LIST_SUCCESS_ID;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchGetAllStudentFail {\r\n    type: DiaryActionTypes.FETCH_ALLCLASS_LIST_FAIL_ID;\r\n}\r\n\r\nexport const fetchGetAllClassList = () => {\r\n    return async (dispatch: Dispatch): Promise<any> => {\r\n        try {\r\n            dispatch({ type: DiaryActionTypes.FETCH_ALLCLASS_LIST_ID });\r\n            const response = await baseAPI.get(DIARYAPI.GETALLSTUDENTLIST, \r\n                { headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n            return dispatch({\r\n                type: DiaryActionTypes.FETCH_ALLCLASS_LIST_SUCCESS_ID,\r\n                payload: response.data.data\r\n              });\r\n        }catch(e){\r\n            dispatch({\r\n                type: DiaryActionTypes.FETCH_ALLCLASS_LIST_FAIL_ID\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const handleFetchGetAllStudent = (dispatch: Dispatch<FetchGetAllStudent>) => {\r\n    dispatch({ type: DiaryActionTypes.FETCH_ALLCLASS_LIST_ID });\r\n};\r\n\r\nexport const handleFetchGetAllStudentSuccess = (\r\n    dispatch: Dispatch<FetchGetAllStudentSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_ALLCLASS_LIST_SUCCESS_ID,\r\n        payload: response\r\n    });\r\n    \r\n};\r\n\r\nexport const handleFetchGetAllStudentFail = (dispatch: Dispatch<FetchGetAllStudentFail>) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_ALLCLASS_LIST_FAIL_ID\r\n    });\r\n};\r\n\r\n//This is the function used to get all Student details\r\ninterface FetchGetStudent {\r\n    type: DiaryActionTypes.FETCH_STUDENT_LIST_ID;\r\n}\r\n\r\ninterface FetchGetStudentSuccess {\r\n    type: DiaryActionTypes.FETCH_STUDENT_LISTSUCCESS_ID;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchGetStudentFail {\r\n    type: DiaryActionTypes.FETCH_STUDENT_LIST_FAIL_ID;\r\n}\r\n\r\n\r\nexport const fetchGetStudent = (getStudant: any) => {\r\n    return async (dispatch: Dispatch): Promise<any> => {\r\n        try {\r\n            dispatch({ type: DiaryActionTypes.FETCH_ALLCLASS_LIST_ID });\r\n            const response = await baseAPI.get(DIARYAPI.GETSTUDENTLIST, \r\n                {  params: getStudant, headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n            return dispatch({\r\n                type:  DiaryActionTypes.FETCH_STUDENT_LISTSUCCESS_ID, \r\n                payload: response.data.data\r\n              });\r\n        }catch(e){\r\n            dispatch({\r\n                type: DiaryActionTypes.FETCH_ALLCLASS_LIST_FAIL_ID\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const handleFetchGetStudent = (dispatch: Dispatch<FetchGetStudent>) => {\r\n    dispatch({ type: DiaryActionTypes.FETCH_STUDENT_LIST_ID });\r\n};\r\n\r\nexport const handleFetchGetStudentSuccess = (\r\n    dispatch: Dispatch<FetchGetStudentSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_STUDENT_LISTSUCCESS_ID,\r\n        payload: response\r\n    });\r\n    \r\n};\r\n\r\nexport const handleFetchGetStudentFail = (dispatch: Dispatch<FetchGetStudentFail>) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.FETCH_STUDENT_LIST_FAIL_ID\r\n    });\r\n};\r\n\r\n// FETCH Image Upload Student details\r\n\r\ninterface FetchDiaryImageUpdate {\r\n    type: DiaryActionTypes.ADD_DIARY_IMAGE;\r\n}\r\n\r\ninterface FetchDiaryImageUpdateSuccess {\r\n    type: DiaryActionTypes.ADD_DIARY_IMAGE_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchDiaryImageUpdateFail {\r\n    type: DiaryActionTypes.ADD_DIARY_IMAGE_FAIL;\r\n}\r\n\r\nexport const DiaryImageUpdate = (getImage:any): ThunkResult<void> => async dispatch => {\r\n    handleDiaryImageUpdate(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.post(DIARYAPI.DIARYAPIIMAGEUPDATE, getImage,\r\n        { headers: { \"Authorization\": localStorage.getItem('token') } });\r\n        const getResponse:any = response.data;\r\n        if(getResponse.status === false) {\r\n            toaster.notify(getResponse.message, {\r\n                position: 'top', \r\n                duration: notificationMsg.duration\r\n              });\r\n              handleFetchDiaryImageUpdateFail(dispatch);\r\n        } else {\r\n            handleFetchDiaryImageUpdateSuccess(dispatch, getResponse);\r\n        }            \r\n                 \r\n    } catch (e) {\r\n        handleFetchDiaryImageUpdateFail(dispatch);\r\n    }\r\n};\r\n\r\nexport const handleDiaryImageUpdate = (dispatch: Dispatch<FetchDiaryImageUpdate>) => {\r\n    dispatch({ type: DiaryActionTypes.ADD_DIARY_IMAGE });\r\n};\r\n\r\nconst handleFetchDiaryImageUpdateSuccess = (\r\n    dispatch: Dispatch<FetchDiaryImageUpdateSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.ADD_DIARY_IMAGE_SUCCESS,\r\n        payload: response,\r\n        ImageURL:response.data\r\n    });\r\n};\r\n\r\nconst handleFetchDiaryImageUpdateFail = (dispatch: Dispatch<FetchDiaryImageUpdateFail>) => {\r\n    dispatch({\r\n        type:  DiaryActionTypes.ADD_DIARY_IMAGE_FAIL\r\n    });\r\n};\r\n\r\n\r\n//Add Classes\r\ninterface AddDiary {\r\n    type:DiaryActionTypes.ADD_DIARY;\r\n}\r\n\r\ninterface AddDiarySuccess {\r\n    type: DiaryActionTypes.ADD_DIARY_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface AddDiaryFail {\r\n    type: DiaryActionTypes.ADD_DIARY_FAIL;\r\n    payload: any;\r\n}\r\n\r\nexport const addDiaryPost = (diary:any, getURL:any): ThunkResult<void> => async dispatch => {\r\n    handleAddDiary(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.post(getURL, diary, \r\n            { headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n        const getResponse = JSON.parse(JSON.stringify(response.data));\r\n        if(getResponse.status === true) {\r\n            handleAddDiarySuccess(dispatch, response.data);\r\n            toaster.notify(getResponse.message, {\r\n                position: 'top', \r\n                duration: notificationMsg.duration\r\n              });\r\n        }else {\r\n            handleAddDiaryFail(dispatch, response.data);\r\n            toaster.notify(getResponse.message, {\r\n                position: 'top', \r\n                duration: notificationMsg.duration\r\n              });\r\n        }        \r\n    } catch (e) {\r\n        handleAddDiaryFail(dispatch, e);\r\n    }\r\n};\r\n\r\nexport const handleAddDiary = (dispatch: Dispatch<AddDiary>) => {\r\n    dispatch({ type: DiaryActionTypes.ADD_DIARY });\r\n};\r\n\r\nexport const handleAddDiarySuccess = (\r\n    dispatch: Dispatch<AddDiarySuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.ADD_DIARY_SUCCESS,\r\n        payload: response\r\n    });\r\n    window.location.reload(false);\r\n};\r\n\r\nexport const handleAddDiaryFail = (dispatch: Dispatch<AddDiaryFail>, response: any) => {\r\n    dispatch({\r\n        type: DiaryActionTypes.ADD_DIARY_FAIL, payload: response\r\n    });\r\n};\r\n\r\nexport type DiaryAction =\r\n    | FetchDiary\r\n    | FetchDiarySuccess\r\n    | FetchDiaryFail\r\n    | FetchGetAllStudent\r\n    | FetchGetAllStudentSuccess\r\n    | FetchGetAllStudentFail\r\n    | FetchGetStudent\r\n    | FetchGetStudentSuccess\r\n    | FetchGetStudentFail\r\n    | AddDiary\r\n    | AddDiarySuccess\r\n    | AddDiaryFail\r\n    | FetchDiaryImageUpdate\r\n    | FetchDiaryImageUpdateFail\r\n    | FetchDiaryImageUpdateSuccess;","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserForm.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\ResetPasswordValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\classes\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\question\\Actions.ts",["1628"],"import { ThunkAction } from 'redux-thunk';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState, RootActions } from '../Index';\r\nimport { AxiosResponse } from 'axios';\r\nimport history from '../../History';\r\nimport { baseAPI } from '../../Service';\r\nimport toaster from \"toasted-notes\";\r\nimport { notificationMsg } from '../../services/Constants';\r\nimport { LoadMoreType } from '../../components/type';\r\nimport { QuestionActionTypes } from './Types'\r\nimport { QuestionSet } from '../../services/Config';\r\n\r\n//Implement Thunk middle ware\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, undefined, RootActions>;\r\n\r\ninterface FetchQuestionSet {\r\n    type: QuestionActionTypes.FETCH_QUESTION;\r\n}\r\n\r\ninterface FetchQuestionSetSuccess {\r\n    type: QuestionActionTypes.FETCH_QUESTION_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchQuestionSetFail {\r\n    type: QuestionActionTypes.FETCH_QUESTION_FAIL;\r\n}\r\n\r\nexport const fetchQuestionSetPost = (loadMoreType: any): ThunkResult<void> => async dispatch => {\r\n    console.log(loadMoreType, 'loadMoreType...')\r\n    handleFetchQuestionSet(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.get(QuestionSet.Question, {\r\n            params: loadMoreType,\r\n            headers: {\r\n                \"Authorization\": localStorage.getItem('token')\r\n            }\r\n        });\r\n        handleFetchQuestionSetSuccess(dispatch, response.data);\r\n    } catch (e) {\r\n        handleFetchQuestionSetFail(dispatch);\r\n    }\r\n};\r\n\r\nexport const handleFetchQuestionSet = (dispatch: Dispatch<FetchQuestionSet>) => {\r\n    dispatch({ type: QuestionActionTypes.FETCH_QUESTION });\r\n};\r\n\r\nexport const handleFetchQuestionSetSuccess = (\r\n    dispatch: Dispatch<FetchQuestionSetSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: QuestionActionTypes.FETCH_QUESTION_SUCCESS,\r\n        payload: response,\r\n        records: response.data.records,\r\n        per_page: response.data.per_page,\r\n        page: response.data.page,\r\n        total: response.data.total\r\n    });\r\n\r\n};\r\n\r\nexport const handleFetchQuestionSetFail = (dispatch: Dispatch<FetchQuestionSetFail>) => {\r\n    dispatch({\r\n        type: QuestionActionTypes.FETCH_QUESTION_FAIL\r\n    });\r\n};\r\n\r\n//Add Question set\r\n\r\ninterface AddQuestionSet {\r\n    type: QuestionActionTypes.ADD_QUESTION;\r\n}\r\n\r\ninterface AddQuestionSetSuccess {\r\n    type: QuestionActionTypes.ADD_QUESTION_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface AddQuestionSetFail {\r\n    type: QuestionActionTypes.ADD_QUESTION_FAIL;\r\n    payload: any;\r\n}\r\n\r\nexport const addQuestion = (question: any): ThunkResult<void> => async dispatch => {\r\n    handleAddSchool(dispatch);\r\n\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.post(QuestionSet.Question, question,\r\n            { headers: { \"Authorization\": localStorage.getItem('token') } });\r\n        if (response.data.status === true) {\r\n            toaster.notify(response.data.message, {\r\n                position: 'top',\r\n                duration: notificationMsg.duration\r\n            });\r\n            handleAddSchoolSuccess(dispatch, response.data);\r\n        } else {\r\n            toaster.notify(response.data.message, {\r\n                position: 'top',\r\n                duration: notificationMsg.duration\r\n            });\r\n            handleAddSchoolFail(dispatch, response.data);\r\n        }\r\n    } catch (e) {\r\n        handleAddSchoolFail(dispatch, e);\r\n    }\r\n};\r\n\r\nconst handleAddSchool = (dispatch: Dispatch<AddQuestionSet>) => {\r\n    dispatch({ type: QuestionActionTypes.ADD_QUESTION });\r\n};\r\n\r\nconst handleAddSchoolSuccess = (\r\n    dispatch: Dispatch<AddQuestionSetSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({ type: QuestionActionTypes.ADD_QUESTION_SUCCESS, payload: response });\r\n    history.push('/question');\r\n};\r\n\r\nconst handleAddSchoolFail = (dispatch: Dispatch<AddQuestionSetFail>, response: any) => {\r\n    setTimeout(() => {\r\n        dispatch({ type: QuestionActionTypes.ADD_QUESTION_FAIL, payload: response });\r\n    }, notificationMsg.duration);\r\n};\r\n\r\n\r\n//Add Question set\r\n\r\ninterface AddMoreQuestionSet {\r\n    type: QuestionActionTypes.ADD_QUESTION;\r\n}\r\n\r\ninterface AddMoreQuestionSetSuccess {\r\n    type: QuestionActionTypes.ADD_QUESTION_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface AddMoreQuestionSetFail {\r\n    type: QuestionActionTypes.ADD_QUESTION_FAIL;\r\n    payload: any;\r\n}\r\n\r\nexport const AddMoreQuestionPost = (question: any): ThunkResult<void> => async dispatch => {\r\n    handleAddMoreQuestionSet(dispatch);\r\n\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.put(`${QuestionSet.Question}${question.id}/`, question,\r\n            { headers: { \"Authorization\": localStorage.getItem('token') } });\r\n        if (response.data.status === true) {\r\n            toaster.notify(response.data.message, {\r\n                position: 'top',\r\n                duration: notificationMsg.duration\r\n            });\r\n            handleAddMoreQuestionSetSuccess(dispatch, response.data);\r\n        } else {\r\n            toaster.notify(response.data.message, {\r\n                position: 'top',\r\n                duration: notificationMsg.duration\r\n            });\r\n            handleddMoreQuestionSetFail(dispatch, response.data);\r\n        }\r\n    } catch (e) {\r\n        handleddMoreQuestionSetFail(dispatch, e);\r\n    }\r\n};\r\n\r\nconst handleAddMoreQuestionSet = (dispatch: Dispatch<AddMoreQuestionSet>) => {\r\n    dispatch({ type: QuestionActionTypes.ADD_QUESTION });\r\n};\r\n\r\nconst handleAddMoreQuestionSetSuccess = (\r\n    dispatch: Dispatch<AddMoreQuestionSetSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({ type: QuestionActionTypes.ADD_QUESTION_SUCCESS, payload: response });\r\n    history.push('/question');\r\n};\r\n\r\nconst handleddMoreQuestionSetFail = (dispatch: Dispatch<AddMoreQuestionSetFail>, response: any) => {\r\n    setTimeout(() => {\r\n        dispatch({ type: QuestionActionTypes.ADD_QUESTION_FAIL, payload: response });\r\n    }, notificationMsg.duration);\r\n};\r\n\r\n// FETCH Student edit details\r\n\r\ninterface FetchQuestionSetId {\r\n    type: QuestionActionTypes.FETCH_QUESTION_ID;\r\n}\r\n\r\ninterface FetchQuestionSetSuccessId {\r\n    type: QuestionActionTypes.FETCH_QUESTION_SUCCESS_ID;\r\n    payload: any;\r\n}\r\n\r\ninterface FetchQuestionSetFailId {\r\n    type: QuestionActionTypes.FETCH_QUESTION_FAIL_ID;\r\n}\r\n\r\nexport const fetchQuestionSet = (id: number): ThunkResult<void> => async dispatch => {    \r\n    handleFetchQuestionSetId(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPI.get(`${QuestionSet.Question}${id}/?academic_year=2021`,\r\n        { headers: { \"Authorization\": localStorage.getItem('token') } });\r\n        handleFetchQuestionSetSuccessId(dispatch, response.data);\r\n    } catch (e) {\r\n        handleFetchQuestionSetFailId(dispatch);\r\n    }\r\n};\r\n\r\nexport const handleFetchQuestionSetId = (dispatch: Dispatch<FetchQuestionSetId>) => {\r\n    dispatch({ type: QuestionActionTypes.FETCH_QUESTION_ID });\r\n};\r\n\r\nconst handleFetchQuestionSetSuccessId = (\r\n    dispatch: Dispatch<FetchQuestionSetSuccessId>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: QuestionActionTypes.FETCH_QUESTION_SUCCESS_ID,\r\n        payload: response,\r\n        getData: response.data\r\n    });\r\n};\r\n\r\nconst handleFetchQuestionSetFailId = (dispatch: Dispatch<FetchQuestionSetFailId>) => {\r\n    dispatch({\r\n        type: QuestionActionTypes.FETCH_QUESTION_FAIL_ID\r\n    });\r\n};\r\n\r\nexport type QuestionAction =\r\n    | FetchQuestionSetSuccess\r\n    | FetchQuestionSetFail\r\n    | FetchQuestionSetSuccessId\r\n    | FetchQuestionSetFailId\r\n    | AddMoreQuestionSetSuccess;","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\BreadCrumb.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\spinner\\SpinnerLoader.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\SideNav.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\layout\\mainlayout\\TopHeader.tsx",["1629","1630","1631","1632","1633","1634","1635","1636"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserRoles } from '../../services/Constants'\r\nimport { connect } from 'react-redux';\r\nimport { ProfileActionTypes } from '../../store/profile/Types'\r\nimport { fetchProfilePost } from '../../store/profile/Actions'\r\nimport { RootState } from '../../store/Index'\r\nimport { LogoutPost } from '../../store/authentication/Actions'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { TokenValidationPost } from '../../store/profile/Actions';\r\nimport {AuthRoutes, NonAuthRoutes, \r\n\tSchoolManage, UserManagementUrl, StudentDetails, \r\n\tTeacherDetails, DiaryList, NoticeBoard, Question } from '../../router/Roles';\r\n\r\nexport interface ProfileDetails {\r\n\tgetProfileDetails?: ProfileActionTypes[];\r\n\tfetchProfilePost: () => any;\r\n\tLogoutPost: () => void;\r\n\tTokenValidationPost:() => any;\r\n}\r\n\r\nclass Topheader extends React.Component<ProfileDetails> {\r\n\tpublic state = {\r\n\t\tacadamicAdmin: false,\r\n\t\tschoolAdmin: false,\r\n\t\tbothData: false,\r\n\t\tteacher: false,\r\n\t\tparent: false,\r\n\t\tshowLogout: false\r\n\t};\r\n\r\n\tpublic closeLogout = () => {\r\n\t\tthis.setState({ showLogout: false });\r\n\t}\r\n\r\n\tpublic ShowLogoutBox = () => {\r\n\t\tthis.setState({ showLogout: true });\r\n\t}\r\n\r\n\tcomponentDidMount(): void {\r\n\t\tthis.props.fetchProfilePost();\r\n\t\tthis.props.TokenValidationPost();\r\n\t\tthis.checkUserType();\r\n\t}\r\n\tcheckUserType() {\r\n\t\tconst getTopToken = localStorage.getItem('usertype');\r\n\t\tif (getTopToken === UserRoles.acadamicAdmin) {\r\n\t\t\tthis.setState({ acadamicAdmin: true })\r\n\t\t} else if (getTopToken === UserRoles.schoolAdmin) {\r\n\t\t\tthis.setState({ schoolAdmin: true })\r\n\t\t} else if (getTopToken === UserRoles.teacher) {\r\n\t\t\tthis.setState({ teacher: true })\r\n\t\t} else if (getTopToken === UserRoles.parent) {\r\n\t\t\tthis.setState({ parent: true })\r\n\t\t}\r\n\t}\r\n\r\n\tprivate LogoutPage() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Modal show={this.state.showLogout}>\r\n\t\t\t\t\t<Modal.Header className=\"pb-0 pt-0\">\r\n\t\t\t\t\t\t<Modal.Title>Logout</Modal.Title>\r\n\t\t\t\t\t</Modal.Header>\r\n\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<p>Are you sure want to Logout ?</p>\r\n\t\t\t\t\t</Modal.Body>\r\n\r\n\t\t\t\t\t<Modal.Footer className=\"modelboxbutton\">\r\n\t\t\t\t\t\t<button className=\"btn btn-danger mr-1 ml-1 w-15\" onClick={this.props.LogoutPost}>Okay</button>\r\n\t\t\t\t\t\t<button className=\"btn btn-default mr-1 ml-1 w-15\" onClick={this.closeLogout}>Cancel</button>\r\n\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst getProfile = JSON.stringify(this.props.getProfileDetails);\r\n\t\tconst profileList = JSON.parse(getProfile);\r\n\t\tconst getData = profileList.data;\r\n\t\tlet userFirstName;\r\n\t\tlet userLastName;\r\n\t\tlet userRole;\r\n\t\tif (getData) {\r\n\t\t\tuserFirstName = getData.firstname;\r\n\t\t\tuserLastName = getData.lastname;\r\n\t\t\tuserRole = getData.role;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.LogoutPage()}\r\n\t\t\t\t{/* start header */}\r\n\t\t\t\t<div className=\"page-header navbar navbar-fixed-top\">\r\n\t\t\t\t\t<div className=\"page-header-inner \">\r\n\t\t\t\t\t\t{/* logo start */}\r\n\t\t\t\t\t\t<div className=\"page-logo pl-4\">\r\n\t\t\t\t\t\t\t<Link to=\"#\">\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-graduation-cap mr-2\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t<span className=\"logo-default\">DAPS</span> </Link>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{/* logo end */}\r\n\t\t\t\t\t\t<ul className=\"nav navbar-nav navbar-left in\">\r\n\t\t\t\t\t\t\t<li><Link to=\"#\" className=\"menu-toggler sidebar-toggler\"> <i className=\"fa fa-bars\" aria-hidden=\"true\"></i></Link></li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t{/* start mobile menu */}\r\n\t\t\t\t\t\t<Link to=\"#\" className=\"menu-toggler responsive-toggler\" data-toggle=\"collapse\"\r\n\t\t\t\t\t\t\tdata-target=\".navbar-collapse\">\r\n\t\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t{/* end mobile menu */}\r\n\t\t\t\t\t\t{/* start header menu */}\r\n\t\t\t\t\t\t<div className=\"top-menu\">\r\n\t\t\t\t\t\t\t<ul className=\"nav navbar-nav pull-right\">\r\n\t\t\t\t\t\t\t\t{/* start manage user dropdown */}\r\n\t\t\t\t\t\t\t\t<li className=\"dropdown dropdown-user\">\r\n\t\t\t\t\t\t\t\t\t<Link to=\"#\" className=\"dropdown-toggle mt-1 pr-0\" data-toggle=\"dropdown\" data-hover=\"dropdown\"\r\n\t\t\t\t\t\t\t\t\t\tdata-close-others=\"true\">\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"username username-hide-on-mobile\"> 2021 </span>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-angle-down\"></i>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t<ul className=\"dropdown-menu dropdown-menu-default animated jello\">\r\n\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"#\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-calendar\" aria-hidden=\"true\"></i> 2020 </Link>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"#\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-calendar\" aria-hidden=\"true\"></i> 2019</Link>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"dropdown dropdown-user mr-3\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"dropdown-toggle pr-2 pb-0 pt-0\" data-toggle=\"dropdown\" data-hover=\"dropdown\"\r\n\t\t\t\t\t\t\t\t\t\tdata-close-others=\"true\">\r\n\t\t\t\t\t\t\t\t\t\t<img alt=\"\" className=\"img-circle \" src=\"assets/img/profile_small.jpg\" />\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"username username-hide-on-mobile mt-1 mr-2 userNameTitle\"> {userFirstName} {userLastName}</span>\r\n\t\t\t\t\t\t\t\t\t\t<p className=\"d-block\">{userRole} <i className=\"fa fa-angle-down\"></i></p>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t<ul className=\"dropdown-menu dropdown-menu-default animated jello\">\r\n\t\t\t\t\t\t\t\t\t\t{/* <li>\r\n\t\t\t\t\t\t\t\t<Link to={'#'}>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"icon-user\"></i> Profile </Link>\r\n\t\t\t\t\t\t\t\t</li> */}\r\n\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to={'#'} onClick={() => this.ShowLogoutBox()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"icon-logout\"></i> Log Out </Link>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"dropdown dropdown-quick-sidebar-toggler mt-3 mr-4\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} id=\"headerSettingButton\" className=\"notificationCount\" data-upgraded=\",MaterialButton\">\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-bell-o\"></i>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge headerBadgeColor1\"> 6 </span>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{/* end manage user dropdown */}\r\n\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"navbar-custom\">\r\n\t\t\t\t\t\t<div className=\"hor-menu hidden-sm hidden-xs\">\r\n\t\t\t\t\t\t\t<ul className=\"nav navbar-nav\">\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'/dashboard'} className=\"dropdown-toggle\">\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-tachometer\" aria-hidden=\"true\"></i> Dashboard\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"dropdown-toggle\">\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i> Classes\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"dropdown-toggle\"> <i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i> Instant Feedback\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"dropdown-toggle\">  <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i> Attendance\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to=\"/notice_board\" className=\"dropdown-toggle\"> <i className=\"fa fa-commenting-o\" aria-hidden=\"true\"></i> Notice Board\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'/diary'} className=\"dropdown-toggle\">  <i className=\"fa fa-book\" aria-hidden=\"true\"></i> Diary\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to=\"#\" className=\"dropdown-toggle\"> <i className=\"fa fa-file-text\" aria-hidden=\"true\"></i> Quizzes\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={Question.ViewQuestion} className=\"dropdown-toggle\">  <i className=\"fa fa-table\" aria-hidden=\"true\"></i> Question Set\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{ this.state.schoolAdmin || this.state.acadamicAdmin ?\r\n\t\t\t\t\t\t\t\t<li className=\"mega-menu-dropdown\">\r\n\t\t\t\t\t\t\t\t\t<Link to={'#'} className=\"dropdown-toggle\"> <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i> Manage\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-angle-down\"></i>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"selected\"></span>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"arrow open\"></span>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t<ul className=\"dropdown-menu\">\r\n\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"mega-menu-content\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul className=\"mega-menu-submenu\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.schoolAdmin?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/class'} className=\"nav-link\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">Class</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/teacher'} className=\"nav-link\">  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">Teachers</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"selected\"></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/student'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">Students</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/view_school'} className=\"nav-link\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">School</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to=\"/subject\" className=\"nav-link \">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">Subject</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ this.state.acadamicAdmin ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/school'} className=\"nav-link\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"title\">School</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={'/user'} className=\"nav-link\">  <span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"title\">User</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> : null\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t:null}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* end header */}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nconst mapStateToProps = ({ schools, login, profile }: RootState) => {\r\n\treturn {\r\n\t\tgetProfileDetails: profile.items\r\n\t};\r\n};\r\nexport default connect(\r\n\tmapStateToProps, { fetchProfilePost, LogoutPost, TokenValidationPost }\r\n)(Topheader);","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\AddTeacherForm.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\CommonLoader.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\noticeboard\\NoticeBoardValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\ImageUpload.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\components\\StudentList.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\questionset\\QuestionValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\student\\Actions.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\Service.ts",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\diary\\Diaryvalidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentForms.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\store\\profile\\Actions.ts",["1637","1638","1639"],"import { ThunkAction } from 'redux-thunk';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState, RootActions } from '../Index';\r\nimport { AxiosResponse } from 'axios';\r\nimport { baseAPIAuth } from '../../Service';\r\nimport { AUTHAPI } from '../../services/Config'\r\nimport { ProfileActionTypes, ProfilelDetailsType } from './Types'\r\nimport toaster from \"toasted-notes\";\r\nimport { notificationMsg } from '../../services/Constants'\r\nimport history from '../../History';\r\nimport {LogoutPost} from '../authentication/Actions';\r\n\r\n//Implement Thunk middle ware\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, undefined, RootActions>;\r\n\r\ninterface FetchProfile {\r\n    type: ProfileActionTypes.FETCH_PROFILE;\r\n}\r\n\r\ninterface FetchProfileSuccess {\r\n    type: ProfileActionTypes.FETCH_PROFILE_SUCCESS;\r\n    payload: ProfilelDetailsType;\r\n}\r\n\r\ninterface FetchProfileFail {\r\n    type: ProfileActionTypes.FETCH_PROFILE_FAIL;\r\n}\r\n\r\nexport const fetchProfilePost = (): ThunkResult<void> => async dispatch => {\r\n    handleFetchProfile(dispatch);\r\n    try {\r\n        const response: AxiosResponse<ProfilelDetailsType> = await baseAPIAuth.get(AUTHAPI.PROFILE, \r\n            { headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n        const getProfileDetails:any = response.data;\r\n        if(getProfileDetails.status === true) {\r\n            handleFetchProfileSuccess(dispatch, response.data);\r\n        } else if(getProfileDetails.status === false && getProfileDetails.message === 'Invalid token') {\r\n            localStorage.clear();\r\n            history.push('/');\r\n            handleFetchProfileFail(dispatch);\r\n        } else {\r\n            handleFetchProfileFail(dispatch);\r\n        }\r\n        \r\n    } catch (e) {\r\n        handleFetchProfileFail(dispatch);\r\n    }\r\n};\r\n\r\n\r\nexport const handleFetchProfile = (dispatch: Dispatch<FetchProfile>) => {\r\n    dispatch({ type: ProfileActionTypes.FETCH_PROFILE });\r\n};\r\n\r\nexport const handleFetchProfileSuccess = (\r\n    dispatch: Dispatch<FetchProfileSuccess>,\r\n    response: ProfilelDetailsType\r\n) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.FETCH_PROFILE_SUCCESS,\r\n        payload: response,\r\n        schoolId:response.data.school_id\r\n    });\r\n    \r\n};\r\n\r\nexport const handleFetchProfileFail = (dispatch: Dispatch<FetchProfileFail>) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.FETCH_PROFILE_FAIL\r\n    });\r\n};\r\n\r\n// This is the function used to validation for token\r\ninterface TokenValidation {\r\n    type: ProfileActionTypes.TOKEN_VALIDATION_REQUEST;\r\n}\r\n\r\ninterface TokenValidationSuccess {\r\n    type: ProfileActionTypes.TOKEN_VALIDATION_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface TokenValidationFail {\r\n    type: ProfileActionTypes.TOKEN_VALIDATION_ERROR;\r\n}\r\n\r\nexport const TokenValidationPost = (): ThunkResult<void> => async dispatch => {\r\n    handleTokenValidation(dispatch);\r\n    try {\r\n        const response: AxiosResponse<any> = await baseAPIAuth.get(AUTHAPI.CHECKTOKENVALIDATION, \r\n        { headers: {\"Authorization\" : localStorage.getItem('token')} });\r\n        handleTokenValidationSuccess(dispatch, response.data);\r\n    } catch (e) {\r\n        handleTokenValidationFail(dispatch);\r\n    }\r\n};\r\n\r\n\r\nexport const handleTokenValidation = (dispatch: Dispatch<TokenValidation>) => {\r\n    dispatch({ type: ProfileActionTypes.TOKEN_VALIDATION_REQUEST });\r\n};\r\n\r\nexport const handleTokenValidationSuccess = (\r\n    dispatch: Dispatch<TokenValidationSuccess>,\r\n    response: any\r\n) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.TOKEN_VALIDATION_SUCCESS,\r\n        payload: response\r\n    });\r\n    \r\n};\r\n\r\nexport const handleTokenValidationFail = (dispatch: Dispatch<TokenValidationFail>) => {\r\n    dispatch({\r\n        type: ProfileActionTypes.TOKEN_VALIDATION_ERROR\r\n    });\r\n};\r\n\r\nexport type ProfileAction =\r\n    | FetchProfile\r\n    | FetchProfileSuccess\r\n    | FetchProfileFail;","F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\usermanagement\\UserManageValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\teacher\\TeacherValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\classes\\ClassValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\school\\SchoolValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\authentication\\authValidation.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\student\\StudentImage.tsx",[],"F:\\Projects\\DAPS-Projects\\MergeDir\\DAPS\\02_WebFrontEnd\\src\\modules\\subject\\SubjectValidation.tsx",[],{"ruleId":"1640","severity":1,"message":"1641","line":15,"column":11,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1644","line":15,"column":19,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":28},{"ruleId":"1640","severity":1,"message":"1645","line":15,"column":30,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":38},{"ruleId":"1640","severity":1,"message":"1646","line":123,"column":7,"nodeType":"1642","messageId":"1643","endLine":123,"endColumn":21},{"ruleId":"1640","severity":1,"message":"1647","line":124,"column":7,"nodeType":"1642","messageId":"1643","endLine":124,"endColumn":23},{"ruleId":"1640","severity":1,"message":"1648","line":343,"column":7,"nodeType":"1642","messageId":"1643","endLine":343,"endColumn":20},{"ruleId":"1649","replacedBy":"1650"},{"ruleId":"1651","replacedBy":"1652"},{"ruleId":"1640","severity":1,"message":"1653","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1654","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1655","line":10,"column":8,"nodeType":"1642","messageId":"1643","endLine":10,"endColumn":15},{"ruleId":"1649","replacedBy":"1656"},{"ruleId":"1651","replacedBy":"1657"},{"ruleId":"1640","severity":1,"message":"1658","line":14,"column":8,"nodeType":"1642","messageId":"1643","endLine":14,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1641","line":15,"column":11,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1644","line":15,"column":19,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":28},{"ruleId":"1640","severity":1,"message":"1645","line":15,"column":30,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":38},{"ruleId":"1640","severity":1,"message":"1646","line":89,"column":7,"nodeType":"1642","messageId":"1643","endLine":89,"endColumn":21},{"ruleId":"1640","severity":1,"message":"1647","line":90,"column":7,"nodeType":"1642","messageId":"1643","endLine":90,"endColumn":23},{"ruleId":"1640","severity":1,"message":"1659","line":94,"column":9,"nodeType":"1642","messageId":"1643","endLine":94,"endColumn":18},{"ruleId":"1640","severity":1,"message":"1660","line":179,"column":11,"nodeType":"1642","messageId":"1643","endLine":179,"endColumn":25},{"ruleId":"1661","severity":1,"message":"1662","line":107,"column":25,"nodeType":"1663","messageId":"1664","endLine":114,"endColumn":43},{"ruleId":"1661","severity":1,"message":"1662","line":79,"column":25,"nodeType":"1663","messageId":"1664","endLine":86,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1658","line":15,"column":8,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1660","line":185,"column":11,"nodeType":"1642","messageId":"1643","endLine":185,"endColumn":25},{"ruleId":"1661","severity":1,"message":"1662","line":213,"column":24,"nodeType":"1663","messageId":"1664","endLine":228,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1665","line":6,"column":11,"nodeType":"1642","messageId":"1643","endLine":6,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1666","line":11,"column":17,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":27},{"ruleId":"1661","severity":1,"message":"1662","line":66,"column":37,"nodeType":"1663","messageId":"1664","endLine":72,"endColumn":59},{"ruleId":"1661","severity":1,"message":"1662","line":84,"column":33,"nodeType":"1663","messageId":"1664","endLine":90,"endColumn":55},{"ruleId":"1640","severity":1,"message":"1658","line":12,"column":8,"nodeType":"1642","messageId":"1643","endLine":12,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1667","line":189,"column":13,"nodeType":"1642","messageId":"1643","endLine":189,"endColumn":20},{"ruleId":"1640","severity":1,"message":"1658","line":11,"column":8,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1660","line":201,"column":15,"nodeType":"1642","messageId":"1643","endLine":201,"endColumn":29},{"ruleId":"1640","severity":1,"message":"1668","line":16,"column":40,"nodeType":"1642","messageId":"1643","endLine":16,"endColumn":54},{"ruleId":"1661","severity":1,"message":"1662","line":122,"column":25,"nodeType":"1663","messageId":"1664","endLine":137,"endColumn":47},{"ruleId":"1640","severity":1,"message":"1669","line":57,"column":4,"nodeType":"1642","messageId":"1643","endLine":57,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1670","line":58,"column":4,"nodeType":"1642","messageId":"1643","endLine":58,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1671","line":2,"column":73,"nodeType":"1642","messageId":"1643","endLine":2,"endColumn":91},{"ruleId":"1640","severity":1,"message":"1672","line":2,"column":93,"nodeType":"1642","messageId":"1643","endLine":2,"endColumn":114},{"ruleId":"1661","severity":1,"message":"1662","line":52,"column":37,"nodeType":"1663","messageId":"1664","endLine":58,"endColumn":59},{"ruleId":"1640","severity":1,"message":"1653","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1654","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1655","line":10,"column":8,"nodeType":"1642","messageId":"1643","endLine":10,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1658","line":14,"column":8,"nodeType":"1642","messageId":"1643","endLine":14,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1641","line":15,"column":11,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1644","line":15,"column":19,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":28},{"ruleId":"1640","severity":1,"message":"1645","line":15,"column":30,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":38},{"ruleId":"1640","severity":1,"message":"1646","line":89,"column":7,"nodeType":"1642","messageId":"1643","endLine":89,"endColumn":21},{"ruleId":"1640","severity":1,"message":"1647","line":90,"column":7,"nodeType":"1642","messageId":"1643","endLine":90,"endColumn":23},{"ruleId":"1640","severity":1,"message":"1659","line":94,"column":9,"nodeType":"1642","messageId":"1643","endLine":94,"endColumn":18},{"ruleId":"1640","severity":1,"message":"1660","line":179,"column":11,"nodeType":"1642","messageId":"1643","endLine":179,"endColumn":25},{"ruleId":"1661","severity":1,"message":"1662","line":82,"column":25,"nodeType":"1663","messageId":"1664","endLine":89,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1673","line":143,"column":13,"nodeType":"1642","messageId":"1643","endLine":143,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1674","line":144,"column":13,"nodeType":"1642","messageId":"1643","endLine":144,"endColumn":16},{"ruleId":"1661","severity":1,"message":"1662","line":213,"column":24,"nodeType":"1663","messageId":"1664","endLine":230,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1658","line":15,"column":8,"nodeType":"1642","messageId":"1643","endLine":15,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1660","line":180,"column":11,"nodeType":"1642","messageId":"1643","endLine":180,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1668","line":16,"column":40,"nodeType":"1642","messageId":"1643","endLine":16,"endColumn":54},{"ruleId":"1661","severity":1,"message":"1662","line":123,"column":25,"nodeType":"1663","messageId":"1664","endLine":138,"endColumn":47},{"ruleId":"1649","replacedBy":"1675"},{"ruleId":"1651","replacedBy":"1676"},{"ruleId":"1640","severity":1,"message":"1665","line":6,"column":11,"nodeType":"1642","messageId":"1643","endLine":6,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1666","line":11,"column":17,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":27},{"ruleId":"1661","severity":1,"message":"1662","line":68,"column":37,"nodeType":"1663","messageId":"1664","endLine":74,"endColumn":59},{"ruleId":"1640","severity":1,"message":"1658","line":12,"column":8,"nodeType":"1642","messageId":"1643","endLine":12,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1667","line":189,"column":13,"nodeType":"1642","messageId":"1643","endLine":189,"endColumn":20},{"ruleId":"1661","severity":1,"message":"1662","line":84,"column":33,"nodeType":"1663","messageId":"1664","endLine":90,"endColumn":55},{"ruleId":"1661","severity":1,"message":"1662","line":108,"column":25,"nodeType":"1663","messageId":"1664","endLine":115,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1658","line":11,"column":8,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1660","line":201,"column":15,"nodeType":"1642","messageId":"1643","endLine":201,"endColumn":29},{"ruleId":"1640","severity":1,"message":"1669","line":57,"column":4,"nodeType":"1642","messageId":"1643","endLine":57,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1670","line":58,"column":4,"nodeType":"1642","messageId":"1643","endLine":58,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1671","line":2,"column":73,"nodeType":"1642","messageId":"1643","endLine":2,"endColumn":91},{"ruleId":"1640","severity":1,"message":"1672","line":2,"column":93,"nodeType":"1642","messageId":"1643","endLine":2,"endColumn":114},{"ruleId":"1640","severity":1,"message":"1653","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1654","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1655","line":10,"column":8,"nodeType":"1642","messageId":"1643","endLine":10,"endColumn":15},{"ruleId":"1649","replacedBy":"1677"},{"ruleId":"1651","replacedBy":"1678"},{"ruleId":"1661","severity":1,"message":"1662","line":108,"column":25,"nodeType":"1663","messageId":"1664","endLine":115,"endColumn":43},{"ruleId":"1661","severity":1,"message":"1662","line":58,"column":13,"nodeType":"1663","messageId":"1664","endLine":65,"endColumn":31},{"ruleId":"1640","severity":1,"message":"1668","line":16,"column":40,"nodeType":"1642","messageId":"1643","endLine":16,"endColumn":54},{"ruleId":"1661","severity":1,"message":"1662","line":122,"column":25,"nodeType":"1663","messageId":"1664","endLine":137,"endColumn":47},{"ruleId":"1640","severity":1,"message":"1673","line":143,"column":13,"nodeType":"1642","messageId":"1643","endLine":143,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1674","line":144,"column":13,"nodeType":"1642","messageId":"1643","endLine":144,"endColumn":16},{"ruleId":"1661","severity":1,"message":"1662","line":213,"column":24,"nodeType":"1663","messageId":"1664","endLine":230,"endColumn":43},{"ruleId":"1640","severity":1,"message":"1665","line":6,"column":11,"nodeType":"1642","messageId":"1643","endLine":6,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1666","line":11,"column":17,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":27},{"ruleId":"1661","severity":1,"message":"1662","line":67,"column":37,"nodeType":"1663","messageId":"1664","endLine":73,"endColumn":59},{"ruleId":"1661","severity":1,"message":"1662","line":84,"column":33,"nodeType":"1663","messageId":"1664","endLine":90,"endColumn":55},{"ruleId":"1640","severity":1,"message":"1669","line":57,"column":4,"nodeType":"1642","messageId":"1643","endLine":57,"endColumn":17},{"ruleId":"1640","severity":1,"message":"1670","line":58,"column":4,"nodeType":"1642","messageId":"1643","endLine":58,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1653","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1654","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1655","line":10,"column":8,"nodeType":"1642","messageId":"1643","endLine":10,"endColumn":15},{"ruleId":"1649","replacedBy":"1679"},{"ruleId":"1651","replacedBy":"1680"},{"ruleId":"1640","severity":1,"message":"1681","line":39,"column":10,"nodeType":"1642","messageId":"1643","endLine":39,"endColumn":21},{"ruleId":"1682","severity":1,"message":"1683","line":80,"column":39,"nodeType":"1684","messageId":"1685","endLine":80,"endColumn":41},{"ruleId":"1640","severity":1,"message":"1686","line":8,"column":10,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1687","line":8,"column":18,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":24},{"ruleId":"1640","severity":1,"message":"1671","line":11,"column":32,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":50},{"ruleId":"1640","severity":1,"message":"1688","line":11,"column":52,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":73},{"ruleId":"1640","severity":1,"message":"1689","line":11,"column":75,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":93},{"ruleId":"1640","severity":1,"message":"1672","line":11,"column":95,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":116},{"ruleId":"1640","severity":1,"message":"1690","line":5,"column":10,"nodeType":"1642","messageId":"1643","endLine":5,"endColumn":19},{"ruleId":"1682","severity":1,"message":"1683","line":96,"column":43,"nodeType":"1684","messageId":"1685","endLine":96,"endColumn":45},{"ruleId":"1682","severity":1,"message":"1683","line":81,"column":43,"nodeType":"1684","messageId":"1685","endLine":81,"endColumn":45},{"ruleId":"1682","severity":1,"message":"1683","line":63,"column":37,"nodeType":"1684","messageId":"1685","endLine":63,"endColumn":39},{"ruleId":"1640","severity":1,"message":"1691","line":5,"column":29,"nodeType":"1642","messageId":"1643","endLine":5,"endColumn":37},{"ruleId":"1640","severity":1,"message":"1692","line":6,"column":17,"nodeType":"1642","messageId":"1643","endLine":6,"endColumn":21},{"ruleId":"1640","severity":1,"message":"1693","line":6,"column":44,"nodeType":"1642","messageId":"1643","endLine":6,"endColumn":54},{"ruleId":"1640","severity":1,"message":"1694","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":20},{"ruleId":"1640","severity":1,"message":"1695","line":9,"column":30,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":54},{"ruleId":"1640","severity":1,"message":"1696","line":28,"column":7,"nodeType":"1642","messageId":"1643","endLine":28,"endColumn":11},{"ruleId":"1640","severity":1,"message":"1697","line":29,"column":7,"nodeType":"1642","messageId":"1643","endLine":29,"endColumn":18},{"ruleId":"1640","severity":1,"message":"1698","line":71,"column":13,"nodeType":"1642","messageId":"1643","endLine":71,"endColumn":29},{"ruleId":"1682","severity":1,"message":"1683","line":119,"column":37,"nodeType":"1684","messageId":"1685","endLine":119,"endColumn":39},{"ruleId":"1699","severity":1,"message":"1700","line":167,"column":81,"nodeType":"1701","messageId":"1702","endLine":167,"endColumn":83},{"ruleId":"1699","severity":1,"message":"1700","line":181,"column":100,"nodeType":"1701","messageId":"1702","endLine":181,"endColumn":102},{"ruleId":"1699","severity":1,"message":"1703","line":191,"column":73,"nodeType":"1701","messageId":"1702","endLine":191,"endColumn":75},{"ruleId":"1699","severity":1,"message":"1703","line":193,"column":76,"nodeType":"1701","messageId":"1702","endLine":193,"endColumn":78},{"ruleId":"1682","severity":1,"message":"1683","line":217,"column":50,"nodeType":"1684","messageId":"1685","endLine":217,"endColumn":52},{"ruleId":"1682","severity":1,"message":"1683","line":226,"column":53,"nodeType":"1684","messageId":"1685","endLine":226,"endColumn":55},{"ruleId":"1682","severity":1,"message":"1683","line":246,"column":52,"nodeType":"1684","messageId":"1685","endLine":246,"endColumn":54},{"ruleId":"1699","severity":1,"message":"1700","line":247,"column":81,"nodeType":"1701","messageId":"1702","endLine":247,"endColumn":83},{"ruleId":"1699","severity":1,"message":"1700","line":251,"column":21,"nodeType":"1701","messageId":"1702","endLine":251,"endColumn":23},{"ruleId":"1699","severity":1,"message":"1700","line":253,"column":71,"nodeType":"1701","messageId":"1702","endLine":253,"endColumn":73},{"ruleId":"1699","severity":1,"message":"1700","line":266,"column":69,"nodeType":"1701","messageId":"1702","endLine":266,"endColumn":71},{"ruleId":"1640","severity":1,"message":"1704","line":268,"column":12,"nodeType":"1642","messageId":"1643","endLine":268,"endColumn":27},{"ruleId":"1682","severity":1,"message":"1683","line":287,"column":48,"nodeType":"1684","messageId":"1685","endLine":287,"endColumn":50},{"ruleId":"1682","severity":1,"message":"1683","line":298,"column":48,"nodeType":"1684","messageId":"1685","endLine":298,"endColumn":50},{"ruleId":"1699","severity":1,"message":"1703","line":314,"column":72,"nodeType":"1701","messageId":"1702","endLine":314,"endColumn":74},{"ruleId":"1699","severity":1,"message":"1703","line":320,"column":72,"nodeType":"1701","messageId":"1702","endLine":320,"endColumn":74},{"ruleId":"1682","severity":1,"message":"1683","line":342,"column":54,"nodeType":"1684","messageId":"1685","endLine":342,"endColumn":56},{"ruleId":"1682","severity":1,"message":"1683","line":348,"column":55,"nodeType":"1684","messageId":"1685","endLine":348,"endColumn":57},{"ruleId":"1682","severity":1,"message":"1683","line":384,"column":41,"nodeType":"1684","messageId":"1685","endLine":384,"endColumn":43},{"ruleId":"1682","severity":1,"message":"1683","line":78,"column":37,"nodeType":"1684","messageId":"1685","endLine":78,"endColumn":39},{"ruleId":"1682","severity":1,"message":"1683","line":79,"column":98,"nodeType":"1684","messageId":"1685","endLine":79,"endColumn":100},{"ruleId":"1682","severity":1,"message":"1683","line":56,"column":73,"nodeType":"1684","messageId":"1685","endLine":56,"endColumn":75},{"ruleId":"1682","severity":1,"message":"1683","line":96,"column":41,"nodeType":"1684","messageId":"1685","endLine":96,"endColumn":43},{"ruleId":"1699","severity":1,"message":"1700","line":152,"column":85,"nodeType":"1701","messageId":"1702","endLine":152,"endColumn":87},{"ruleId":"1699","severity":1,"message":"1700","line":166,"column":104,"nodeType":"1701","messageId":"1702","endLine":166,"endColumn":106},{"ruleId":"1699","severity":1,"message":"1703","line":176,"column":77,"nodeType":"1701","messageId":"1702","endLine":176,"endColumn":79},{"ruleId":"1699","severity":1,"message":"1703","line":178,"column":80,"nodeType":"1701","messageId":"1702","endLine":178,"endColumn":82},{"ruleId":"1682","severity":1,"message":"1683","line":202,"column":54,"nodeType":"1684","messageId":"1685","endLine":202,"endColumn":56},{"ruleId":"1682","severity":1,"message":"1683","line":211,"column":57,"nodeType":"1684","messageId":"1685","endLine":211,"endColumn":59},{"ruleId":"1682","severity":1,"message":"1683","line":227,"column":52,"nodeType":"1684","messageId":"1685","endLine":227,"endColumn":54},{"ruleId":"1682","severity":1,"message":"1683","line":238,"column":52,"nodeType":"1684","messageId":"1685","endLine":238,"endColumn":54},{"ruleId":"1699","severity":1,"message":"1703","line":254,"column":80,"nodeType":"1701","messageId":"1702","endLine":254,"endColumn":82},{"ruleId":"1699","severity":1,"message":"1703","line":260,"column":80,"nodeType":"1701","messageId":"1702","endLine":260,"endColumn":82},{"ruleId":"1682","severity":1,"message":"1683","line":282,"column":55,"nodeType":"1684","messageId":"1685","endLine":282,"endColumn":57},{"ruleId":"1682","severity":1,"message":"1683","line":288,"column":59,"nodeType":"1684","messageId":"1685","endLine":288,"endColumn":61},{"ruleId":"1682","severity":1,"message":"1683","line":324,"column":43,"nodeType":"1684","messageId":"1685","endLine":324,"endColumn":45},{"ruleId":"1640","severity":1,"message":"1705","line":16,"column":11,"nodeType":"1642","messageId":"1643","endLine":16,"endColumn":39},{"ruleId":"1640","severity":1,"message":"1706","line":20,"column":11,"nodeType":"1642","messageId":"1643","endLine":20,"endColumn":36},{"ruleId":"1640","severity":1,"message":"1707","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":22},{"ruleId":"1640","severity":1,"message":"1708","line":11,"column":9,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":19},{"ruleId":"1640","severity":1,"message":"1709","line":11,"column":21,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":34},{"ruleId":"1640","severity":1,"message":"1710","line":12,"column":2,"nodeType":"1642","messageId":"1643","endLine":12,"endColumn":14},{"ruleId":"1640","severity":1,"message":"1711","line":12,"column":16,"nodeType":"1642","messageId":"1643","endLine":12,"endColumn":33},{"ruleId":"1640","severity":1,"message":"1712","line":12,"column":35,"nodeType":"1642","messageId":"1643","endLine":12,"endColumn":49},{"ruleId":"1640","severity":1,"message":"1713","line":13,"column":2,"nodeType":"1642","messageId":"1643","endLine":13,"endColumn":16},{"ruleId":"1640","severity":1,"message":"1714","line":13,"column":18,"nodeType":"1642","messageId":"1643","endLine":13,"endColumn":27},{"ruleId":"1640","severity":1,"message":"1715","line":13,"column":29,"nodeType":"1642","messageId":"1643","endLine":13,"endColumn":40},{"ruleId":"1640","severity":1,"message":"1653","line":8,"column":8,"nodeType":"1642","messageId":"1643","endLine":8,"endColumn":15},{"ruleId":"1640","severity":1,"message":"1654","line":9,"column":10,"nodeType":"1642","messageId":"1643","endLine":9,"endColumn":25},{"ruleId":"1640","severity":1,"message":"1716","line":11,"column":9,"nodeType":"1642","messageId":"1643","endLine":11,"endColumn":19},"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'allSchools' is defined but never used.","'subjectState' is assigned a value but never used.","'dataValue' is defined but never used.","no-native-reassign",["1717"],"no-negated-in-lhs",["1718"],"'toaster' is defined but never used.","'notificationMsg' is defined but never used.","'history' is defined but never used.",["1717"],["1718"],"'InfiniteScroll' is defined but never used.","'dataValue' is assigned a value but never used.","'loadingTextCSS' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'ClassesForm' is defined but never used.","'FieldProps' is defined but never used.","'loading' is assigned a value but never used.","'useJsApiLoader' is defined but never used.","'userFirstName' is assigned a value but never used.","'userLastName' is assigned a value but never used.","'FormInvalidMessage' is defined but never used.","'formValidationSizeMsg' is defined but never used.","'lat' is assigned a value but never used.","'lng' is assigned a value but never used.",["1717"],["1718"],["1717"],["1718"],["1717"],["1718"],"'DiaryAction' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'object' is defined but never used.","'string' is defined but never used.","'FormvalidationMessage' is defined but never used.","'formValidationSize' is defined but never used.","'RootState' is defined but never used.","'Checkbox' is defined but never used.","'Form' is defined but never used.","'FieldArray' is defined but never used.","'Autocomplete' is defined but never used.","'fetchTeachersMappingPost' is defined but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'getClassName' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'selectedStudent' is assigned a value but never used.","'FetchSearchAllStudentSuccess' is defined but never used.","'FetchSearchAllStudentFail' is defined but never used.","'LoadMoreType' is defined but never used.","'AuthRoutes' is defined but never used.","'NonAuthRoutes' is defined but never used.","'SchoolManage' is defined but never used.","'UserManagementUrl' is defined but never used.","'StudentDetails' is defined but never used.","'TeacherDetails' is defined but never used.","'DiaryList' is defined but never used.","'NoticeBoard' is defined but never used.","'LogoutPost' is defined but never used.","no-global-assign","no-unsafe-negation"]